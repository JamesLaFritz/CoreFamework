{
  "api/CoreFramework.Attributes.ButtonAttribute.html": {
    "href": "api/CoreFramework.Attributes.ButtonAttribute.html",
    "title": "| Core Framework Documentation ButtonAttribute",
    "keywords": "ButtonAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Method)] public class ButtonAttribute : Attribute, _Attribute Inheritance System.Object System.Attribute ButtonAttribute Description Add this attribute above one of your MonoBehaviour method and it will draw a button in the inspector that will run the method when clicked. Remarks Warning The method must not have any parameters and can not be static. Tip Use ButtonAttribute.Mode.Play if you want the Button to only work in Play mode. Tip Use ButtonAttribute.Mode.Editor if you want the Button to only work in Edit mode. Examples [Button(ButtonAttribute.Mode.Play)] public void PlayModeButton() { Debug.Log($\"{name}: Play Mode Only\"); } [Button(ButtonAttribute.Mode.Editor)] public void EditModeButton() { Debug.Log($\"{name}: Edit Mode Only\"); } [Button] public void PlayAndEditModeButton() { Debug.Log($\"{name}: Play Mode and Edit Mode\"); } Constructors ButtonAttribute(ButtonAttribute.Mode) public ButtonAttribute(ButtonAttribute.Mode mode = ButtonAttribute.Mode.Both) Parameters ButtonAttribute.Mode mode The Unity Editor ButtonAttribute.Mode that the button should be clickable. Description Initializes a new instance of the ButtonAttribute Fields mode public readonly ButtonAttribute.Mode mode Field Value ButtonAttribute.Mode mode Determine which Unity Editor mode a button should work in. Description Which mode the button is clickable in the Inspector (Play Mode, Editor Mode, or Both)."
  },
  "api/CoreFramework.Attributes.ButtonAttribute.Mode.html": {
    "href": "api/CoreFramework.Attributes.ButtonAttribute.Mode.html",
    "title": "| Core Framework Documentation ButtonAttribute.Mode",
    "keywords": "ButtonAttribute.Mode Enum in CoreFramework.Attributes public enum Mode Description Determine which Unity Editor mode a button should work in. Both The button will work in both Editor and Play Mode Editor The button will only work in Editor mode (Unity Editor is not in Play Mode). Play The button will only work when Unity is in Play mode."
  },
  "api/CoreFramework.Attributes.FolderPathAttribute.html": {
    "href": "api/CoreFramework.Attributes.FolderPathAttribute.html",
    "title": "| Core Framework Documentation FolderPathAttribute",
    "keywords": "FolderPathAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)] public class FolderPathAttribute : PropertyAttribute Inheritance System.Object FolderPathAttribute Description Displays a text field with a folder button to the right, with which you can select a folder path as the string value. If you pass false to this attribute this will use the absolute path to the folder. If you pass true to this attribute this will use the path relative to the Project. To make it so the field can not be change outside the Class make it a private field and add the SerializeField tag. [readOnly, SerializeField] public int healthPoints; [readOnly] [SerializeField] public int healthPoints; Examples [FolderPath(false)] public string absolutePath; [FolderPath(true)] public string relativePath; Constructors FolderPathAttribute() public FolderPathAttribute() Description Set path string relative to the project with a folder selection button FolderPathAttribute(Boolean) public FolderPathAttribute(bool pathRelativeToProject) Parameters System.Boolean pathRelativeToProject Path is absolute (false) or relative to the project (true) Description Set path string with a folder selection button Fields pathRelativeToProject public readonly bool pathRelativeToProject Field Value System.Boolean pathRelativeToProject Description Remarks Important Is used by the editor to draw in the Inspector ."
  },
  "api/CoreFramework.Attributes.HeaderAttribute.html": {
    "href": "api/CoreFramework.Attributes.HeaderAttribute.html",
    "title": "| Core Framework Documentation HeaderAttribute",
    "keywords": "HeaderAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class HeaderAttribute : PropertyAttribute Inheritance System.Object HeaderAttribute Description Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon Can Be Used In Connection with any other Attribute including Unity's Built-In Attributes Order does not mater. You can also have Multiple Headers. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"\", \"\", HeaderAttribute.PresetColor.Black)] [Header(\"Health Range\")] [Range(0, 500)] public float healthRange = 100; [Range(0, 100)] [Header(\"Health Range\")] public float healthRange1 = 100; } Examples Header(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5f) [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; Header(string text, string iconPath, float textHeightIncrease = 1.5f) [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; Header(string text, string iconPath, PresetColor presetColor, float textHeightIncrease = 1.5f) [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; Header(string s, bool textOnly = true) [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; Constructors HeaderAttribute(String, Boolean) public HeaderAttribute(string s, bool textOnly = true) Parameters System.String s If Text Only(textOnly == true), the text to use for the label of the header. If Icon Only(textOnly == false), the relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Boolean textOnly Is this a text only (true) or icon only Header (false) defaults to true. Description Draws a Header in the Inspector that allows using custom text, or an icon with a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Examples [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; HeaderAttribute(String, String, HeaderAttribute.PresetColor, Single) public HeaderAttribute(string text, string iconPath, HeaderAttribute.PresetColor presetColor, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. HeaderAttribute.PresetColor presetColor Uses on of the HeaderAttribute.PresetColor System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon, one of the preset colors and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. The Colors available are Black Blue Cyan Gray Green Grey Magenta Red Yellow Examples [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; HeaderAttribute(String, String, Single) public HeaderAttribute(string text, string iconPath, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon and a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Examples [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; HeaderAttribute(String, String, Single[], Single) public HeaderAttribute(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Single [] colorElement The color to use for the label. Can be null. If null uses Grey for the seperator and White for the Text Needs at least three elements. new[] {r, g, b}) || new[] {r, g, b, a}) System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. The text Height increase defaults to 1.5f . Examples [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; Fields color public readonly Color? color Field Value System.Nullable < Color > color The color Description The color Remarks Important Is used by the editor to draw header in the Inspector . colorIsNull public readonly bool colorIsNull Field Value System.Boolean colorIsNull The color is null Description The color is null Remarks Important Is used by the editor to draw header in the Inspector . header public readonly string header Field Value System.String header The header Description The header Remarks Important Is used by the editor to draw header in the Inspector . headerIsNull public readonly bool headerIsNull Field Value System.Boolean headerIsNull The header is null Description The header is null Remarks Important Is used by the editor to draw header in the Inspector . iconPath public readonly string iconPath Field Value System.String iconPath The path to the icon. Relative to the Assets folder. Description The path to the icon. Relative to the Assets folder. Remarks Important Is used by the editor to draw header in the Inspector . iconPathIsNull public readonly bool iconPathIsNull Field Value System.Boolean iconPathIsNull The icon path is null Description The icon path is null Remarks Important Is used by the editor to draw header in the Inspector . textHeightIncrease public readonly float textHeightIncrease Field Value System.Single textHeightIncrease The text height increase Description The text height increase Remarks Important Is used by the editor to draw header in the Inspector . useDefaultFontSize public readonly bool useDefaultFontSize Field Value System.Boolean useDefaultFontSize The use default font size Description The use default font size Remarks Important Is used by the editor to draw header in the Inspector ."
  },
  "api/CoreFramework.Attributes.HeaderAttribute.PresetColor.html": {
    "href": "api/CoreFramework.Attributes.HeaderAttribute.PresetColor.html",
    "title": "| Core Framework Documentation HeaderAttribute.PresetColor",
    "keywords": "HeaderAttribute.PresetColor Enum in CoreFramework.Attributes public enum PresetColor Description Available Colors by name that can be used. Black The black preset color Blue The blue preset color Cyan The cyan preset color Gray The gray preset color Green The green preset color Grey The grey preset color Magenta The magenta preset color Red The red preset color Yellow The yellow preset color"
  },
  "api/CoreFramework.Attributes.html": {
    "href": "api/CoreFramework.Attributes.html",
    "title": "| Core Framework Documentation CoreFramework.Attributes",
    "keywords": "Namespace CoreFramework.Attributes Attributes that can be used to make the Inspector look better with out creating custom inspector editors Classes ButtonAttribute Add this attribute above one of your MonoBehaviour method and it will draw a button in the inspector that will run the method when clicked. FolderPathAttribute Displays a text field with a folder button to the right, with which you can select a folder path as the string value. If you pass false to this attribute this will use the absolute path to the folder. If you pass true to this attribute this will use the path relative to the Project. HeaderAttribute Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon IconAttribute Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. InfoBoxAttribute Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. InputAxisAttribute Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. ReadOnlyAttribute Use this attribute to make a field appear as read only in the Inspector RequiredReferenceAttribute Requires the field to be not null. If it is Null, the field will be displayed in red with a warning icon to the right. Use this to notify the user that the field is required and they should fill it in. Important You should still do null checks in your code as this is only for visualization in the Inspector. SceneAttribute Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. ShowIfBoolAttribute Show/Hide a field based on a bool value in the same script. ShowIfEnumValueAttribute Show/Hide a field based on a enum value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. TagAttribute Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Enums ButtonAttribute.Mode Determine which Unity Editor mode a button should work in. HeaderAttribute.PresetColor Available Colors by name that can be used. InfoBoxType The info box type enum"
  },
  "api/CoreFramework.Attributes.IconAttribute.html": {
    "href": "api/CoreFramework.Attributes.IconAttribute.html",
    "title": "| Core Framework Documentation IconAttribute",
    "keywords": "IconAttribute Class in CoreFramework.Attributes public class IconAttribute : Attribute Inheritance System.Object IconAttribute Description Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Examples [Icon(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\")]; Constructors IconAttribute(String) public IconAttribute(string path) Parameters System.String path A project-relative path to a texture. Description Create an IconAttribute with a path to an icon. Properties Path public string Path { get; } Property Value System.String Path A project-relative path to a texture. Description A project-relative path to a texture. Remarks Important Is used by the editor to draw header in the Inspector ."
  },
  "api/CoreFramework.Attributes.InfoBoxAttribute.html": {
    "href": "api/CoreFramework.Attributes.InfoBoxAttribute.html",
    "title": "| Core Framework Documentation InfoBoxAttribute",
    "keywords": "InfoBoxAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class InfoBoxAttribute : PropertyAttribute Inheritance System.Object InfoBoxAttribute Description Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. Examples Draws an Information Type Box [InfoBox(\"Info String To Display\")] public float someFloat; Draws a Warning Information Box. [InfoBox(\"Some Bool with a warning.\", InfoBoxType.Warning)] public bool someBool; Draws an Error Info Box [InfoBox(\"Some String with an error message.\", InfoBoxType.Error)] public string someString; Draws a Info Box with no Icon. [InfoBox(\"Some Float with no icon in box\", InfoBoxType.None)] public float someOtherFloat; Constructors InfoBoxAttribute(String, InfoBoxType) public InfoBoxAttribute(string text, InfoBoxType type = InfoBoxType.Info) Parameters System.String text The message to display in the text box. InfoBoxType type The type of message to display, defaults to Info. Description Draws an Info Box in the Inspector. Fields infoBoxType public readonly InfoBoxType infoBoxType Field Value InfoBoxType infoBoxType The info box type. Description The info box type. Remarks Important Is used by the editor to draw header in the Inspector . text public readonly string text Field Value System.String text The text to display in the info box. Description The text to display in the info box. Remarks Important Is used by the editor to draw header in the Inspector ."
  },
  "api/CoreFramework.Attributes.InfoBoxType.html": {
    "href": "api/CoreFramework.Attributes.InfoBoxType.html",
    "title": "| Core Framework Documentation InfoBoxType",
    "keywords": "InfoBoxType Enum in CoreFramework.Attributes public enum InfoBoxType Description The info box type enum Error The error info box type Info The info info box type None The none info box type Warning The warning info box type"
  },
  "api/CoreFramework.Attributes.InputAxisAttribute.html": {
    "href": "api/CoreFramework.Attributes.InputAxisAttribute.html",
    "title": "| Core Framework Documentation InputAxisAttribute",
    "keywords": "InputAxisAttribute Class in CoreFramework.Attributes public class InputAxisAttribute : PropertyAttribute Inheritance System.Object InputAxisAttribute Description Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. Remarks For Use only with the legacy Input System. Examples [InputAxis] public string inputToUse;"
  },
  "api/CoreFramework.Attributes.ReadOnlyAttribute.html": {
    "href": "api/CoreFramework.Attributes.ReadOnlyAttribute.html",
    "title": "| Core Framework Documentation ReadOnlyAttribute",
    "keywords": "ReadOnlyAttribute Class in CoreFramework.Attributes public class ReadOnlyAttribute : PropertyAttribute Inheritance System.Object ReadOnlyAttribute Description Use this attribute to make a field appear as read only in the Inspector To make it so the field can not be change outside the Class make it a private field and add the SerializeField tag. [readOnly, SerializeField] public int healthPoints; [readOnly] [SerializeField] public int healthPoints; Examples [readOnly] public int healthPoints;"
  },
  "api/CoreFramework.Attributes.RequiredReferenceAttribute.html": {
    "href": "api/CoreFramework.Attributes.RequiredReferenceAttribute.html",
    "title": "| Core Framework Documentation RequiredReferenceAttribute",
    "keywords": "RequiredReferenceAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class RequiredReferenceAttribute : PropertyAttribute Inheritance System.Object RequiredReferenceAttribute Description Requires the field to be not null. If it is Null, the field will be displayed in red with a warning icon to the right. Use this to notify the user that the field is required and they should fill it in. Important You should still do null checks in your code as this is only for visualization in the Inspector. Examples [RequiredReference] public GameObject requiredReference;"
  },
  "api/CoreFramework.Attributes.SceneAttribute.html": {
    "href": "api/CoreFramework.Attributes.SceneAttribute.html",
    "title": "| Core Framework Documentation SceneAttribute",
    "keywords": "SceneAttribute Class in CoreFramework.Attributes public class SceneAttribute : PropertyAttribute Inheritance System.Object SceneAttribute Description Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. Examples [Scene] public string sceneName; [Scene] public int sceneIndex;"
  },
  "api/CoreFramework.Attributes.ShowIfBoolAttribute.html": {
    "href": "api/CoreFramework.Attributes.ShowIfBoolAttribute.html",
    "title": "| Core Framework Documentation ShowIfBoolAttribute",
    "keywords": "ShowIfBoolAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class ShowIfBoolAttribute : PropertyAttribute Inheritance System.Object ShowIfBoolAttribute Description Show/Hide a field based on a bool value in the same script. Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Examples public bool showHideValue; // Shows this value if showHideValue = true; [ShowIfBool(\"showHideValue\")] public int showIfTrueInt; // Shows this value if showHideValue = false; [ShowIfBool(\"showHideValue\", false)] public int showIfFalseInt; Constructors ShowIfBoolAttribute(String, Boolean) public ShowIfBoolAttribute(string boolName, bool show = true) Parameters System.String boolName The name of the serialized bool property to use. System.Boolean show The value of the bool to show this property. Defaults to true Description Show/Hide a field based on a bool value in the same script. Fields boolName public readonly string boolName Field Value System.String boolName The name of the serialized bool property to use. Description The name of the serialized bool property to use. Remarks Important Is used by the editor to draw in the Inspector . show public readonly bool show Field Value System.Boolean show The value of the bool property to show this property. show=true, the property will be shown when boolName is true and hidden when boolName is false. show=false, the property will be shown when boolName is false and hidden when boolName is true. Description The value of the bool property to show this property. show=true, the property will be shown when boolName is true and hidden when boolName is false. show=false, the property will be shown when boolName is false and hidden when boolName is true. Remarks Important Is used by the editor to draw in the Inspector ."
  },
  "api/CoreFramework.Attributes.ShowIfEnumValueAttribute.html": {
    "href": "api/CoreFramework.Attributes.ShowIfEnumValueAttribute.html",
    "title": "| Core Framework Documentation ShowIfEnumValueAttribute",
    "keywords": "ShowIfEnumValueAttribute Class in CoreFramework.Attributes [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class ShowIfEnumValueAttribute : PropertyAttribute Inheritance System.Object ShowIfEnumValueAttribute Description Show/Hide a field based on a enum value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Examples public enum SomeEnum { one, two, three } public SomeEnum someEnum = SomeEnum.one; [ShowIfEnumValue(\"someEnum\", (int) SomeEnum.one)] public int showIfSomeEnumOne; [ShowIfEnumValue(\"someEnum\", (int) SomeEnum.one, false)] public int showIfSomeEnumNotOne; Constructors ShowIfEnumValueAttribute(String, Int32, Boolean) public ShowIfEnumValueAttribute(string enumName, int enumIndex, bool show = true) Parameters System.String enumName The name of the serialized enum property to use. System.Int32 enumIndex The index of the enum that controls the showing of this property. System.Boolean show Show if the enum value matches or not. Defaults to true Description Show/Hide a field based on a bool value in the same script. Fields enumIndex public readonly int enumIndex Field Value System.Int32 enumIndex The index of the enum that controls the showing of this property. Description The index of the enum that controls the showing of this property. Remarks Important Is used by the editor to draw in the Inspector . enumName public readonly string enumName Field Value System.String enumName The name of the serialized enum property to use. Description The name of the serialized enum property to use. Remarks Important Is used by the editor to draw in the Inspector . show public readonly bool show Field Value System.Boolean show Show if the enum value matches or not. Description Show if the enum value matches or not. Remarks Important Is used by the editor to draw in the Inspector ."
  },
  "api/CoreFramework.Attributes.TagAttribute.html": {
    "href": "api/CoreFramework.Attributes.TagAttribute.html",
    "title": "| Core Framework Documentation TagAttribute",
    "keywords": "TagAttribute Class in CoreFramework.Attributes public class TagAttribute : PropertyAttribute Inheritance System.Object TagAttribute Description Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Examples [Tag] public string targetTag;"
  },
  "api/CoreFrameworkEditor.Attributes.FolderPathAttributeDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.FolderPathAttributeDrawer.html",
    "title": "| Core Framework Documentation FolderPathAttributeDrawer",
    "keywords": "FolderPathAttributeDrawer Class in CoreFrameworkEditor.Attributes public class FolderPathAttributeDrawer : PropertyDrawer Inheritance System.Object FolderPathAttributeDrawer Description A property drawer for FolderPathAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Constructors FolderPathAttributeDrawer() public FolderPathAttributeDrawer() Description Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Attributes.HeaderAttributeDecoratorDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.HeaderAttributeDecoratorDrawer.html",
    "title": "| Core Framework Documentation HeaderAttributeDecoratorDrawer",
    "keywords": "HeaderAttributeDecoratorDrawer Class in CoreFrameworkEditor.Attributes public class HeaderAttributeDecoratorDrawer : DecoratorDrawer Inheritance System.Object HeaderAttributeDecoratorDrawer Description The header attribute decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html Methods CreatePropertyGUI(HeaderAttribute) public static VisualElement CreatePropertyGUI(HeaderAttribute attribute) Parameters HeaderAttribute attribute Returns VisualElement Description GetHeight() public override float GetHeight() Returns System.Single Description OnGUI(Rect) public override void OnGUI(Rect position) Parameters Rect position Description"
  },
  "api/CoreFrameworkEditor.Attributes.html": {
    "href": "api/CoreFrameworkEditor.Attributes.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Attributes",
    "keywords": "Namespace CoreFrameworkEditor.Attributes Contains all of the property drawers and the custom inspector editor that are used to draw the Default Inspector Classes FolderPathAttributeDrawer A property drawer for FolderPathAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html HeaderAttributeDecoratorDrawer The header attribute decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html InfoBoxDecoratorDrawer The info box decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html InputAxisPropertyDrawer A custom property drawer for the InputAxisAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html ReadOnlyPropertyDrawer A property drawer for the ReadOnlyAttribute Inherits from UnityEditor.PropertyDrawer RequiredReferencePropertyDrawer A property drawer for RequiredReferenceAttribute UnityEditor.PropertyDrawer SceneAttributePropertyDrawer A custom property drawer for the SceneAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html ShowIfBoolPropertyDrawer A property drawer for ShowIfBoolAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html ShowIfEnumPropertyDrawer A property drawer for ShowIfEnumValueAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html TagAttributePropertyDrawer A custom property drawer for the TagAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html"
  },
  "api/CoreFrameworkEditor.Attributes.InfoBoxDecoratorDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.InfoBoxDecoratorDrawer.html",
    "title": "| Core Framework Documentation InfoBoxDecoratorDrawer",
    "keywords": "InfoBoxDecoratorDrawer Class in CoreFrameworkEditor.Attributes public class InfoBoxDecoratorDrawer : DecoratorDrawer Inheritance System.Object InfoBoxDecoratorDrawer Description The info box decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html Methods CreatePropertyGUI(InfoBoxAttribute) public static VisualElement CreatePropertyGUI(InfoBoxAttribute attribute) Parameters InfoBoxAttribute attribute Returns VisualElement Description GetHeight() public override float GetHeight() Returns System.Single Description OnGUI(Rect) public override void OnGUI(Rect position) Parameters Rect position Description"
  },
  "api/CoreFrameworkEditor.Attributes.InputAxisPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.InputAxisPropertyDrawer.html",
    "title": "| Core Framework Documentation InputAxisPropertyDrawer",
    "keywords": "InputAxisPropertyDrawer Class in CoreFrameworkEditor.Attributes public class InputAxisPropertyDrawer : PropertyDrawer Inheritance System.Object InputAxisPropertyDrawer Description A custom property drawer for the InputAxisAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position The position SerializedProperty property The property GUIContent label The label Description Ons the gui using the specified position"
  },
  "api/CoreFrameworkEditor.Attributes.ReadOnlyPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ReadOnlyPropertyDrawer.html",
    "title": "| Core Framework Documentation ReadOnlyPropertyDrawer",
    "keywords": "ReadOnlyPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ReadOnlyPropertyDrawer : PropertyDrawer Inheritance System.Object ReadOnlyPropertyDrawer Description A property drawer for the ReadOnlyAttribute Inherits from UnityEditor.PropertyDrawer Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property The SerializedProperty to make the custom GUI for. Returns VisualElement VisualElement The element containing the custom GUI. Description Override this method to make your own UIElements based GUI for the property. UnityEditor.PropertyDrawer.CreatePropertyGUI OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Description Override this method to make your own IMGUI based GUI for the property. UnityEditor.PropertyDrawer.OnGUI"
  },
  "api/CoreFrameworkEditor.Attributes.RequiredReferencePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.RequiredReferencePropertyDrawer.html",
    "title": "| Core Framework Documentation RequiredReferencePropertyDrawer",
    "keywords": "RequiredReferencePropertyDrawer Class in CoreFrameworkEditor.Attributes public class RequiredReferencePropertyDrawer : PropertyDrawer Inheritance System.Object RequiredReferencePropertyDrawer Description A property drawer for RequiredReferenceAttribute UnityEditor.PropertyDrawer Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description PropertyDrawer.CreatePropertyGUI OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description PropertyDrawer.OnGUI"
  },
  "api/CoreFrameworkEditor.Attributes.SceneAttributePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.SceneAttributePropertyDrawer.html",
    "title": "| Core Framework Documentation SceneAttributePropertyDrawer",
    "keywords": "SceneAttributePropertyDrawer Class in CoreFrameworkEditor.Attributes public class SceneAttributePropertyDrawer : PropertyDrawer Inheritance System.Object SceneAttributePropertyDrawer Description A custom property drawer for the SceneAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Attributes.ShowIfBoolPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ShowIfBoolPropertyDrawer.html",
    "title": "| Core Framework Documentation ShowIfBoolPropertyDrawer",
    "keywords": "ShowIfBoolPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ShowIfBoolPropertyDrawer : PropertyDrawer Inheritance System.Object ShowIfBoolPropertyDrawer Description A property drawer for ShowIfBoolAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Attributes.ShowIfEnumPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ShowIfEnumPropertyDrawer.html",
    "title": "| Core Framework Documentation ShowIfEnumPropertyDrawer",
    "keywords": "ShowIfEnumPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ShowIfEnumPropertyDrawer : PropertyDrawer Inheritance System.Object ShowIfEnumPropertyDrawer Description A property drawer for ShowIfEnumValueAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Attributes.TagAttributePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.TagAttributePropertyDrawer.html",
    "title": "| Core Framework Documentation TagAttributePropertyDrawer",
    "keywords": "TagAttributePropertyDrawer Class in CoreFrameworkEditor.Attributes public class TagAttributePropertyDrawer : PropertyDrawer Inheritance System.Object TagAttributePropertyDrawer Description A custom property drawer for the TagAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| Core Framework Documentation Change Log",
    "keywords": "Change Log Initial Commit 4b9d94168e1fc4aef365031d84ac9f72da21c13c Documentation Configuration. 5354d7b3cd70afd6be27ba4fa4d63ad0ea9d72e4 Attributes, Animation Parameters, Destroy, Extensions, Functional, Interactable copied and working from Local Core Framework package Started Working on Documentation and Samples bfcae1e9af625ee3fe0714dd98a476bb605231a5 Placed Animator Parameter Attribute with Animation related files 4ca03819696cf097cc6ccb31e7949c5fefef4bb7 Fixed Issue with Icons not displaying if property had no other attributes 1d8f30d97cb898662a14f6b366158611cf041c5e Completed Attribute Samples af6ce2627b13156fb05feb23bb85847e14b8fa52"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Core Framework Documentation About The Project",
    "keywords": "<!-- Header --> <!--<h3 align=\"center\">Project Title</h3>--> <!--<h2 align=\"center\">Project Description</h2>--> ' Report Bug or Request Feature <!-- PROJECT SHIELDS --> <!-- Links --> <!-- PROJECT LOGO --> <!-- ABOUT THE PROJECT --> About The Project Documentation Framework that contains useful Modules to be Used in Unity Project. Built With V2021.3.5f1 <!-- Installation --> Installation To install this into your project for modifications Clone or Download the code from Git Hub into your project. Check Out Third Party Notices for additional assets that where used in this project that you can get from the asset store. <!-- ROADMAP --> Roadmap See the open issues for a list of proposed features (and known issues). Currently in Work: Documentation, Samples, Attributes using UI Elements, and Scriptable Object Variables and Game Events. Scriptable Object Variables and Game Events Documentation: Manual Animation Animation Parameters Bool Float Int Trigger Animation Parameter Drawer Attributes Create From Game Object Destroy After Time No Children Extensions Array Quaternion Text Vector4 Functional Option Interactable Scriptable Object Variables and Game Events API Documentation Samples Animation Animation Parameters Bool Float Int Trigger Animation Parameter Drawer Attributes Destroy After Time No Children Extensions Array Quaternion Text Vector4 Functional Option Interactable Scriptable Object Variables and Game Events Attributes using UI Elements Header Add Header Element to Property Element Use Style Sheet Info Box Add Header Element to Property Element Use Style Sheet Icon Show If Bool Show If Enum <!-- LICENSE --> License Distributed under the MIT License. See for more information. <!-- Ac --> License Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 @roboryantron The slides are on slide share. [!Video https://www.youtube.com/embed/raQ3iHhE_Kk ] The video for the talk is posted on Unity's YouTube page. Add API documentation Add this to the doc.json file { \"metadata\": [ { \"src\": [ { \"src\":\"../\", \"files\": [\"**.cs\"], \"exclude\": [ \"docs/**\", \"**/bin/**\", \"**/obj/**\", \"Documentation~/**\", \".git/**\" ] } ], \"dest\": \"api\", \"disableGitFeatures\": false, \"disableDefaultFilter\": false, \"force\": true } ], \"build\": { \"content\": [ { \"files\": [\"api/**\"] }, } }"
  },
  "License/Asset Licenses.html": {
    "href": "License/Asset Licenses.html",
    "title": "| Core Framework Documentation Asset Licenses",
    "keywords": "Asset Licenses Restricted Asset The publisher has designated this as a Restricted Asset under Section 2.2.2 of the Asset Store EULA. Specifically, the publisher added the following restrictions: END USER may not monetize this Asset in an application whose primary purpose is to create user-generated content. ( Metaverse) END USER may not incorporate the Asset into a product whose primary purpose is to enable the minting and exchange of non-fungible tokens. Extension Asset One license required for each individual user. Single Entity License applies to a single entity. Contractors are required to have their own, separate license. Multi Entity License applies to an entity as well as parent, child, and sister entities. Contractors working on a project do not need a separate license. For more information, check the EULA and FAQ ."
  },
  "License/LICENSE.html": {
    "href": "License/LICENSE.html",
    "title": "| Core Framework Documentation MIT License",
    "keywords": "MIT License Copyright (c) 2022 James LaFritz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "License/Third Party Notices.html": {
    "href": "License/Third Party Notices.html",
    "title": "| Core Framework Documentation Third Party Notices",
    "keywords": "Third Party Notices This package contains third-party software components governed by the license(s) indicated below: Unity Property Attribute License Assets: \"Runtime/Extensions/ArrayExtensions.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: Unity Cs Reference License BitCake BitStrap License Assets: \"Runtime/Attributes/Functional/Option.cs\" \"Runtime/Animation/AnimationParameter.cs\" \"Runtime/Animation/AnimatorFieldAttribute.cs\" \"Runtime/Animation/BoolAnimationParameter.cs\" \"Runtime/Animation/FloatAnimationParameter.cs\" \"Runtime/Animation/IntAnimationParameter.cs\" \"Runtime/Animation/TriggerAnimationParameter.cs\" \"Editor/Animation/AnimationParameterDrawer.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: BitCake BitStrap License Adobe Assets: \"Mixamo/**\" > All Animations and Models can be obtained for free from Mixamo Licenses: Adobe General Terms of Use Mixamo Additional Terms The following assets are from the asset store. Used in the making of this product and my appear in the screens shots, but are not included, If you would like to utilize them you can obtain them from the Asset Store. Extension Asset Assets: \"Asset Store/Synty/PolygonStarter/**\" POLYGON Starter Pack - Low Poly 3D Art by Synty Cost: Free Licenses: Asset Store End User License Agreement Sections 2.3 and 2.4 Asset Licenses: Extension Asset Single Entity Assets: Licenses: Asset Store End User License Agreement (Single Entity - Section 1.1) Asset Licenses: Single Entity Restricted Single Entity Assets: \"Asset Store/Synty/PolygonPrototype/**\" POLYGON Prototype - Low Poly 3D Art by Synty Cost: $4.99 Licenses: Asset Store End User License Agreement (Restricted - Section 2.2.2)(Single Entity - Section 1.1) Asset Licenses: Restricted Single Entity Restricted Single Entity Synty Custom Licenses Assets: Licenses: Asset Store End User License Agreement (Restricted - Section 2.2.2)(Single Entity - Section 1.1) Asset Licenses: Restricted Single Entity Synty Custom Licenses"
  },
  "Manual/Attributes/attributes.html": {
    "href": "Manual/Attributes/attributes.html",
    "title": "| Core Framework Documentation Attributes",
    "keywords": "Attributes Alerts Note some info Tip This is some Tip Warning This is a warning Caution This is a Catuion Important This is something Important Images Put Images in the Images Directory To use them here Code Inline This Code is Inline Code Block // ButtonAttribute.cs // 07-19-2022 // James LaFritz namespace CoreFramework.Attributes { /// <summary> /// Add this attribute above one of your MonoBehaviour method and it will draw /// a button in the inspector that will run the method when clicked. /// </summary> /// <remarks> /// > [!WARNING] /// > The method must not have any parameters and can not be static. /// > [!TIP] /// > Use **`ButtonAttribute.Mode.Play`** if you want the _Button_ to only work in _Play_ mode. /// > [!TIP] /// > Use **`ButtonAttribute.Mode.Editor`** if you want the _Button_ to only work in _Edit_ mode. /// </remarks> /// <example> /// <code class=\"lang-cs\"> /// [Button] /// public void MyMethod() /// { /// Debug.Log($\"{name}: MyMethod()\"); /// } /// </code> /// </example> [System.AttributeUsage(System.AttributeTargets.Method)] public class ButtonAttribute : System.Attribute { /// <summary> /// Determine which Unity Editor mode a button should work in. /// </summary> public enum Mode { /// <summary> /// The button will only work in Editor mode (Unity Editor is not in Play Mode). /// </summary> Editor, /// <summary> /// The button will only work when Unity is in Play mode. /// </summary> Play, /// <summary> /// The button will work in both Editor and Play Mode /// </summary> Both } /// <summary> /// Which mode the button is clickable in the **_Inspector_** (Play Mode, Editor Mode, or Both). /// </summary> /// <value>Determine which Unity Editor mode a button should work in..</value> public readonly Mode mode; public string description { get; set; } /// <summary> /// Initializes a new instance of the ButtonAttribute /// </summary> /// <param name=\"mode\">The Unity Editor <see cref=\"Mode\"/> that the button should be clickable.</param> public ButtonAttribute(Mode mode = Mode.Both) { Debug.Assert(mode != Mode.Both, \"ButtonAttribute.Mode.Both is not a valid mode.\"); this.mode = mode; } } } Block Quote private void Update() { } Quote This is a Quote How Do we like it H1 H2 H3 H4 H5 H6"
  },
  "Manual/Attributes/ButtonAttribute.html": {
    "href": "Manual/Attributes/ButtonAttribute.html",
    "title": "| Core Framework Documentation Button",
    "keywords": "Button A method can be marked as a button. A button appears in the inspector and executes the method if clicked. Warning The method must not have any parameters and can not be static. Tip Use ButtonAttribute.Mode.Play if you want the Button to only work in Play mode. Tip Use ButtonAttribute.Mode.Editor if you want the Button to only work in Edit mode. using CoreFramework.Attributes; using UnityEngine; public class ButtonExample : MonoBehaviour { [Button(ButtonAttribute.Mode.Play)] public void PlayModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode Only\"); } [Button(ButtonAttribute.Mode.Editor)] public void EditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Edit Mode Only\"); } [Button] public void PlayAndEditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode and Edit Mode\"); } }"
  },
  "Manual/Attributes/Decorators/HeaderAttribute.html": {
    "href": "Manual/Attributes/Decorators/HeaderAttribute.html",
    "title": "| Core Framework Documentation Header",
    "keywords": "Header Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon Header(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; } Header(string text, string iconPath, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon and a textheight increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; } Header(string s, bool textOnly = true) Draws a Header in the Inspector that allows using custom text, or an icon with a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Tip To Draw a separator use an empty string \"\" Tip To Draw a header that is just an Icon pass false using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; } Header(string text, string iconPath, PresetColor presetColor, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, one of the preset colors and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. The Colors available are Black Blue Cyan Gray Green Grey Magenta Red Yellow using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; } Can Be Used In Connection with any other Attribute including Unity's Built-In Attributes Order does not mater. You can also have Multiple Headers. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"\", \"\", HeaderAttribute.PresetColor.Black)] [Header(\"Health Range\")] [Range(0, 500)] public float healthRange = 100; [Range(0, 100)] [Header(\"Health Range\")] public float healthRange1 = 100; }"
  },
  "Manual/Attributes/Decorators/InfoBoxAttribute.html": {
    "href": "Manual/Attributes/Decorators/InfoBoxAttribute.html",
    "title": "| Core Framework Documentation Info Box",
    "keywords": "Info Box Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. using CoreFramework.Attributes; using UnityEngine; public class AttributesExample : MonoBehaviour { [InfoBox(\"Info String To Display\")] public float someFloat; [InfoBox(\"Some Float with no icon in box\", InfoBoxType.None)] public float someOtherFloat; [InfoBox(\"Some Bool with a warning.\", InfoBoxType.Warning)] public bool someBool; [InfoBox(\"Some String with an error message.\", InfoBoxType.Error)] public string someString; }"
  },
  "Manual/Attributes/Properties/Drop Down Selection/InputAxis.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/InputAxis.html",
    "title": "| Core Framework Documentation Input Axis",
    "keywords": "Input Axis Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. using CoreFramework.Attributes; using UnityEngine; public class InputAxisExample : MonoBehaviour { [InputAxis] public string inputToUse; private void Update() { float axis = Input.GetAxis(inputToUse); bool buttonPressed = Input.GetButton(inputToUse); } }"
  },
  "Manual/Attributes/Properties/Drop Down Selection/Scene.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/Scene.html",
    "title": "| Core Framework Documentation Scene",
    "keywords": "Scene Displays a dropdown list of available scenes in the build settings. If no scenes are available, a warning box is shown indicating that no scenes are available. Important Must be used with a 'string' or 'integer' typed field. using CoreFramework.Attributes; using UnityEngine; public class SceneExample : MonoBehaviour { [Scene] public string sceneName; [Scene] public int sceneIndex; }"
  },
  "Manual/Attributes/Properties/Drop Down Selection/Tag.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/Tag.html",
    "title": "| Core Framework Documentation Tag",
    "keywords": "Tag Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. using CoreFramework.Attributes; using UnityEngine; public class TagExample : MonoBehaviour { [Tag] public string targetTag; }"
  },
  "Manual/Attributes/Properties/FolderPathAttribute.html": {
    "href": "Manual/Attributes/Properties/FolderPathAttribute.html",
    "title": "| Core Framework Documentation Folder Path",
    "keywords": "Folder Path Displays a text field with a folder button to the right, with which you can select a folder path as the string value. If you pass false to this attribute this will use the absolute path to the folder. If you pass true to this attribute this will use the path relative to the Project. using CoreFramework.Attributes; using UnityEngine; public class FolderPathExample : MonoBehaviour { [FolderPath(false)] public string absolutePath; [FolderPath(true)] public string relativePath; }"
  },
  "Manual/Attributes/Properties/Modifiers/Icon.html": {
    "href": "Manual/Attributes/Properties/Modifiers/Icon.html",
    "title": "| Core Framework Documentation Icon",
    "keywords": "Icon Displays an icon in the label.. using UnityEngine; using Icon = CoreFramework.Attributes.IconAttribute; public class IconExample : MonoBehaviour { [Icon(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health; }"
  },
  "Manual/Attributes/Properties/Modifiers/ReadOnly.html": {
    "href": "Manual/Attributes/Properties/Modifiers/ReadOnly.html",
    "title": "| Core Framework Documentation Read Only",
    "keywords": "Read Only Make a field appear as read only in the Inspector using CoreFramework.Attributes; using UnityEngine; public class ReadOnlyExample : MonoBehaviour { [ReadOnly] public int inspectorReadOnlyInt = 400; }"
  },
  "Manual/Attributes/Properties/RequiredReferenceAttribute.html": {
    "href": "Manual/Attributes/Properties/RequiredReferenceAttribute.html",
    "title": "| Core Framework Documentation Required Reference",
    "keywords": "Required Reference Requires the field to be not null. If it is Null, the field will be displayed in red with a warning icon to the right. Use this to notify the user that the field is required and they should fill it in. Important You should still do null checks in your code as this is only for visualization in the Inspector. using CoreFramework.Attributes; using UnityEngine; public class RequiredReferenceExample : MonoBehaviour { [RequiredReference] public GameObject requiredReference; }"
  },
  "Manual/Attributes/Properties/ShowIfBoolAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfBoolAttribute.html",
    "title": "| Core Framework Documentation Show If Bool",
    "keywords": "Show If Bool Show/Hide a field based on a bool value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. using CoreFramework.Attributes; using UnityEngine; public class ShowIfBoolExample : MonoBehaviour { public bool showHideValue; // Shows this value if showHideValue = true; [ShowIfBool(\"showHideValue\")] public int showIfTrueInt; // Shows this value if showHideValue = false; [ShowIfBool(\"showHideValue\", false)] public int showIfFalseInt; // Shows this value as a Range if showHideValue = true; [ShowIfBool(\"showHideValue\"), Range(5, 20)] public int showIfTrueRangeInt1; // Shows this value as a Range if showHideValue = true; // Since Range is first this value is always shown [Range(5, 20), ShowIfBool(\"showHideValue\")] public int showIfTrueRangeInt2; } Multiple Show If Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; }"
  },
  "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html",
    "title": "| Core Framework Documentation Show If Enum",
    "keywords": "Show If Enum Show/Hide a field based on a enum value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. using CoreFramework.Attributes; using UnityEngine; public class ShowIfEnumExample : MonoBehaviour { public enum SomeEnum { One, Two, Three } public SomeEnum someEnum = SomeEnum.One; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.One)] public int showIfSomeEnumOne; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.One, false)] public int showIfSomeEnumNotOne; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Two)] public int showIfSomeEnumTwo; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Two, false)] public int showIfSomeEnumNotTwo; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Three)] public int showIfSomeEnumThree; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Three, false)] public int showIfSomeEnumNotThree; } Multiple Show If Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; }"
  }
}