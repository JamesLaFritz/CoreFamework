{
  "api/CoreFramework.Animation.AnimationParameter.html": {
    "href": "api/CoreFramework.Animation.AnimationParameter.html",
    "title": "| Core Framework Documentation AnimationParameter",
    "keywords": "AnimationParameter Class in CoreFramework.Animation public abstract class AnimationParameter Inheritance System.Object AnimationParameter BoolAnimationParameter FloatAnimationParameter IntAnimationParameter TriggerAnimationParameter Description From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 Represents an abstract base class for animation parameters, designed to optimize performance by caching the hash value of the parameter's name. This approach ensures that there's no need to recompute the hash every time it's accessed, which can be a common operation in animation-heavy games. This implementation originates from Bit Cake Studio's BitStrap toolkit available on Unity's Asset Store. Features: Provides optimization by caching the index of the parameter name to avoid redundant hash computations. Encourages type-safety for animation parameters, helping to avoid common mistakes. Offers an enhanced Unity editor experience, allowing developers to select parameters using a dropdown menu based on the animator component of the current GameObject. Properties Index protected int Index { get; } Property Value System.Int32 Index Returns the cached index (hash value) of the animation parameter's name. If the index hasn't been cached before, it computes, caches, and returns the value. Description Returns the cached index (hash value) of the animation parameter's name. If the index hasn't been cached before, it computes, caches, and returns the value."
  },
  "api/CoreFramework.Animation.AnimatorFieldAttribute.html": {
    "href": "api/CoreFramework.Animation.AnimatorFieldAttribute.html",
    "title": "| Core Framework Documentation AnimatorFieldAttribute",
    "keywords": "AnimatorFieldAttribute Class in CoreFramework.Animation public abstract class AnimatorFieldAttribute : Attribute Inheritance System.Object AnimatorFieldAttribute Description Represents a custom attribute designed to allow users to link or associate specific fields within Unity scripts to an animation parameter, especially when the MonoBehaviour it is applied to does not have an adjacent Animator component. This attribute offers more flexibility in structuring and designing animations in Unity, as it bypasses the typical requirement for an Animator component on the same GameObject. With this attribute, developers can directly specify animation-related fields within their scripts, allowing for more intricate control and organization of animations. It's a part of Bit Cake Studio's BitStrap toolkit. https://assetstore.unity.com/publishers/4147 Constructors AnimatorFieldAttribute(String) protected AnimatorFieldAttribute(string animatorFieldName) Parameters System.String animatorFieldName The name of the animator field to be associated with the field this attribute is applied to. Description Initializes a new instance of the AnimatorFieldAttribute class. Fields AnimatorFieldName public readonly string AnimatorFieldName Field Value System.String AnimatorFieldName Description"
  },
  "api/CoreFramework.Animation.AnimatorParameterAttribute.html": {
    "href": "api/CoreFramework.Animation.AnimatorParameterAttribute.html",
    "title": "| Core Framework Documentation AnimatorParameterAttribute",
    "keywords": "AnimatorParameterAttribute Class in CoreFramework.Animation public class AnimatorParameterAttribute : Attribute Inheritance System.Object AnimatorParameterAttribute Description Represents a custom attribute used to associate a specific animation parameter with either a field or property within a Unity script, particularly when the MonoBehaviour does not have an adjacent Animator component. In Unity, animation parameters are crucial for controlling and influencing the behavior of animations within an Animator Controller. This attribute provides a way to directly link or specify an animation parameter for a script, bypassing the need for an accompanying Animator component on the same GameObject. Constructors AnimatorParameterAttribute(String) public AnimatorParameterAttribute(string parameterName) Parameters System.String parameterName The name of the animation parameter that should be associated with the field or property this attribute is applied to. Description Initializes a new instance of the AnimatorParameterAttribute class."
  },
  "api/CoreFramework.Animation.BoolAnimationParameter.html": {
    "href": "api/CoreFramework.Animation.BoolAnimationParameter.html",
    "title": "| Core Framework Documentation BoolAnimationParameter",
    "keywords": "BoolAnimationParameter Class in CoreFramework.Animation public class BoolAnimationParameter : AnimationParameter Inheritance System.Object AnimationParameter BoolAnimationParameter Description Represents a specialized type of animation parameter known as a \"Bool\". Within Unity's animation system, boolean parameters serve as binary switches to control the flow of animation logic. They can determine if an animation should play, if a transition between animations should occur, or any other binary decision within the animation state machine. The BoolAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class offers an additional method to set a boolean value on a given animator. Inherited Members AnimationParameter.Index Methods Set(Animator, Boolean) public void Set(Animator animator, bool value) Parameters Animator animator The animator on which to set the boolean value. This animator should have a boolean parameter corresponding to the name of this BoolAnimationParameter instance. System.Boolean value The boolean value to set for the animation parameter. Description Sets the boolean value of the parameter on the supplied animator. This value serves as a binary switch in the animator's logic, dictating if certain animations should play, transitions should occur, or other decisions are made based on its true/false value."
  },
  "api/CoreFramework.Animation.FloatAnimationParameter.html": {
    "href": "api/CoreFramework.Animation.FloatAnimationParameter.html",
    "title": "| Core Framework Documentation FloatAnimationParameter",
    "keywords": "FloatAnimationParameter Class in CoreFramework.Animation public class FloatAnimationParameter : AnimationParameter Inheritance System.Object AnimationParameter FloatAnimationParameter Description Represents a specialized type of animation parameter known as a \"Float\". In Unity's animation system, float parameters are used to provide fractional or decimal values to animations. These can be employed to smoothly transition between animation states, modulate animation speeds, or represent other continuous variables within the animation logic. The FloatAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class offers an additional method to set a float value on a given animator. Inherited Members AnimationParameter.Index Methods Set(Animator, Single) public void Set(Animator animator, float value) Parameters Animator animator The animator on which to set the float value. This animator should possess a float parameter corresponding to the name of this FloatAnimationParameter instance. System.Single value The float value to set for the animation parameter. Description Sets the float value of the parameter on the supplied animator. This can be utilized to modulate animation speeds, influence transitions, or embed other continuous variables within the animation logic."
  },
  "api/CoreFramework.Animation.html": {
    "href": "api/CoreFramework.Animation.html",
    "title": "| Core Framework Documentation CoreFramework.Animation",
    "keywords": "Namespace CoreFramework.Animation Classes AnimationParameter From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 Represents an abstract base class for animation parameters, designed to optimize performance by caching the hash value of the parameter's name. This approach ensures that there's no need to recompute the hash every time it's accessed, which can be a common operation in animation-heavy games. This implementation originates from Bit Cake Studio's BitStrap toolkit available on Unity's Asset Store. Features: Provides optimization by caching the index of the parameter name to avoid redundant hash computations. Encourages type-safety for animation parameters, helping to avoid common mistakes. Offers an enhanced Unity editor experience, allowing developers to select parameters using a dropdown menu based on the animator component of the current GameObject. AnimatorFieldAttribute Represents a custom attribute designed to allow users to link or associate specific fields within Unity scripts to an animation parameter, especially when the MonoBehaviour it is applied to does not have an adjacent Animator component. This attribute offers more flexibility in structuring and designing animations in Unity, as it bypasses the typical requirement for an Animator component on the same GameObject. With this attribute, developers can directly specify animation-related fields within their scripts, allowing for more intricate control and organization of animations. It's a part of Bit Cake Studio's BitStrap toolkit. https://assetstore.unity.com/publishers/4147 AnimatorParameterAttribute Represents a custom attribute used to associate a specific animation parameter with either a field or property within a Unity script, particularly when the MonoBehaviour does not have an adjacent Animator component. In Unity, animation parameters are crucial for controlling and influencing the behavior of animations within an Animator Controller. This attribute provides a way to directly link or specify an animation parameter for a script, bypassing the need for an accompanying Animator component on the same GameObject. BoolAnimationParameter Represents a specialized type of animation parameter known as a \"Bool\". Within Unity's animation system, boolean parameters serve as binary switches to control the flow of animation logic. They can determine if an animation should play, if a transition between animations should occur, or any other binary decision within the animation state machine. The BoolAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class offers an additional method to set a boolean value on a given animator. FloatAnimationParameter Represents a specialized type of animation parameter known as a \"Float\". In Unity's animation system, float parameters are used to provide fractional or decimal values to animations. These can be employed to smoothly transition between animation states, modulate animation speeds, or represent other continuous variables within the animation logic. The FloatAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class offers an additional method to set a float value on a given animator. IntAnimationParameter Represents a specialized type of animation parameter known as an \"Integer\". In Unity's animation system, integer parameters are used to provide whole number values to animations and can be utilized to select different animation variants or to modify the behavior of a running animation. The IntAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class provides an additional method to set an integer value on a provided animator. TriggerAnimationParameter Represents a specialized type of animation parameter known as a \"Trigger\". In Unity's animation system, triggers are special parameters that can be set to activate or deactivate specific animations or transitions. The TriggerAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class provides an additional method to activate a trigger on a provided animator."
  },
  "api/CoreFramework.Animation.IntAnimationParameter.html": {
    "href": "api/CoreFramework.Animation.IntAnimationParameter.html",
    "title": "| Core Framework Documentation IntAnimationParameter",
    "keywords": "IntAnimationParameter Class in CoreFramework.Animation public class IntAnimationParameter : AnimationParameter Inheritance System.Object AnimationParameter IntAnimationParameter Description Represents a specialized type of animation parameter known as an \"Integer\". In Unity's animation system, integer parameters are used to provide whole number values to animations and can be utilized to select different animation variants or to modify the behavior of a running animation. The IntAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class provides an additional method to set an integer value on a provided animator. Inherited Members AnimationParameter.Index Methods Set(Animator, Int32) public void Set(Animator animator, int value) Parameters Animator animator The animator on which to set the integer value. This animator should have an integer parameter matching the name of this IntAnimationParameter instance. System.Int32 value The integer value to set for the animation parameter. Description Sets the integer value of the parameter on the provided animator. This can be used to change the behavior of animations or select a specific animation variant based on the integer value."
  },
  "api/CoreFramework.Animation.TriggerAnimationParameter.html": {
    "href": "api/CoreFramework.Animation.TriggerAnimationParameter.html",
    "title": "| Core Framework Documentation TriggerAnimationParameter",
    "keywords": "TriggerAnimationParameter Class in CoreFramework.Animation public class TriggerAnimationParameter : AnimationParameter Inheritance System.Object AnimationParameter TriggerAnimationParameter Description Represents a specialized type of animation parameter known as a \"Trigger\". In Unity's animation system, triggers are special parameters that can be set to activate or deactivate specific animations or transitions. The TriggerAnimationParameter class extends the AnimationParameter class, inheriting its capabilities for caching parameter hash values for optimized access. This specialized class provides an additional method to activate a trigger on a provided animator. Inherited Members AnimationParameter.Index Methods Set(Animator) public void Set(Animator animator) Parameters Animator animator The animator on which to activate the trigger. This animator should have a trigger parameter matching the name of this TriggerAnimationParameter instance. Description Activates the trigger on the provided animator. Using this method, an animation or transition associated with this trigger can be played."
  },
  "api/CoreFramework.Attributes.ButtonAttribute.ButtonMode.html": {
    "href": "api/CoreFramework.Attributes.ButtonAttribute.ButtonMode.html",
    "title": "| Core Framework Documentation ButtonAttribute.ButtonMode",
    "keywords": "ButtonAttribute.ButtonMode Enum in CoreFramework.Attributes public enum ButtonMode Description Determine which Unity Editor mode a button should work in. Both The button will work in both Editor and Play Mode Editor The button will only work in Editor mode (Unity Editor is not in Play Mode). Play The button will only work when Unity is in Play mode."
  },
  "api/CoreFramework.Attributes.ButtonAttribute.html": {
    "href": "api/CoreFramework.Attributes.ButtonAttribute.html",
    "title": "| Core Framework Documentation ButtonAttribute",
    "keywords": "ButtonAttribute Class in CoreFramework.Attributes public class ButtonAttribute : Attribute Inheritance System.Object ButtonAttribute Description Add this attribute above one of your MonoBehaviour method and it will draw a button in the inspector that will run the method when clicked. Remarks Warning The method must not have any parameters and can not be static. Tip Use ButtonAttribute.Mode.Play if you want the Button to only work in Play mode. Tip Use ButtonAttribute.Mode.Editor if you want the Button to only work in Edit mode. Examples [Button(ButtonAttribute.Mode.Play)] public void PlayModeButton() { Debug.Log($\"{name}: Play Mode Only\"); } [Button(ButtonAttribute.Mode.Editor)] public void EditModeButton() { Debug.Log($\"{name}: Edit Mode Only\"); } [Button] public void PlayAndEditModeButton() { Debug.Log($\"{name}: Play Mode and Edit Mode\"); } Constructors ButtonAttribute(ButtonAttribute.ButtonMode) public ButtonAttribute(ButtonAttribute.ButtonMode mode = ButtonAttribute.ButtonMode.Both) Parameters ButtonAttribute.ButtonMode mode The Unity Editor ButtonAttribute.ButtonMode that the button should be clickable. Description Initializes a new instance of the ButtonAttribute Fields Mode public readonly ButtonAttribute.ButtonMode Mode Field Value ButtonAttribute.ButtonMode Mode Which mode the button is clickable in the Inspector (Play Mode, Editor Mode, or Both). Description Which mode the button is clickable in the Inspector (Play Mode, Editor Mode, or Both)."
  },
  "api/CoreFramework.Attributes.ExposedReferenceAttribute.html": {
    "href": "api/CoreFramework.Attributes.ExposedReferenceAttribute.html",
    "title": "| Core Framework Documentation ExposedReferenceAttribute",
    "keywords": "ExposedReferenceAttribute Class in CoreFramework.Attributes public class ExposedReferenceAttribute : PropertyAttribute Inheritance System.Object ExposedReferenceAttribute Description Use this attribute to make a reference Property Field type appear as a foldout property i.e. ScriptableObjects in the Inspector ."
  },
  "api/CoreFramework.Attributes.FolderPathAttribute.html": {
    "href": "api/CoreFramework.Attributes.FolderPathAttribute.html",
    "title": "| Core Framework Documentation FolderPathAttribute",
    "keywords": "FolderPathAttribute Class in CoreFramework.Attributes public class FolderPathAttribute : PropertyAttribute Inheritance System.Object FolderPathAttribute Description Displays a text field with a folder button to the right, with which you can select a folder path as the string value. If you pass false to this attribute this will use the absolute path to the folder. If you pass true to this attribute this will use the path relative to the Project. To make it so the field can not be change outside the Class make it a private field and add the SerializeField tag. [readOnly, SerializeField] public int healthPoints; [readOnly] [SerializeField] public int healthPoints; Examples [FolderPath(false)] public string absolutePath; [FolderPath(true)] public string relativePath; Constructors FolderPathAttribute() public FolderPathAttribute() Description Set path string relative to the project with a folder selection button FolderPathAttribute(Boolean) public FolderPathAttribute(bool pathRelativeToProject) Parameters System.Boolean pathRelativeToProject Path is absolute (false) or relative to the project (true) Description Set path string with a folder selection button Fields PathRelativeToProject public readonly bool PathRelativeToProject Field Value System.Boolean PathRelativeToProject Description"
  },
  "api/CoreFramework.Attributes.HeaderAttribute.html": {
    "href": "api/CoreFramework.Attributes.HeaderAttribute.html",
    "title": "| Core Framework Documentation HeaderAttribute",
    "keywords": "HeaderAttribute Class in CoreFramework.Attributes public class HeaderAttribute : PropertyAttribute Inheritance System.Object HeaderAttribute Description Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon Can Be Used In Connection with any other Attribute including Unity's Built-In Attributes Order does not mater. You can also have Multiple Headers. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"\", \"\", HeaderAttribute.PresetColor.Black)] [Header(\"Health Range\")] [Range(0, 500)] public float healthRange = 100; [Range(0, 100)] [Header(\"Health Range\")] public float healthRange1 = 100; } Examples Header(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5f) [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; Header(string text, string iconPath, float textHeightIncrease = 1.5f) [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; Header(string text, string iconPath, PresetColor presetColor, float textHeightIncrease = 1.5f) [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; Header(string s, bool textOnly = true) [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; Constructors HeaderAttribute(String, Boolean) public HeaderAttribute(string s, bool textOnly = true) Parameters System.String s If Text Only(textOnly == true), the text to use for the label of the header. If Icon Only(textOnly == false), the relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Boolean textOnly Is this a text only (true) or icon only Header (false) defaults to true. Description Draws a Header in the Inspector that allows using custom text, or an icon with a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Examples [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; HeaderAttribute(String, String, HeaderAttribute.PresetColor, Single) public HeaderAttribute(string text, string iconPath, HeaderAttribute.PresetColor presetColor, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. HeaderAttribute.PresetColor presetColor Uses on of the HeaderAttribute.PresetColor System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon, one of the preset colors and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. The Colors available are Black Blue Cyan Gray Green Grey Magenta Red Yellow Examples [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; HeaderAttribute(String, String, IReadOnlyList<Single>, Single) public HeaderAttribute(string text, string iconPath, IReadOnlyList<float> colorElement, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Collections.Generic.IReadOnlyList < System.Single > colorElement The color to use for the label. Can be null. If null uses Grey for the separator and White for the Text Needs at least three elements. new[] {r, g, b}) || new[] {r, g, b, a}) System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Defaults to a height increase of 1.5. Null Color will use Grey for the separator and white for the Text. HeaderAttribute(String, String, Single) public HeaderAttribute(string text, string iconPath, float textHeightIncrease = 1.5F) Parameters System.String text The label text to use for the header. System.String iconPath The relative path (starting from 'Assets/') to the icon you want to display in front of the property. System.Single textHeightIncrease The amount to increase the height of the text by (Min value of 1). Description Draws a Header in the Inspector that allows using custom text, an icon and a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Examples [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; Fields Color public readonly Color? Color Field Value System.Nullable < Color > Color The color Description The color ColorIsNull public readonly bool ColorIsNull Field Value System.Boolean ColorIsNull The color is null Description The color is null Header public readonly string Header Field Value System.String Header The header Description The header HeaderIsNull public readonly bool HeaderIsNull Field Value System.Boolean HeaderIsNull The header is null Description The header is null IconPath public readonly string IconPath Field Value System.String IconPath The path to the icon. Relative to the Assets folder. Description The path to the icon. Relative to the Assets folder. IconPathIsNull public readonly bool IconPathIsNull Field Value System.Boolean IconPathIsNull The icon path is null Description The icon path is null TextHeightIncrease public readonly float TextHeightIncrease Field Value System.Single TextHeightIncrease The text height increase Description The text height increase"
  },
  "api/CoreFramework.Attributes.HeaderAttribute.PresetColor.html": {
    "href": "api/CoreFramework.Attributes.HeaderAttribute.PresetColor.html",
    "title": "| Core Framework Documentation HeaderAttribute.PresetColor",
    "keywords": "HeaderAttribute.PresetColor Enum in CoreFramework.Attributes public enum PresetColor Description Available Colors by name that can be used. Black The black preset color Blue The blue preset color Cyan The cyan preset color Gray The gray preset color Green The green preset color Grey The grey preset color Magenta The magenta preset color Red The red preset color Yellow The yellow preset color"
  },
  "api/CoreFramework.Attributes.html": {
    "href": "api/CoreFramework.Attributes.html",
    "title": "| Core Framework Documentation CoreFramework.Attributes",
    "keywords": "Namespace CoreFramework.Attributes Attributes that can be used to make the Inspector look better with out creating custom inspector editors Classes ButtonAttribute Add this attribute above one of your MonoBehaviour method and it will draw a button in the inspector that will run the method when clicked. ExposedReferenceAttribute Use this attribute to make a reference Property Field type appear as a foldout property i.e. ScriptableObjects in the Inspector . FolderPathAttribute Displays a text field with a folder button to the right, with which you can select a folder path as the string value. If you pass false to this attribute this will use the absolute path to the folder. If you pass true to this attribute this will use the path relative to the Project. HeaderAttribute Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon IconAttribute Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. InfoBoxAttribute Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. InputAxisAttribute Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. ReadOnlyAttribute Use this attribute to make a field appear as read only in the Inspector RequiredReferenceAttribute Requires the field to be not null. If it is Null, the field will be displayed in red with a warning icon to the right. Use this to notify the user that the field is required and they should fill it in. Important You should still do null checks in your code as this is only for visualization in the Inspector. SceneAttribute Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. ShowIfBoolAttribute Show/Hide a field based on a bool value in the same script. ShowIfEnumValueAttribute Show/Hide a field based on a enum value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. TagAttribute Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Enums ButtonAttribute.ButtonMode Determine which Unity Editor mode a button should work in. HeaderAttribute.PresetColor Available Colors by name that can be used. InfoBoxType The info box type enum"
  },
  "api/CoreFramework.Attributes.IconAttribute.html": {
    "href": "api/CoreFramework.Attributes.IconAttribute.html",
    "title": "| Core Framework Documentation IconAttribute",
    "keywords": "IconAttribute Class in CoreFramework.Attributes public class IconAttribute : Attribute Inheritance System.Object IconAttribute Description Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Examples [Icon(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\")]; Constructors IconAttribute(String) public IconAttribute(string path) Parameters System.String path A project-relative path to a texture. Description Create an IconAttribute with a path to an icon. Properties Path public string Path { get; } Property Value System.String Path A project-relative path to a texture. Description A project-relative path to a texture. Remarks Important Is used by the editor to draw header in the Inspector ."
  },
  "api/CoreFramework.Attributes.InfoBoxAttribute.html": {
    "href": "api/CoreFramework.Attributes.InfoBoxAttribute.html",
    "title": "| Core Framework Documentation InfoBoxAttribute",
    "keywords": "InfoBoxAttribute Class in CoreFramework.Attributes public class InfoBoxAttribute : PropertyAttribute Inheritance System.Object InfoBoxAttribute Description Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. Examples Draws an Information Type Box [InfoBox(\"Info String To Display\")] public float someFloat; Draws a Warning Information Box. [InfoBox(\"Some Bool with a warning.\", InfoBoxType.Warning)] public bool someBool; Draws an Error Info Box [InfoBox(\"Some String with an error message.\", InfoBoxType.Error)] public string someString; Draws a Info Box with no Icon. [InfoBox(\"Some Float with no icon in box\", InfoBoxType.None)] public float someOtherFloat; Constructors InfoBoxAttribute(String, InfoBoxType) public InfoBoxAttribute(string text, InfoBoxType type = InfoBoxType.Info) Parameters System.String text The message to display in the text box. InfoBoxType type The type of message to display, defaults to Info. Description Draws an Info Box in the Inspector. Fields InfoBoxType public readonly InfoBoxType InfoBoxType Field Value InfoBoxType InfoBoxType The info box type. Description The info box type. Text public readonly string Text Field Value System.String Text The text to display in the info box. Description The text to display in the info box."
  },
  "api/CoreFramework.Attributes.InfoBoxType.html": {
    "href": "api/CoreFramework.Attributes.InfoBoxType.html",
    "title": "| Core Framework Documentation InfoBoxType",
    "keywords": "InfoBoxType Enum in CoreFramework.Attributes public enum InfoBoxType Description The info box type enum Error The error info box type Info The info info box type None The none info box type Warning The warning info box type"
  },
  "api/CoreFramework.Attributes.InputAxisAttribute.html": {
    "href": "api/CoreFramework.Attributes.InputAxisAttribute.html",
    "title": "| Core Framework Documentation InputAxisAttribute",
    "keywords": "InputAxisAttribute Class in CoreFramework.Attributes public class InputAxisAttribute : PropertyAttribute Inheritance System.Object InputAxisAttribute Description Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. Remarks For Use only with the legacy Input System. Examples [InputAxis] public string inputToUse;"
  },
  "api/CoreFramework.Attributes.ReadOnlyAttribute.html": {
    "href": "api/CoreFramework.Attributes.ReadOnlyAttribute.html",
    "title": "| Core Framework Documentation ReadOnlyAttribute",
    "keywords": "ReadOnlyAttribute Class in CoreFramework.Attributes public class ReadOnlyAttribute : PropertyAttribute Inheritance System.Object ReadOnlyAttribute Description Use this attribute to make a field appear as read only in the Inspector To make it so the field can not be change outside the Class make it a private field and add the SerializeField tag. [readOnly, SerializeField] public int healthPoints; [readOnly] [SerializeField] public int healthPoints; Examples [readOnly] public int healthPoints;"
  },
  "api/CoreFramework.Attributes.RequiredReferenceAttribute.html": {
    "href": "api/CoreFramework.Attributes.RequiredReferenceAttribute.html",
    "title": "| Core Framework Documentation RequiredReferenceAttribute",
    "keywords": "RequiredReferenceAttribute Class in CoreFramework.Attributes public class RequiredReferenceAttribute : PropertyAttribute Inheritance System.Object RequiredReferenceAttribute Description Requires the field to be not null. If it is Null, the field will be displayed in red with a warning icon to the right. Use this to notify the user that the field is required and they should fill it in. Important You should still do null checks in your code as this is only for visualization in the Inspector. Examples [RequiredReference] public GameObject requiredReference;"
  },
  "api/CoreFramework.Attributes.SceneAttribute.html": {
    "href": "api/CoreFramework.Attributes.SceneAttribute.html",
    "title": "| Core Framework Documentation SceneAttribute",
    "keywords": "SceneAttribute Class in CoreFramework.Attributes public class SceneAttribute : PropertyAttribute Inheritance System.Object SceneAttribute Description Important Only Usable if Unity's Legacy Input Manager is Enabled. Displays a dropdown list of available Input Axis. Important Must be used with a 'string' typed field. Examples [Scene] public string sceneName; [Scene] public int sceneIndex;"
  },
  "api/CoreFramework.Attributes.ShowIfBoolAttribute.html": {
    "href": "api/CoreFramework.Attributes.ShowIfBoolAttribute.html",
    "title": "| Core Framework Documentation ShowIfBoolAttribute",
    "keywords": "ShowIfBoolAttribute Class in CoreFramework.Attributes public class ShowIfBoolAttribute : PropertyAttribute Inheritance System.Object ShowIfBoolAttribute Description Show/Hide a field based on a bool value in the same script. Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Examples public bool showHideValue; // Shows this value if showHideValue = true; [ShowIfBool(\"showHideValue\")] public int showIfTrueInt; // Shows this value if showHideValue = false; [ShowIfBool(\"showHideValue\", false)] public int showIfFalseInt; Constructors ShowIfBoolAttribute(String, Boolean) public ShowIfBoolAttribute(string boolName, bool show = true) Parameters System.String boolName The name of the serialized bool property to use. System.Boolean show The value of the bool to show this property. Defaults to true Description Show/Hide a field based on a bool value in the same script. Fields BoolName public readonly string BoolName Field Value System.String BoolName The name of the serialized bool property to use. Description The name of the serialized bool property to use. Show public readonly bool Show Field Value System.Boolean Show The value of the bool property to show this property. show=true, the property will be shown when boolName is true and hidden when boolName is false. show=false, the property will be shown when boolName is false and hidden when boolName is true. Description The value of the bool property to show this property. show=true, the property will be shown when boolName is true and hidden when boolName is false. show=false, the property will be shown when boolName is false and hidden when boolName is true."
  },
  "api/CoreFramework.Attributes.ShowIfEnumValueAttribute.html": {
    "href": "api/CoreFramework.Attributes.ShowIfEnumValueAttribute.html",
    "title": "| Core Framework Documentation ShowIfEnumValueAttribute",
    "keywords": "ShowIfEnumValueAttribute Class in CoreFramework.Attributes public class ShowIfEnumValueAttribute : PropertyAttribute Inheritance System.Object ShowIfEnumValueAttribute Description Show/Hide a field based on a enum value in the same script. Caution Order of attribute is important. Should be placed before any other attributes. Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Examples public enum SomeEnum { one, two, three } public SomeEnum someEnum = SomeEnum.one; [ShowIfEnumValue(\"someEnum\", (int) SomeEnum.one)] public int showIfSomeEnumOne; [ShowIfEnumValue(\"someEnum\", (int) SomeEnum.one, false)] public int showIfSomeEnumNotOne; Constructors ShowIfEnumValueAttribute(String, Int32, Boolean) public ShowIfEnumValueAttribute(string enumName, int enumIndex, bool show = true) Parameters System.String enumName The name of the serialized enum property to use. System.Int32 enumIndex The index of the enum that controls the showing of this property. System.Boolean show Show if the enum value matches or not. Defaults to true Description Show/Hide a field based on a bool value in the same script. Fields EnumIndex public readonly int EnumIndex Field Value System.Int32 EnumIndex The index of the enum that controls the showing of this property. Description The index of the enum that controls the showing of this property. EnumName public readonly string EnumName Field Value System.String EnumName The name of the serialized enum property to use. Description The name of the serialized enum property to use. Show public readonly bool Show Field Value System.Boolean Show Show if the enum value matches or not. Description Show if the enum value matches or not."
  },
  "api/CoreFramework.Attributes.TagAttribute.html": {
    "href": "api/CoreFramework.Attributes.TagAttribute.html",
    "title": "| Core Framework Documentation TagAttribute",
    "keywords": "TagAttribute Class in CoreFramework.Attributes public class TagAttribute : PropertyAttribute Inheritance System.Object TagAttribute Description Displays a dropdown list of available Tags. Important Must be used with a 'string' typed field. Examples [Tag] public string targetTag;"
  },
  "api/CoreFramework.Bootstrapper.html": {
    "href": "api/CoreFramework.Bootstrapper.html",
    "title": "| Core Framework Documentation Bootstrapper",
    "keywords": "Bootstrapper Class in CoreFramework public class Bootstrapper : MonoBehaviour Inheritance System.Object Bootstrapper Description Handles the initial bootstrapping of the application, ensuring that essential settings are applied and that the initial scene is loaded."
  },
  "api/CoreFramework.CoreFrameworkMenu.html": {
    "href": "api/CoreFramework.CoreFrameworkMenu.html",
    "title": "| Core Framework Documentation CoreFrameworkMenu",
    "keywords": "CoreFrameworkMenu Class in CoreFramework public static class CoreFrameworkMenu Inheritance System.Object CoreFrameworkMenu Description Provides menu path constants to be used with Unity's Editor menu functionalities, ensuring consistent naming across the Core Framework's custom editor options. Fields MainMenu public const string MainMenu = \"Core Framework/\" Field Value System.String MainMenu The main menu path for all Core Framework-related items in the Unity Editor. Description The main menu path for all Core Framework-related items in the Unity Editor. Examples [MenuItem(CoreFrameworkMenu.MainMenu + \"Custom Option\")] public static void MyCustomMenuOption() { // Implementation for the menu option... }"
  },
  "api/CoreFramework.DebugMonoBehaviour.html": {
    "href": "api/CoreFramework.DebugMonoBehaviour.html",
    "title": "| Core Framework Documentation DebugMonoBehaviour",
    "keywords": "DebugMonoBehaviour Class in CoreFramework public class DebugMonoBehaviour : MonoBehaviour Inheritance System.Object DebugMonoBehaviour Interactable Description A MonoBehaviour derivative that provides additional debug logging capabilities. These methods offer a more controlled approach to logging, allowing for toggling of debug information via settings and filtering log calls based on the game object and method from which they were invoked. Methods Error(String, String) protected void Error(string msg, string callingMethod = \"\") Parameters System.String msg The message to log. System.String callingMethod The name of the method calling the log, used for additional context. Description Logs an error message, regardless of whether debug logging is enabled. Info(String, String) protected void Info(string msg, string callingMethod = \"\") Parameters System.String msg The message to log. System.String callingMethod The name of the method calling the log, used for additional context. Description Logs an informational message if debug logging is enabled. Warning(String, String) protected void Warning(string msg, string callingMethod = \"\") Parameters System.String msg The message to log. System.String callingMethod The name of the method calling the log, used for additional context. Description Logs a warning message if debug logging is enabled."
  },
  "api/CoreFramework.DebugScriptableObject.html": {
    "href": "api/CoreFramework.DebugScriptableObject.html",
    "title": "| Core Framework Documentation DebugScriptableObject",
    "keywords": "DebugScriptableObject Class in CoreFramework public abstract class DebugScriptableObject : ScriptableObject Inheritance System.Object DebugScriptableObject Description An abstract class that extends UnityEngine.ScriptableObject providing debugging functionality. This class is intended to be a base class for ScriptableObjects that require internal logging capabilities. Methods Error(String, String) protected void Error(string msg, string callingMethod = \"\") Parameters System.String msg The error message to log. System.String callingMethod The name of the method calling the log function (optional). Description Logs an error message to the Unity console. Info(String, String) protected void Info(string msg, string callingMethod = \"\") Parameters System.String msg The informational message to log. System.String callingMethod The name of the method calling the log function (optional). Description Logs an informational message to the Unity console if debugging is enabled. Warning(String, String) protected void Warning(string msg, string callingMethod = \"\") Parameters System.String msg The warning message to log. System.String callingMethod The name of the method calling the log function (optional). Description Logs a warning message to the Unity console if debugging is enabled."
  },
  "api/CoreFramework.Destroy.DestroyAfterTime.html": {
    "href": "api/CoreFramework.Destroy.DestroyAfterTime.html",
    "title": "| Core Framework Documentation DestroyAfterTime",
    "keywords": "DestroyAfterTime Class in CoreFramework.Destroy public class DestroyAfterTime : MonoBehaviour Inheritance System.Object DestroyAfterTime Description Provides functionality to automatically destroy a GameObject in a Unity scene after a predefined duration. This script should be attached to the GameObject you want to destroy after a certain amount of time."
  },
  "api/CoreFramework.Destroy.DestroyNoChildren.html": {
    "href": "api/CoreFramework.Destroy.DestroyNoChildren.html",
    "title": "| Core Framework Documentation DestroyNoChildren",
    "keywords": "DestroyNoChildren Class in CoreFramework.Destroy public class DestroyNoChildren : MonoBehaviour Inheritance System.Object DestroyNoChildren Description Provides functionality to automatically destroy a GameObject in a Unity scene when it has no child objects. This script should be attached to the GameObject you want to monitor for child objects."
  },
  "api/CoreFramework.Destroy.html": {
    "href": "api/CoreFramework.Destroy.html",
    "title": "| Core Framework Documentation CoreFramework.Destroy",
    "keywords": "Namespace CoreFramework.Destroy Classes DestroyAfterTime Provides functionality to automatically destroy a GameObject in a Unity scene after a predefined duration. This script should be attached to the GameObject you want to destroy after a certain amount of time. DestroyNoChildren Provides functionality to automatically destroy a GameObject in a Unity scene when it has no child objects. This script should be attached to the GameObject you want to monitor for child objects."
  },
  "api/CoreFramework.Extensions.ArrayExtensions.html": {
    "href": "api/CoreFramework.Extensions.ArrayExtensions.html",
    "title": "| Core Framework Documentation ArrayExtensions",
    "keywords": "ArrayExtensions Class in CoreFramework.Extensions public static class ArrayExtensions Inheritance System.Object ArrayExtensions Description Bunch of utility extension methods to the Array class. Also, it contains some System.Linq like methods that does not generate garbage. From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 Methods First<T>(T[]) public static Option<T> First<T>(this T[] collection) Type Parameters T Parameters T[] collection Returns Option <T> Description Behaves like System.Linq.FirstOrDefault however it does not generate garbage."
  },
  "api/CoreFramework.Extensions.GameObjectExtensions.html": {
    "href": "api/CoreFramework.Extensions.GameObjectExtensions.html",
    "title": "| Core Framework Documentation GameObjectExtensions",
    "keywords": "GameObjectExtensions Class in CoreFramework.Extensions public static class GameObjectExtensions Inheritance System.Object GameObjectExtensions Description Provides extension methods for the UnityEngine.GameObject class. Methods GetOrAdd<T>(GameObject) public static T GetOrAdd<T>(this GameObject gameObject) where T : Component Type Parameters T The type of component to retrieve or add. Parameters GameObject gameObject The game object this method extends. Returns T The existing component of type T if found; otherwise, a new component of type T. Description Retrieves a component of the specified type if it exists on the game object. If it doesn't exist, a new component of the specified type is added and returned."
  },
  "api/CoreFramework.Extensions.html": {
    "href": "api/CoreFramework.Extensions.html",
    "title": "| Core Framework Documentation CoreFramework.Extensions",
    "keywords": "Namespace CoreFramework.Extensions Classes ArrayExtensions Bunch of utility extension methods to the Array class. Also, it contains some System.Linq like methods that does not generate garbage. From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 GameObjectExtensions Provides extension methods for the UnityEngine.GameObject class. QuaternionExtensions Extension methods for Quaternion . TextExtensions Code From Indie Wafflus Found at https://pastebin.com/qSVNV0k7 Vector2Extensions Provides extension methods for the UnityEngine.Vector2 struct. Vector3Extensions Provides extension methods for the UnityEngine.Vector3 struct. Vector4Extensions Extension methods for UnityEngine.Vector4 ."
  },
  "api/CoreFramework.Extensions.QuaternionExtensions.html": {
    "href": "api/CoreFramework.Extensions.QuaternionExtensions.html",
    "title": "| Core Framework Documentation QuaternionExtensions",
    "keywords": "QuaternionExtensions Class in CoreFramework.Extensions public static class QuaternionExtensions Inheritance System.Object QuaternionExtensions Description Extension methods for Quaternion . Methods ToVector4(Quaternion) public static Vector4 ToVector4(this Quaternion quaternion) Parameters Quaternion quaternion Returns Vector4 Description Returns a Vector4 instance where the component values are equal to this Quaternion 's components."
  },
  "api/CoreFramework.Extensions.TextExtensions.html": {
    "href": "api/CoreFramework.Extensions.TextExtensions.html",
    "title": "| Core Framework Documentation TextExtensions",
    "keywords": "TextExtensions Class in CoreFramework.Extensions public static class TextExtensions Inheritance System.Object TextExtensions Description Code From Indie Wafflus Found at https://pastebin.com/qSVNV0k7 Methods IsWhitespace(Char) public static bool IsWhitespace(this char character) Parameters System.Char character Returns System.Boolean Description Is the character a White Space. Based on StackOverflow Thread Efficient way to remove ALL whitespace from String: https://stackoverflow.com/a/37347881 and StackOverflow Thread How do I remove all non alphanumeric characters from a string except dash: https://stackoverflow.com/questions/3210393/how-do-i-remove-all-non-alphanumeric-characters-from-a-string-except-dash RemoveSpecialCharacters(String) public static string RemoveSpecialCharacters(this string text) Parameters System.String text Returns System.String Description Removes all non alphanumeric characters from a string. RemoveWhitespaces(String) public static string RemoveWhitespaces(this string text) Parameters System.String text Returns System.String Description Removes all white space from a string."
  },
  "api/CoreFramework.Extensions.Vector2Extensions.html": {
    "href": "api/CoreFramework.Extensions.Vector2Extensions.html",
    "title": "| Core Framework Documentation Vector2Extensions",
    "keywords": "Vector2Extensions Class in CoreFramework.Extensions public static class Vector2Extensions Inheritance System.Object Vector2Extensions Description Provides extension methods for the UnityEngine.Vector2 struct. Methods Add(Vector2, Nullable<Single>, Nullable<Single>) public static Vector2 Add(this Vector2 vector, float? x = null, float? y = null) Parameters Vector2 vector The original Vector2 this method extends. System.Nullable < System.Single > x The value to add to the x component, or null to leave the x value unchanged. System.Nullable < System.Single > y The value to add to the y component, or null to leave the y value unchanged. Returns Vector2 A new Vector2 with the x and/or y values incremented by the specified values. Description Creates a new Vector2 by adding the specified x and/or y values to the original Vector2. With(Vector2, Nullable<Single>, Nullable<Single>) public static Vector2 With(this Vector2 vector, float? x = null, float? y = null) Parameters Vector2 vector The original Vector2 this method extends. System.Nullable < System.Single > x The new x value, or null to keep the original x value. System.Nullable < System.Single > y The new y value, or null to keep the original y value. Returns Vector2 A new Vector2 with the x and/or y values optionally replaced by the specified values. Description Creates a new Vector2 with optionally overridden x and/or y values."
  },
  "api/CoreFramework.Extensions.Vector3Extensions.html": {
    "href": "api/CoreFramework.Extensions.Vector3Extensions.html",
    "title": "| Core Framework Documentation Vector3Extensions",
    "keywords": "Vector3Extensions Class in CoreFramework.Extensions public static class Vector3Extensions Inheritance System.Object Vector3Extensions Description Provides extension methods for the UnityEngine.Vector3 struct. Methods Add(Vector3, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static Vector3 Add(this Vector3 vector, float? x = null, float? y = null, float? z = null) Parameters Vector3 vector The original Vector3 this method extends. System.Nullable < System.Single > x The value to add to the x component, or null to leave the x value unchanged. System.Nullable < System.Single > y The value to add to the y component, or null to leave the y value unchanged. System.Nullable < System.Single > z The value to add to the z component, or null to leave the z value unchanged. Returns Vector3 A new Vector3 with the x, y, and/or z values incremented by the specified values. Description Creates a new Vector3 by adding the specified x, y, and/or z values to the original Vector3. With(Vector3, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static Vector3 With(this Vector3 vector, float? x = null, float? y = null, float? z = null) Parameters Vector3 vector The original Vector3 this method extends. System.Nullable < System.Single > x The new x value, or null to keep the original x value. System.Nullable < System.Single > y The new y value, or null to keep the original y value. System.Nullable < System.Single > z The new z value, or null to keep the original z value. Returns Vector3 A new Vector3 with the x, y, and/or z values optionally replaced by the specified values. Description Creates a new Vector3 with optionally overridden x, y, and/or z values."
  },
  "api/CoreFramework.Extensions.Vector4Extensions.html": {
    "href": "api/CoreFramework.Extensions.Vector4Extensions.html",
    "title": "| Core Framework Documentation Vector4Extensions",
    "keywords": "Vector4Extensions Class in CoreFramework.Extensions public static class Vector4Extensions Inheritance System.Object Vector4Extensions Description Extension methods for UnityEngine.Vector4 . Methods Add(Vector4, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static Vector4 Add(this Vector4 vector, float? x = null, float? y = null, float? z = null, float? w = null) Parameters Vector4 vector The original Vector4 this method extends. System.Nullable < System.Single > x The value to add to the x component, or null to leave the x value unchanged. System.Nullable < System.Single > y The value to add to the y component, or null to leave the y value unchanged. System.Nullable < System.Single > z The value to add to the z component, or null to leave the z value unchanged. System.Nullable < System.Single > w The value to add to the w component, or null to leave the w value unchanged. Returns Vector4 A new Vector4 with the x, y, z, and/or w values incremented by the specified values. Description Creates a new Vector4 by adding the specified x, y, z, and/or w values to the original Vector4. ToQuaternion(Vector4) public static Quaternion ToQuaternion(this Vector4 vector4) Parameters Vector4 vector4 The Vector4 instance. Returns Quaternion A Quaternion instance with the component values set to the Vector4's components. Description Returns a Quaternion instance where the component values are equal to this Vector4 's components. With(Vector4, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static Vector4 With(this Vector4 vector, float? x = null, float? y = null, float? z = null, float? w = null) Parameters Vector4 vector The original Vector4 this method extends. System.Nullable < System.Single > x The new x value, or null to keep the original x value. System.Nullable < System.Single > y The new y value, or null to keep the original y value. System.Nullable < System.Single > z The new z value, or null to keep the original z value. System.Nullable < System.Single > w The new w value, or null to keep the original w value. Returns Vector4 A new Vector4 with the x, y, z, and/or w values optionally replaced by the specified values. Description Creates a new Vector4 with optionally overridden x, y, z, and/or w values."
  },
  "api/CoreFramework.Functional.html": {
    "href": "api/CoreFramework.Functional.html",
    "title": "| Core Framework Documentation CoreFramework.Functional",
    "keywords": "Namespace CoreFramework.Functional Structs Option<TA> From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 Used with LINQ."
  },
  "api/CoreFramework.Functional.Option-1.html": {
    "href": "api/CoreFramework.Functional.Option-1.html",
    "title": "| Core Framework Documentation Option<TA>",
    "keywords": "Option<TA> Struct in CoreFramework.Functional public readonly struct Option<TA> Description From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 Used with LINQ. Type Parameters TA Constructors Option(TA) public Option(TA value) Parameters TA value The value Description Initializes a new instance of the \"Option\" Methods Match<TB>(Func<TA, TB>, Func<TB>) public readonly TB Match<TB>(Func<TA, TB> some, Func<TB> none) Type Parameters TB The tb Parameters Func <TA, TB> some The some Func <TB> none The none Returns TB The tb Description Matches the some Select<TB>(Func<TA, TB>) public readonly Option<TB> Select<TB>(Func<TA, TB> select) Type Parameters TB The tb Parameters Func <TA, TB> select The select Returns Option <TB> An option of tb Description Selects the select Operators Implicit(TA to Option<TA>) public static implicit operator Option<TA>(TA value) Parameters TA value Returns Option <TA> Description Initializes a new instance of the\"Option\" class"
  },
  "api/CoreFramework.html": {
    "href": "api/CoreFramework.html",
    "title": "| Core Framework Documentation CoreFramework",
    "keywords": "Namespace CoreFramework Classes Bootstrapper Handles the initial bootstrapping of the application, ensuring that essential settings are applied and that the initial scene is loaded. CoreFrameworkMenu Provides menu path constants to be used with Unity's Editor menu functionalities, ensuring consistent naming across the Core Framework's custom editor options. DebugMonoBehaviour A MonoBehaviour derivative that provides additional debug logging capabilities. These methods offer a more controlled approach to logging, allowing for toggling of debug information via settings and filtering log calls based on the game object and method from which they were invoked. DebugScriptableObject An abstract class that extends UnityEngine.ScriptableObject providing debugging functionality. This class is intended to be a base class for ScriptableObjects that require internal logging capabilities. Interactable A UnityEngine.MonoBehavior that can be interacted with. Log Provides static methods for logging messages with specific formatting and context-awareness. Singleton<T> Generic Singleton class for MonoBehaviour types. Ensures that only one instance of the MonoBehaviour exists within the application. If no instance is found, one will be created."
  },
  "api/CoreFramework.Interactable.html": {
    "href": "api/CoreFramework.Interactable.html",
    "title": "| Core Framework Documentation Interactable",
    "keywords": "Interactable Class in CoreFramework public abstract class Interactable : DebugMonoBehaviour Inheritance System.Object DebugMonoBehaviour Interactable Description A UnityEngine.MonoBehavior that can be interacted with. Inherited Members DebugMonoBehaviour.Info(String, String) DebugMonoBehaviour.Warning(String, String) DebugMonoBehaviour.Error(String, String) Fields canUse protected bool canUse Field Value System.Boolean canUse can this interactable be used. Description can this interactable be used. coolDown protected float coolDown Field Value System.Single coolDown The amount of time it takes for this interactable to cool down before it can be used again. Description The amount of time it takes for this interactable to cool down before it can be used again. isActivated protected bool isActivated Field Value System.Boolean isActivated Has this interactable been interacted with. Description Has this interactable been interacted with. isOneShot protected bool isOneShot Field Value System.Boolean isOneShot Is this a one time use interactable? Description Is this a one time use interactable? Properties CanInteract public bool CanInteract { get; } Property Value System.Boolean CanInteract True if the Interactable can be interacted with. Description Describes whether this interactable can be interacted with. IsCoolDownEnded public bool IsCoolDownEnded { get; } Property Value System.Boolean IsCoolDownEnded If the current time - the last used time >= the cool down amount. Description Describes whether cool down has ended for this interactable. Methods Interact() public void Interact() Description Interact with this interactable. OnInteract() public virtual void OnInteract() Description"
  },
  "api/CoreFramework.Log.html": {
    "href": "api/CoreFramework.Log.html",
    "title": "| Core Framework Documentation Log",
    "keywords": "Log Class in CoreFramework public static class Log Inheritance System.Object Log Description Provides static methods for logging messages with specific formatting and context-awareness. Methods Error(String, Object, String) public static void Error(string msg, Object context, string callingMethod = \"\") Parameters System.String msg The message to log. Object context The context within which the log should be displayed. System.String callingMethod The optional calling method from which the log originates. Description Logs an error message with optional context and calling method. Info(String, Object, String) public static void Info(string msg, Object context, string callingMethod = \"\") Parameters System.String msg The message to log. Object context The context within which the log should be displayed. System.String callingMethod The optional calling method from which the log originates. Description Logs an informational message with optional context and calling method. Warn(String, Object, String) public static void Warn(string msg, Object context, string callingMethod = \"\") Parameters System.String msg The message to log. Object context The context within which the log should be displayed. System.String callingMethod The optional calling method from which the log originates. Description Logs a warning message with optional context and calling method."
  },
  "api/CoreFramework.Saving.html": {
    "href": "api/CoreFramework.Saving.html",
    "title": "| Core Framework Documentation CoreFramework.Saving",
    "keywords": "Namespace CoreFramework.Saving Classes JsonStatics Contains static utility methods for JSON serialization and deserialization of Unity's Vector3. JsonStrategy Represents a concrete implementation of the SavingStrategy that provides the mechanism to save and load game data as JSON files. Utilizing Newtonsoft's Json.NET library, the strategy offers a human-readable way of representing game states and allows developers to serialize and deserialize complex data structures into and from JSON format. The class exposes methods to save a game state to a JSON file and load a state from a JSON file. Developers can easily incorporate the strategy into their Unity project, offering a straightforward mechanism for managing game saves in JSON format. Reference: [CreateAssetMenu(menuName = \"SavingStrategies/Json\", fileName = \"JsonStrategy\")] SavableEntity A MonoBehaviour for all game objects that need to save data. This class provides functionality to save and load the state of game objects in Unity. for all game objects that need to save data. This class gives the GameObject a unique ID in the scene file. The ID is used for saving and restoring the state related to this GameObject. This ID can be manually override to link GameObjects between scenes (such as recurring characters, the player or a score board). Take care not to set this in a prefab unless you want to link all instances between scenes. UnityEngine.ExecuteAlways SaveSystem The SaveSystem class is a MonoBehaviour script responsible for interfacing with the Json saving system. This class manages the saving and loading of game states, including the state of all SavableEntity objects within a Unity scene. This ensures game progress and configurations are persisted and can be loaded across game sessions or after game restarts. It provides methods to save, load, and delete game states to and from specified save files. Additionally, it uses the Json.NET library for serializing and deserializing game state data. Only one instance of this component should exist, and it should be shared across all scenes. SavingStrategy Represents an abstract strategy pattern implementation for saving game data. The class provides a foundation for creating specific saving mechanisms by exposing methods for saving and loading states. Derived classes will implement the concrete behavior for reading and writing save files based on the data captured by Capture and Restore methods. The class utilizes the power of Newtonsoft Json.NET library to represent the state as a JObject, which offers flexibility in serializing and deserializing complex data structures. Developers can use different saving strategies (e.g., binary, XML, JSON) by extending this abstract class and implementing the required methods. Reference: https://docs.unity3d.com/ScriptReference/ScriptableObject.html VersionControl The VersionControl static class is designed to manage the versioning of save files within the game. This ensures backward compatibility, allowing the game to identify and potentially handle save files from earlier versions. Developers can use these version numbers to apply migration logic, ensuring that older save files can be upgraded to the latest version without loss of data. The class exposes two integer fields, CurrentFileVersion and MinFileVersion , which represent the latest version of the save file format and the earliest version that is still supported, respectively. Developers should update the CurrentFileVersion whenever there are changes in the save file format and set MinFileVersion to the oldest version that the game can still load without issues. ToDo: Switch to using a ScriptableObject instead Interfaces ISavable Defines methods for components to save and restore their state. Components that contain data which need to persist between sessions should implement this interface."
  },
  "api/CoreFramework.Saving.ISavable.html": {
    "href": "api/CoreFramework.Saving.ISavable.html",
    "title": "| Core Framework Documentation ISavable",
    "keywords": "ISavable Interface in CoreFramework.Saving public interface ISavable Description Defines methods for components to save and restore their state. Components that contain data which need to persist between sessions should implement this interface. Methods CaptureAsJToken() JToken CaptureAsJToken() Returns JToken A JToken that represents the component's current state. The JToken is a versatile container that can hold any JSON data type (string, number, object, array, boolean or null). Description Serializes the component's state into a JToken, which can be used to save the state to a file or another storage medium. RestoreFromJToken(JToken, Int32) void RestoreFromJToken(JToken state, int version) Parameters JToken state The JToken that represents the saved state of the component. The exact structure of this token is determined by the component implementation of CaptureAsJToken(). System.Int32 version The version of the save file format. This can be used to handle migrations if the format of the saved data changes over time. Description Deserializes the component's state from a JToken, restoring the saved state into the component. This is typically called when the game is loaded."
  },
  "api/CoreFramework.Saving.JsonStatics.html": {
    "href": "api/CoreFramework.Saving.JsonStatics.html",
    "title": "| Core Framework Documentation JsonStatics",
    "keywords": "JsonStatics Class in CoreFramework.Saving public static class JsonStatics Inheritance System.Object JsonStatics Description Contains static utility methods for JSON serialization and deserialization of Unity's Vector3. Methods ToToken(Vector3) public static JToken ToToken(this Vector3 vector) Parameters Vector3 vector The Vector3 instance to convert. Returns JToken A JToken object representing the Vector3 instance. Description Converts a Unity Vector3 to a JToken object. ToVector3(JToken) public static Vector3 ToVector3(this JToken state) Parameters JToken state The JToken object representing the Vector3. Returns Vector3 A Vector3 instance with values from the JToken object. Description Creates a Unity Vector3 from a JToken object."
  },
  "api/CoreFramework.Saving.JsonStrategy.html": {
    "href": "api/CoreFramework.Saving.JsonStrategy.html",
    "title": "| Core Framework Documentation JsonStrategy",
    "keywords": "JsonStrategy Class in CoreFramework.Saving public class JsonStrategy : SavingStrategy Inheritance System.Object SavingStrategy JsonStrategy Description Represents a concrete implementation of the SavingStrategy that provides the mechanism to save and load game data as JSON files. Utilizing Newtonsoft's Json.NET library, the strategy offers a human-readable way of representing game states and allows developers to serialize and deserialize complex data structures into and from JSON format. The class exposes methods to save a game state to a JSON file and load a state from a JSON file. Developers can easily incorporate the strategy into their Unity project, offering a straightforward mechanism for managing game saves in JSON format. Reference: [CreateAssetMenu(menuName = \"SavingStrategies/Json\", fileName = \"JsonStrategy\")] Inherited Members SavingStrategy.BasePath SavingStrategy.GetPath(String) Properties Extension Overrides SavingStrategy.Extension public override string Extension { get; } Property Value System.String Extension Represents the file extension used for saving the game state. In this case, \".json\". Description Represents the file extension used for saving the game state. In this case, \".json\". Methods LoadFromFile(String) Overrides SavingStrategy.LoadFromFile(String) public override JObject LoadFromFile(string saveFile) Parameters System.String saveFile The name of the save file (without extensions) from which to load the state. Returns JObject A JObject that represents the loaded state. Description Loads the game's state from a specified JSON file. If the file does not exist, it returns an empty JObject. SaveToFile(String, JObject) Overrides SavingStrategy.SaveToFile(String, JObject) public override void SaveToFile(string saveFile, JObject state) Parameters System.String saveFile The desired name of the save file without any extensions. JObject state A JObject representing the game's state to be saved. Description Provides the mechanism to save a game state to a JSON file. It serializes the provided JObject state into a JSON format and writes it to a specified file."
  },
  "api/CoreFramework.Saving.SavableEntity.html": {
    "href": "api/CoreFramework.Saving.SavableEntity.html",
    "title": "| Core Framework Documentation SavableEntity",
    "keywords": "SavableEntity Class in CoreFramework.Saving public class SavableEntity : MonoBehaviour Inheritance System.Object SavableEntity Description A MonoBehaviour for all game objects that need to save data. This class provides functionality to save and load the state of game objects in Unity. for all game objects that need to save data. This class gives the GameObject a unique ID in the scene file. The ID is used for saving and restoring the state related to this GameObject. This ID can be manually override to link GameObjects between scenes (such as recurring characters, the player or a score board). Take care not to set this in a prefab unless you want to link all instances between scenes. UnityEngine.ExecuteAlways Remarks To be placed on any GameObject that has <see cref=\"ISavable\"/> components that require saving. Methods Capture() public JToken Capture() Returns JToken A JToken object representing the state of the entity. Description Captures and returns the state of all <xref href=\"CoreFramework.Saving.ISavable\" data-throw-if-not-resolved=\"false\"></xref>s components attached to the GameObject. GetUniqueIdentifier() public string GetUniqueIdentifier() Returns System.String The unique identifier string. Description Retrieves the unique identifier of the GameObject. Restore(JToken, Int32) public void Restore(JToken state, int currentFileVersion) Parameters JToken state A JToken object representing the state of the entity. System.Int32 currentFileVersion The current version of the save file to ensure compatibility. Description Restores the state of all <xref href=\"CoreFramework.Saving.ISavable\" data-throw-if-not-resolved=\"false\"></xref>s components on the GameObject using the provided state data."
  },
  "api/CoreFramework.Saving.SaveSystem.html": {
    "href": "api/CoreFramework.Saving.SaveSystem.html",
    "title": "| Core Framework Documentation SaveSystem",
    "keywords": "SaveSystem Class in CoreFramework.Saving public class SaveSystem : MonoBehaviour Inheritance System.Object SaveSystem Description The SaveSystem class is a MonoBehaviour script responsible for interfacing with the Json saving system. This class manages the saving and loading of game states, including the state of all SavableEntity objects within a Unity scene. This ensures game progress and configurations are persisted and can be loaded across game sessions or after game restarts. It provides methods to save, load, and delete game states to and from specified save files. Additionally, it uses the Json.NET library for serializing and deserializing game state data. Only one instance of this component should exist, and it should be shared across all scenes. Methods Delete(String) public void Delete(string saveFile) Parameters System.String saveFile The name of the save file to be deleted. Description Delete the saved state from the specified save file. ListSaves() public IEnumerable<string> ListSaves() Returns System.Collections.Generic.IEnumerable < System.String > A collection of save file names without their extensions. Description List all available save files. Load(String) public void Load(string saveFile) Parameters System.String saveFile The name of the save file to be loaded. Description Load the state from the specified save file and restore it. LoadLastScene(String) public IEnumerator LoadLastScene(string saveFile) Parameters System.String saveFile The name of the save file to be loaded. Returns System.Collections.Generic.IEnumerator An IEnumerator to be used as a coroutine, ensuring the scene is fully loaded before restoring its state. Description Load the most recent saved scene and restore its state. This function runs asynchronously as it might need to load a different Unity scene. Save(String) public void Save(string saveFile) Parameters System.String saveFile The name of the save file where the current game state will be saved. Description Capture the current game state and save it to the specified file."
  },
  "api/CoreFramework.Saving.SavingStrategy.html": {
    "href": "api/CoreFramework.Saving.SavingStrategy.html",
    "title": "| Core Framework Documentation SavingStrategy",
    "keywords": "SavingStrategy Class in CoreFramework.Saving public abstract class SavingStrategy : ScriptableObject Inheritance System.Object SavingStrategy JsonStrategy Description Represents an abstract strategy pattern implementation for saving game data. The class provides a foundation for creating specific saving mechanisms by exposing methods for saving and loading states. Derived classes will implement the concrete behavior for reading and writing save files based on the data captured by Capture and Restore methods. The class utilizes the power of Newtonsoft Json.NET library to represent the state as a JObject, which offers flexibility in serializing and deserializing complex data structures. Developers can use different saving strategies (e.g., binary, XML, JSON) by extending this abstract class and implementing the required methods. Reference: https://docs.unity3d.com/ScriptReference/ScriptableObject.html Properties BasePath public static string BasePath { get; } Property Value System.String BasePath Represents the base path to the save directory. Description Represents the base path to the save directory. Extension public abstract string Extension { get; } Property Value System.String Extension Extension property denotes the file extension to be used for saving the game state. Description Extension property denotes the file extension to be used for saving the game state. Methods GetPath(String) public string GetPath(string saveFile) Parameters System.String saveFile The name of the save file without extensions. Returns System.String The complete path to the save file, including the desired extension. Description Determines the path to the specified save file and creates the directory if it doesn't exist. LoadFromFile(String) public abstract JObject LoadFromFile(string saveFile) Parameters System.String saveFile The name of the save file (without extensions) from which to load the state. Returns JObject A JObject that represents the loaded state. Description Loads the game's state from a specified file. SaveToFile(String, JObject) public abstract void SaveToFile(string saveFile, JObject state) Parameters System.String saveFile The desired name of the save file without any extensions. JObject state A JObject representing the game's state to be saved. Description Saves the provided state to a file."
  },
  "api/CoreFramework.Saving.VersionControl.html": {
    "href": "api/CoreFramework.Saving.VersionControl.html",
    "title": "| Core Framework Documentation VersionControl",
    "keywords": "VersionControl Class in CoreFramework.Saving public static class VersionControl Inheritance System.Object VersionControl Description The VersionControl static class is designed to manage the versioning of save files within the game. This ensures backward compatibility, allowing the game to identify and potentially handle save files from earlier versions. Developers can use these version numbers to apply migration logic, ensuring that older save files can be upgraded to the latest version without loss of data. The class exposes two integer fields, CurrentFileVersion and MinFileVersion , which represent the latest version of the save file format and the earliest version that is still supported, respectively. Developers should update the CurrentFileVersion whenever there are changes in the save file format and set MinFileVersion to the oldest version that the game can still load without issues. ToDo: Switch to using a ScriptableObject instead Fields CurrentFileVersion public static int CurrentFileVersion Field Value System.Int32 CurrentFileVersion Represents the latest version of the save file format. This should be incremented whenever there's a change in the structure or data stored in save files. Description Represents the latest version of the save file format. This should be incremented whenever there's a change in the structure or data stored in save files. MinFileVersion public static int MinFileVersion Field Value System.Int32 MinFileVersion Denotes the earliest version of the save file that the game still supports. This allows the game to handle older save files by potentially migrating or upgrading them to the current format. Description Denotes the earliest version of the save file that the game still supports. This allows the game to handle older save files by potentially migrating or upgrading them to the current format."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.BaseMonoBehaviour.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.BaseMonoBehaviour.html",
    "title": "| Core Framework Documentation BaseMonoBehaviour",
    "keywords": "BaseMonoBehaviour Class in CoreFramework.ScriptableObjectArchitecture public class BaseMonoBehaviour : MonoBehaviour Inheritance System.Object BaseMonoBehaviour UnityGameEventListener Description Base class for all MonoBehaviours in the Scriptable Object Architecture framework. This class can be inherited by other MonoBehaviour scripts that are part of the ScriptableObject system. It can be used to define shared functionality or common properties that are utilized by various components within the architecture."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.BaseObject.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.BaseObject.html",
    "title": "| Core Framework Documentation BaseObject",
    "keywords": "BaseObject Class in CoreFramework.ScriptableObjectArchitecture public class BaseObject : ScriptableObject Inheritance System.Object BaseObject BaseGameEvent BaseVariable<TType, TEvent> Description A base class for creating Scriptable Objects that are part of the Scriptable Object Architecture framework. Inherits from the Unity Engine's ScriptableObject class and can be extended to include common functionality for all custom Scriptable Objects within the framework. Remarks This class can be used as a starting point for custom Scriptable Objects, ensuring a consistent implementation across the framework. It is inspired by the ideas presented by Ryan Hipple at Unite 2017 for robust game architecture using Scriptable Objects."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.AnimationCurveGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.AnimationCurveGameEvent.html",
    "title": "| Core Framework Documentation AnimationCurveGameEvent",
    "keywords": "AnimationCurveGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class AnimationCurveGameEvent : BaseGameEvent<AnimationCurve>, IGameEvent, IGameEvent<AnimationCurve> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < AnimationCurve > AnimationCurveGameEvent Description A Game Event for passing AnimationCurve data. Remarks Use this event to pass AnimationCurve data within your game. This can be useful when you want to animate properties or values in a decoupled way, allowing systems to subscribe to and react to the event without needing direct references to each other. Inherited Members BaseGameEvent<AnimationCurve>.Raise(AnimationCurve) BaseGameEvent<AnimationCurve>.AddListener(IGameEventListener<AnimationCurve>) BaseGameEvent<AnimationCurve>.RemoveListener(IGameEventListener<AnimationCurve>) BaseGameEvent<AnimationCurve>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.AnimationCurveUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.AnimationCurveUnityEvent.html",
    "title": "| Core Framework Documentation AnimationCurveUnityEvent",
    "keywords": "AnimationCurveUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class AnimationCurveUnityEvent : UnityEvent<AnimationCurve> Inheritance System.Object AnimationCurveUnityEvent Description The animation curve unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipGameEvent.html",
    "title": "| Core Framework Documentation AudioClipGameEvent",
    "keywords": "AudioClipGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class AudioClipGameEvent : BaseGameEvent<AudioClip>, IGameEvent, IGameEvent<AudioClip> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < AudioClip > AudioClipGameEvent Description A Game Event for passing AudioClip data. Remarks This type of event can be used to trigger audio-related actions across your game, such as playing sound effects or music without tightly coupling audio systems to the rest of your game logic. This allows for more modular, reusable, and manageable code. Inherited Members BaseGameEvent<AudioClip>.Raise(AudioClip) BaseGameEvent<AudioClip>.AddListener(IGameEventListener<AudioClip>) BaseGameEvent<AudioClip>.RemoveListener(IGameEventListener<AudioClip>) BaseGameEvent<AudioClip>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipGameEventListener.html",
    "title": "| Core Framework Documentation AudioClipGameEventListener",
    "keywords": "AudioClipGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class AudioClipGameEventListener : UnityGameEventListener<AudioClip, AudioClipGameEvent, AudioClipUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < AudioClip , AudioClipGameEvent , AudioClipUnityEvent > AudioClipGameEventListener Description The audio clip game event listener class Inherited Members UnityGameEventListener<AudioClip, AudioClipGameEvent, AudioClipUnityEvent>.OnEventRaised(AudioClip) UnityGameEventListener<AudioClip, AudioClipGameEvent, AudioClipUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.AudioClipUnityEvent.html",
    "title": "| Core Framework Documentation AudioClipUnityEvent",
    "keywords": "AudioClipUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events [Serializable] public sealed class AudioClipUnityEvent : UnityEvent<AudioClip> Inheritance System.Object AudioClipUnityEvent Description The audio clip unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent.html",
    "title": "| Core Framework Documentation BaseGameEvent",
    "keywords": "BaseGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events [Serializable] public abstract class BaseGameEvent : BaseObject, IGameEvent Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent<T> BaseGameEvent<T1, T2> GameEvent Description Base class for all Scriptable Object Architecture Game Event Assets. Implements IGameEvent Methods AddListener(IGameEventListener) Implements IGameEvent.AddListener(IGameEventListener) public void AddListener(IGameEventListener listener) Parameters IGameEventListener listener The to add. Description Add a that gets notified when the event is raised. Raise() Implements IGameEvent.Raise() public virtual void Raise() Description Raise the Event. RemoveAll() Implements IGameEvent.RemoveAll() public virtual void RemoveAll() Description Remove all Listeners from the game event. RemoveListener(IGameEventListener) Implements IGameEvent.RemoveListener(IGameEventListener) public void RemoveListener(IGameEventListener listener) Parameters IGameEventListener listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent-1.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent-1.html",
    "title": "| Core Framework Documentation BaseGameEvent<T>",
    "keywords": "BaseGameEvent<T> Class in CoreFramework.ScriptableObjectArchitecture.Events [Serializable] public abstract class BaseGameEvent<T> : BaseGameEvent, IGameEvent, IGameEvent<T> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent<T> AnimationCurveGameEvent AudioClipGameEvent BoolGameEvent BoundsGameEvent ByteGameEvent CharGameEvent Color32GameEvent ColorGameEvent DoubleGameEvent FloatGameEvent GameObjectGameEvent IntGameEvent LayerMaskGameEvent LongGameEvent ObjectGameEvent QuaternionGameEvent SByteGameEvent SceneGameEvent ShortGameEvent StringGameEvent UIntGameEvent ULongGameEvent UShortGameEvent Vector2GameEvent Vector3GameEvent Vector4GameEvent Description A base ScriptableObject class for game event assets that require a single type parameter. It adheres to the IGameEvent<T> interface. Inherited Members BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll() Type Parameters T Methods AddListener(IGameEventListener<T>) Implements IGameEvent<T>.AddListener(IGameEventListener<T>) public void AddListener(IGameEventListener<T> listener) Parameters IGameEventListener <T> listener The to add. Description Add a that gets notified when the event is raised. Raise() Overrides BaseGameEvent.Raise() public override void Raise() Description Raise the Event. Raise(T) Implements IGameEvent<T>.Raise(T) public void Raise(T value) Parameters T value The value passed to the event raised. Description Raise the Event. RemoveListener(IGameEventListener<T>) Implements IGameEvent<T>.RemoveListener(IGameEventListener<T>) public void RemoveListener(IGameEventListener<T> listener) Parameters IGameEventListener <T> listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BaseGameEvent-2.html",
    "title": "| Core Framework Documentation BaseGameEvent<T1, T2>",
    "keywords": "BaseGameEvent<T1, T2> Class in CoreFramework.ScriptableObjectArchitecture.Events [Serializable] public abstract class BaseGameEvent<T1, T2> : BaseGameEvent, IGameEvent, IGameEvent<T1, T2> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent<T1, T2> GameObjectBoolGameEvent GameObjectFloatGameEvent GameObjectIntGameEvent Description A base ScriptableObject class for game event assets with two type parameters, conforming to the IGameEvent<T1, T2> interface. Inherited Members BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll() Type Parameters T1 T2 Methods AddListener(IGameEventListener<T1, T2>) Implements IGameEvent<T1, T2>.AddListener(IGameEventListener<T1, T2>) public void AddListener(IGameEventListener<T1, T2> listener) Parameters IGameEventListener <T1, T2> listener The to add. Description Add a that gets notified when the event is raised. Raise() Overrides BaseGameEvent.Raise() public override void Raise() Description Raise the Event. Raise(T1, T2) Implements IGameEvent<T1, T2>.Raise(T1, T2) public void Raise(T1 value1, T2 value2) Parameters T1 value1 T2 value2 Description Raise the Event. RemoveListener(IGameEventListener<T1, T2>) Implements IGameEvent<T1, T2>.RemoveListener(IGameEventListener<T1, T2>) public void RemoveListener(IGameEventListener<T1, T2> listener) Parameters IGameEventListener <T1, T2> listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BoolGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BoolGameEvent.html",
    "title": "| Core Framework Documentation BoolGameEvent",
    "keywords": "BoolGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class BoolGameEvent : BaseGameEvent<bool>, IGameEvent, IGameEvent<bool> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Boolean > BoolGameEvent Description Represents a Scriptable Object game event that takes a boolean value as its parameter. Remarks Boolean game events can be particularly useful for toggling states, triggering binary decisions, or broadcasting simple on/off or true/false conditions within your game. Inherited Members BaseGameEvent<Boolean>.Raise(Boolean) BaseGameEvent<Boolean>.AddListener(IGameEventListener<Boolean>) BaseGameEvent<Boolean>.RemoveListener(IGameEventListener<Boolean>) BaseGameEvent<Boolean>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BoolUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BoolUnityEvent.html",
    "title": "| Core Framework Documentation BoolUnityEvent",
    "keywords": "BoolUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class BoolUnityEvent : UnityEvent<bool> Inheritance System.Object BoolUnityEvent Description The bool unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BoundsGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BoundsGameEvent.html",
    "title": "| Core Framework Documentation BoundsGameEvent",
    "keywords": "BoundsGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class BoundsGameEvent : BaseGameEvent<Bounds>, IGameEvent, IGameEvent<Bounds> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Bounds > BoundsGameEvent Description A Game Event for Bounds values. Remarks Use this event to pass Bounds data, which encapsulates information about a volume in space including its position and size. This is typically used in spatial queries, collision detection, and determining the physical space that an object occupies within the game world. Inherited Members BaseGameEvent<Bounds>.Raise(Bounds) BaseGameEvent<Bounds>.AddListener(IGameEventListener<Bounds>) BaseGameEvent<Bounds>.RemoveListener(IGameEventListener<Bounds>) BaseGameEvent<Bounds>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.BoundsUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.BoundsUnityEvent.html",
    "title": "| Core Framework Documentation BoundsUnityEvent",
    "keywords": "BoundsUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class BoundsUnityEvent : UnityEvent<Bounds> Inheritance System.Object BoundsUnityEvent Description The bounds unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ByteGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ByteGameEvent.html",
    "title": "| Core Framework Documentation ByteGameEvent",
    "keywords": "ByteGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ByteGameEvent : BaseGameEvent<byte>, IGameEvent, IGameEvent<byte> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Byte > ByteGameEvent Description Represents a Scriptable Object game event that passes a byte parameter. Remarks Byte events can be useful for representing small numerical data or state information that falls within the range of a byte (0-255), such as error codes, IDs, or other categorized data within a game's systems. Inherited Members BaseGameEvent<Byte>.Raise(Byte) BaseGameEvent<Byte>.AddListener(IGameEventListener<Byte>) BaseGameEvent<Byte>.RemoveListener(IGameEventListener<Byte>) BaseGameEvent<Byte>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ByteUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ByteUnityEvent.html",
    "title": "| Core Framework Documentation ByteUnityEvent",
    "keywords": "ByteUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ByteUnityEvent : UnityEvent<byte> Inheritance System.Object ByteUnityEvent Description The byte unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.CharGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.CharGameEvent.html",
    "title": "| Core Framework Documentation CharGameEvent",
    "keywords": "CharGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class CharGameEvent : BaseGameEvent<char>, IGameEvent, IGameEvent<char> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Char > CharGameEvent Description Represents a Scriptable Object game event that passes a character (char) parameter. Remarks This event can be used to pass single character data, useful for text-based input, parsing single character commands, or any other game systems that utilize character data. Inherited Members BaseGameEvent<Char>.Raise(Char) BaseGameEvent<Char>.AddListener(IGameEventListener<Char>) BaseGameEvent<Char>.RemoveListener(IGameEventListener<Char>) BaseGameEvent<Char>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.CharUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.CharUnityEvent.html",
    "title": "| Core Framework Documentation CharUnityEvent",
    "keywords": "CharUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class CharUnityEvent : UnityEvent<char> Inheritance System.Object CharUnityEvent Description The char unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Color32GameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Color32GameEvent.html",
    "title": "| Core Framework Documentation Color32GameEvent",
    "keywords": "Color32GameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Color32GameEvent : BaseGameEvent<Color32>, IGameEvent, IGameEvent<Color32> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Color32 > Color32GameEvent Description A Game Event for Color32 values. Remarks Use this event to pass Color32 data, which is often used when dealing with more efficient color operations and when working with texture data. It's ideal for scenarios where the exact color values are important and need to be serialized or communicated without the overhead of the full precision Color structure. Inherited Members BaseGameEvent<Color32>.Raise(Color32) BaseGameEvent<Color32>.AddListener(IGameEventListener<Color32>) BaseGameEvent<Color32>.RemoveListener(IGameEventListener<Color32>) BaseGameEvent<Color32>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Color32UnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Color32UnityEvent.html",
    "title": "| Core Framework Documentation Color32UnityEvent",
    "keywords": "Color32UnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Color32UnityEvent : UnityEvent<Color32> Inheritance System.Object Color32UnityEvent Description The color 32 unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ColorGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ColorGameEvent.html",
    "title": "| Core Framework Documentation ColorGameEvent",
    "keywords": "ColorGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ColorGameEvent : BaseGameEvent<Color>, IGameEvent, IGameEvent<Color> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Color > ColorGameEvent Description A Game Event for Color values. Remarks This event can be used to notify listeners about color changes or requirements. It could be used in scenarios such as changing the color scheme of a level, updating the UI theme, or signaling player state changes (like invincibility flashing). Inherited Members BaseGameEvent<Color>.Raise(Color) BaseGameEvent<Color>.AddListener(IGameEventListener<Color>) BaseGameEvent<Color>.RemoveListener(IGameEventListener<Color>) BaseGameEvent<Color>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ColorUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ColorUnityEvent.html",
    "title": "| Core Framework Documentation ColorUnityEvent",
    "keywords": "ColorUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ColorUnityEvent : UnityEvent<Color> Inheritance System.Object ColorUnityEvent Description The color unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.DoubleGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.DoubleGameEvent.html",
    "title": "| Core Framework Documentation DoubleGameEvent",
    "keywords": "DoubleGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class DoubleGameEvent : BaseGameEvent<double>, IGameEvent, IGameEvent<double> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Double > DoubleGameEvent Description Represents a Scriptable Object game event that passes a double precision floating point parameter. Remarks This event type is suitable for high-precision floating-point requirements, such as scientific calculations, precise measurements, or any other gameplay elements that require more precision than what a single-precision float can provide. Inherited Members BaseGameEvent<Double>.Raise(Double) BaseGameEvent<Double>.AddListener(IGameEventListener<Double>) BaseGameEvent<Double>.RemoveListener(IGameEventListener<Double>) BaseGameEvent<Double>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.DoubleUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.DoubleUnityEvent.html",
    "title": "| Core Framework Documentation DoubleUnityEvent",
    "keywords": "DoubleUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class DoubleUnityEvent : UnityEvent<double> Inheritance System.Object DoubleUnityEvent Description The double unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.FloatGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.FloatGameEvent.html",
    "title": "| Core Framework Documentation FloatGameEvent",
    "keywords": "FloatGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class FloatGameEvent : BaseGameEvent<float>, IGameEvent, IGameEvent<float> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Single > FloatGameEvent Description Represents a Scriptable Object game event that passes a float (System.Single) parameter. Remarks Use this event type for communicating changes or triggers that involve floating-point numbers, such as health changes, percentages, time values, distances, or other measurements that require fractional values within your game's systems. Inherited Members BaseGameEvent<Single>.Raise(Single) BaseGameEvent<Single>.AddListener(IGameEventListener<Single>) BaseGameEvent<Single>.RemoveListener(IGameEventListener<Single>) BaseGameEvent<Single>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.FloatUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.FloatUnityEvent.html",
    "title": "| Core Framework Documentation FloatUnityEvent",
    "keywords": "FloatUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class FloatUnityEvent : UnityEvent<float> Inheritance System.Object FloatUnityEvent Description The float unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameEvent.html",
    "title": "| Core Framework Documentation GameEvent",
    "keywords": "GameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public class GameEvent : BaseGameEvent, IGameEvent Inheritance System.Object BaseObject BaseGameEvent GameEvent Description A ScriptableObject representing a Game Event with no parameters. This can be used to signal events across the game without direct coupling between different game systems. Inherited Members BaseGameEvent.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectBoolGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectBoolGameEvent.html",
    "title": "| Core Framework Documentation GameObjectBoolGameEvent",
    "keywords": "GameObjectBoolGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class GameObjectBoolGameEvent : BaseGameEvent<GameObject, bool>, IGameEvent, IGameEvent<GameObject, bool> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < GameObject , System.Boolean > GameObjectBoolGameEvent Description Represents a Game Event asset that can be raised with a GameObject and a Boolean value as its arguments. This allows GameObject-Boolean pairs to be used as events in the Unity event system. Inherited Members BaseGameEvent<GameObject, Boolean>.Raise(GameObject, Boolean) BaseGameEvent<GameObject, Boolean>.AddListener(IGameEventListener<GameObject, Boolean>) BaseGameEvent<GameObject, Boolean>.RemoveListener(IGameEventListener<GameObject, Boolean>) BaseGameEvent<GameObject, Boolean>.Raise() BaseGameEvent.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectFloatGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectFloatGameEvent.html",
    "title": "| Core Framework Documentation GameObjectFloatGameEvent",
    "keywords": "GameObjectFloatGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class GameObjectFloatGameEvent : BaseGameEvent<GameObject, float>, IGameEvent, IGameEvent<GameObject, float> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < GameObject , System.Single > GameObjectFloatGameEvent Description A Game Event that has a GameObject and Float as arguments. It serves as a custom event that can be raised within the Unity Editor with GameObject-Float pairs, allowing for a flexible event system. Inherited Members BaseGameEvent<GameObject, Single>.Raise(GameObject, Single) BaseGameEvent<GameObject, Single>.AddListener(IGameEventListener<GameObject, Single>) BaseGameEvent<GameObject, Single>.RemoveListener(IGameEventListener<GameObject, Single>) BaseGameEvent<GameObject, Single>.Raise() BaseGameEvent.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectGameEvent.html",
    "title": "| Core Framework Documentation GameObjectGameEvent",
    "keywords": "GameObjectGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class GameObjectGameEvent : BaseGameEvent<GameObject>, IGameEvent, IGameEvent<GameObject> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < GameObject > GameObjectGameEvent Description A Game Event for GameObjects. Remarks Use this event to pass GameObject references within your game. It is useful for scenarios where you need to broadcast that a GameObject has been created, destroyed, or has undergone a significant change that other systems need to react to. Inherited Members BaseGameEvent<GameObject>.Raise(GameObject) BaseGameEvent<GameObject>.AddListener(IGameEventListener<GameObject>) BaseGameEvent<GameObject>.RemoveListener(IGameEventListener<GameObject>) BaseGameEvent<GameObject>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectIntGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectIntGameEvent.html",
    "title": "| Core Framework Documentation GameObjectIntGameEvent",
    "keywords": "GameObjectIntGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class GameObjectIntGameEvent : BaseGameEvent<GameObject, int>, IGameEvent, IGameEvent<GameObject, int> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < GameObject , System.Int32 > GameObjectIntGameEvent Description Represents a Game Event asset that can be raised with a GameObject and an Integer value as its arguments. This allows GameObject-Integer pairs to be used as events in the Unity event system. Inherited Members BaseGameEvent<GameObject, Int32>.Raise(GameObject, Int32) BaseGameEvent<GameObject, Int32>.AddListener(IGameEventListener<GameObject, Int32>) BaseGameEvent<GameObject, Int32>.RemoveListener(IGameEventListener<GameObject, Int32>) BaseGameEvent<GameObject, Int32>.Raise() BaseGameEvent.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.GameObjectUnityEvent.html",
    "title": "| Core Framework Documentation GameObjectUnityEvent",
    "keywords": "GameObjectUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class GameObjectUnityEvent : UnityEvent<GameObject> Inheritance System.Object GameObjectUnityEvent Description The game object unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.html",
    "title": "| Core Framework Documentation CoreFramework.ScriptableObjectArchitecture.Events",
    "keywords": "Namespace CoreFramework.ScriptableObjectArchitecture.Events Classes AnimationCurveGameEvent A Game Event for passing AnimationCurve data. AnimationCurveUnityEvent The animation curve unity event class AudioClipGameEvent A Game Event for passing AudioClip data. AudioClipGameEventListener The audio clip game event listener class AudioClipUnityEvent The audio clip unity event class BaseGameEvent Base class for all Scriptable Object Architecture Game Event Assets. Implements IGameEvent BaseGameEvent<T> A base ScriptableObject class for game event assets that require a single type parameter. It adheres to the IGameEvent<T> interface. BaseGameEvent<T1, T2> A base ScriptableObject class for game event assets with two type parameters, conforming to the IGameEvent<T1, T2> interface. BoolGameEvent Represents a Scriptable Object game event that takes a boolean value as its parameter. BoolUnityEvent The bool unity event class BoundsGameEvent A Game Event for Bounds values. BoundsUnityEvent The bounds unity event class ByteGameEvent Represents a Scriptable Object game event that passes a byte parameter. ByteUnityEvent The byte unity event class CharGameEvent Represents a Scriptable Object game event that passes a character (char) parameter. CharUnityEvent The char unity event class Color32GameEvent A Game Event for Color32 values. Color32UnityEvent The color 32 unity event class ColorGameEvent A Game Event for Color values. ColorUnityEvent The color unity event class DoubleGameEvent Represents a Scriptable Object game event that passes a double precision floating point parameter. DoubleUnityEvent The double unity event class FloatGameEvent Represents a Scriptable Object game event that passes a float (System.Single) parameter. FloatUnityEvent The float unity event class GameEvent A ScriptableObject representing a Game Event with no parameters. This can be used to signal events across the game without direct coupling between different game systems. GameObjectBoolGameEvent Represents a Game Event asset that can be raised with a GameObject and a Boolean value as its arguments. This allows GameObject-Boolean pairs to be used as events in the Unity event system. GameObjectFloatGameEvent A Game Event that has a GameObject and Float as arguments. It serves as a custom event that can be raised within the Unity Editor with GameObject-Float pairs, allowing for a flexible event system. GameObjectGameEvent A Game Event for GameObjects. GameObjectIntGameEvent Represents a Game Event asset that can be raised with a GameObject and an Integer value as its arguments. This allows GameObject-Integer pairs to be used as events in the Unity event system. GameObjectUnityEvent The game object unity event class IntGameEvent Represents a Scriptable Object game event that passes an int (System.Int32) parameter. IntUnityEvent The int unity event class LayerMaskGameEvent A Game Event that takes a LayerMask as its parameter. LayerMaskUnityEvent The layer mask unity event class LongGameEvent Represents a Scriptable Object game event that passes a long (System.Int64) parameter. LongUnityEvent The long unity event class ObjectGameEvent A Game Event that takes a Unity Object as its parameter. ObjectUnityEvent The object unity event class QuaternionGameEvent A Game Event that takes a Quaternion as its parameter. QuaternionUnityEvent The quaternion unity event class SByteGameEvent Represents a Scriptable Object game event that passes an sbyte (System.SByte) parameter. SByteUnityEvent The byte unity event class SceneGameEvent A Game Event that takes a SceneInfo as its parameter. SceneUnityEvent The scene unity event class ShortGameEvent A game event that can be raised with a short (System.Int16) parameter. ShortUnityEvent The short unity event class StringGameEvent Represents a Game Event that can be raised with a string parameter. This Game Event can be created via the Unity Inspector with the \"CreateAssetMenu\" attribute. StringUnityEvent The string unity event class UIntGameEvent A ScriptableObject event that can be raised with an unsigned integer (uint) parameter. This event can be instantiated via the Unity Editor by using the provided \"Create\" asset menu. UIntUnityEvent The int unity event class ULongGameEvent Represents a ScriptableObject-based event that can be raised with an unsigned long (ulong) parameter. This event can be created via the Unity Editor by using the \"Create\" asset menu. ULongUnityEvent The long unity event class UnityGameEventListener The unity game event listener class UnityGameEventListener<TEvent, TResponse> The unity game event listener class UnityGameEventListener<TType, TEvent, TResponse> The unity game event listener class UnityGameEventListener<TType1, TType2, TEvent, TResponse> UShortGameEvent Represents a ScriptableObject-based event that can be raised with an unsigned short (ushort) parameter. This event can be created via the Unity Editor by using the \"Create\" asset menu. UShortUnityEvent The short unity event class Vector2GameEvent A Game Event that takes a Vector2 as its parameter. Vector2UnityEvent The Vector 2 unity event class Vector3GameEvent A Game Event that takes a Vector3 as its parameter. Vector3UnityEvent The vector 3 unity event class Vector4GameEvent A Game Event that takes a Vector4 as its parameter. Vector4UnityEvent The vector 4 unity event class Interfaces IGameEvent Interface to Implement A Game Event. IGameEvent<T> Interface to Implement A Game Event That takes one parameter. IGameEvent<T1, T2> Interface to Implement A Game Event That takes one parameter."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent.html",
    "title": "| Core Framework Documentation IGameEvent",
    "keywords": "IGameEvent Interface in CoreFramework.ScriptableObjectArchitecture.Events public interface IGameEvent Description Interface to Implement A Game Event. Methods AddListener(IGameEventListener) void AddListener(IGameEventListener listener) Parameters IGameEventListener listener The to add. Description Add a that gets notified when the event is raised. Raise() void Raise() Description Raise the Event. RemoveAll() void RemoveAll() Description Remove all Listeners from the game event. RemoveListener(IGameEventListener) void RemoveListener(IGameEventListener listener) Parameters IGameEventListener listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent-1.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent-1.html",
    "title": "| Core Framework Documentation IGameEvent<T>",
    "keywords": "IGameEvent<T> Interface in CoreFramework.ScriptableObjectArchitecture.Events public interface IGameEvent<T> Description Interface to Implement A Game Event That takes one parameter. Type Parameters T The Parameter type of the game event Methods AddListener(IGameEventListener<T>) void AddListener(IGameEventListener<T> listener) Parameters IGameEventListener <T> listener The to add. Description Add a that gets notified when the event is raised. Raise(T) void Raise(T value) Parameters T value The value passed to the event raised. Description Raise the Event. RemoveAll() void RemoveAll() Description Remove all Listeners from the game event. RemoveListener(IGameEventListener<T>) void RemoveListener(IGameEventListener<T> listener) Parameters IGameEventListener <T> listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.IGameEvent-2.html",
    "title": "| Core Framework Documentation IGameEvent<T1, T2>",
    "keywords": "IGameEvent<T1, T2> Interface in CoreFramework.ScriptableObjectArchitecture.Events public interface IGameEvent<T1, T2> Description Interface to Implement A Game Event That takes one parameter. Type Parameters T1 The Parameter type of the game event T2 The Parameter type of the game event Methods AddListener(IGameEventListener<T1, T2>) void AddListener(IGameEventListener<T1, T2> listener) Parameters IGameEventListener <T1, T2> listener The to add. Description Add a that gets notified when the event is raised. Raise(T1, T2) void Raise(T1 value1, T2 value2) Parameters T1 value1 T2 value2 Description Raise the Event. RemoveAll() void RemoveAll() Description Remove all Listeners from the game event. RemoveListener(IGameEventListener<T1, T2>) void RemoveListener(IGameEventListener<T1, T2> listener) Parameters IGameEventListener <T1, T2> listener The to remove. Description Remove a from the Event."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.IntGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.IntGameEvent.html",
    "title": "| Core Framework Documentation IntGameEvent",
    "keywords": "IntGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class IntGameEvent : BaseGameEvent<int>, IGameEvent, IGameEvent<int> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Int32 > IntGameEvent Description Represents a Scriptable Object game event that passes an int (System.Int32) parameter. Remarks Use this event type to pass integral data within your game's event system. It is ideal for scores, counting objects, levels, and other game elements that require an integer representation. Inherited Members BaseGameEvent<Int32>.Raise(Int32) BaseGameEvent<Int32>.AddListener(IGameEventListener<Int32>) BaseGameEvent<Int32>.RemoveListener(IGameEventListener<Int32>) BaseGameEvent<Int32>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.IntUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.IntUnityEvent.html",
    "title": "| Core Framework Documentation IntUnityEvent",
    "keywords": "IntUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class IntUnityEvent : UnityEvent<int> Inheritance System.Object IntUnityEvent Description The int unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.LayerMaskGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.LayerMaskGameEvent.html",
    "title": "| Core Framework Documentation LayerMaskGameEvent",
    "keywords": "LayerMaskGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class LayerMaskGameEvent : BaseGameEvent<LayerMask>, IGameEvent, IGameEvent<LayerMask> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < LayerMask > LayerMaskGameEvent Description A Game Event that takes a LayerMask as its parameter. Remarks This event can be utilized when you want to communicate layer-based changes or checks within your game. It can be particularly useful for triggering actions that depend on the layering system in Unity, such as collision checks, rendering layers, or physics interactions. Inherited Members BaseGameEvent<LayerMask>.Raise(LayerMask) BaseGameEvent<LayerMask>.AddListener(IGameEventListener<LayerMask>) BaseGameEvent<LayerMask>.RemoveListener(IGameEventListener<LayerMask>) BaseGameEvent<LayerMask>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.LayerMaskUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.LayerMaskUnityEvent.html",
    "title": "| Core Framework Documentation LayerMaskUnityEvent",
    "keywords": "LayerMaskUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class LayerMaskUnityEvent : UnityEvent<LayerMask> Inheritance System.Object LayerMaskUnityEvent Description The layer mask unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.BoolGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.BoolGameEventListener.html",
    "title": "| Core Framework Documentation BoolGameEventListener",
    "keywords": "BoolGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class BoolGameEventListener : UnityGameEventListener<bool, BoolGameEvent, BoolUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Boolean , BoolGameEvent , BoolUnityEvent > BoolGameEventListener Description The bool game event listener Inherited Members UnityGameEventListener<Boolean, BoolGameEvent, BoolUnityEvent>.OnEventRaised(Boolean) UnityGameEventListener<Boolean, BoolGameEvent, BoolUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.BoundsGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.BoundsGameEventListener.html",
    "title": "| Core Framework Documentation BoundsGameEventListener",
    "keywords": "BoundsGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class BoundsGameEventListener : UnityGameEventListener<Bounds, BoundsGameEvent, BoundsUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Bounds , BoundsGameEvent , BoundsUnityEvent > BoundsGameEventListener Description The bounds game event listener class Inherited Members UnityGameEventListener<Bounds, BoundsGameEvent, BoundsUnityEvent>.OnEventRaised(Bounds) UnityGameEventListener<Bounds, BoundsGameEvent, BoundsUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ByteGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ByteGameEventListener.html",
    "title": "| Core Framework Documentation ByteGameEventListener",
    "keywords": "ByteGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class ByteGameEventListener : UnityGameEventListener<byte, ByteGameEvent, ByteUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Byte , ByteGameEvent , ByteUnityEvent > ByteGameEventListener Description The byte game event listener class Inherited Members UnityGameEventListener<Byte, ByteGameEvent, ByteUnityEvent>.OnEventRaised(Byte) UnityGameEventListener<Byte, ByteGameEvent, ByteUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener.html",
    "title": "| Core Framework Documentation CodedGameEventListener",
    "keywords": "CodedGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public class CodedGameEventListener : IGameEventListener Inheritance System.Object CodedGameEventListener Description The coded game event listener class Methods Disable() public void Disable() Description Disables this instance Enable(Action) public void Enable(Action response) Parameters Action response The response Description Enables the response OnEventRaised() Implements IGameEventListener.OnEventRaised() public void OnEventRaised() Description Ons the event raised See Also IGameEventListener"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener-1.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener-1.html",
    "title": "| Core Framework Documentation CodedGameEventListener<T>",
    "keywords": "CodedGameEventListener<T> Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public class CodedGameEventListener<T> : IGameEventListener<T> Inheritance System.Object CodedGameEventListener<T> Description The coded game event listener class Type Parameters T Methods Disable() public void Disable() Description Disables this instance Enable(Action<T>) public void Enable(Action<T> response) Parameters Action <T> response The response Description Enables the response OnEventRaised(T) Implements IGameEventListener<T>.OnEventRaised(T) public void OnEventRaised(T value) Parameters T value The value Description Ons the event raised using the specified value See Also CodedGameEventListener IGameEventListener <T>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.CodedGameEventListener-2.html",
    "title": "| Core Framework Documentation CodedGameEventListener<T1, T2>",
    "keywords": "CodedGameEventListener<T1, T2> Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public class CodedGameEventListener<T1, T2> : IGameEventListener<T1, T2> Inheritance System.Object CodedGameEventListener<T1, T2> Description The coded game event listener class Type Parameters T1 T2 Methods Disable() public void Disable() Description Disables this instance Enable(Action<T1, T2>) public void Enable(Action<T1, T2> response) Parameters Action <T1, T2> response The response Description Enables the response OnEventRaised(T1, T2) Implements IGameEventListener<T1, T2>.OnEventRaised(T1, T2) public void OnEventRaised(T1 value1, T2 value2) Parameters T1 value1 T2 value2 Description Ons the event raised using the specified value See Also CodedGameEventListener IGameEventListener <T>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Color32GameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Color32GameEventListener.html",
    "title": "| Core Framework Documentation Color32GameEventListener",
    "keywords": "Color32GameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class Color32GameEventListener : UnityGameEventListener<Color32, Color32GameEvent, Color32UnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Color32 , Color32GameEvent , Color32UnityEvent > Color32GameEventListener Description The color 32 game event listener class Inherited Members UnityGameEventListener<Color32, Color32GameEvent, Color32UnityEvent>.OnEventRaised(Color32) UnityGameEventListener<Color32, Color32GameEvent, Color32UnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ColorGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ColorGameEventListener.html",
    "title": "| Core Framework Documentation ColorGameEventListener",
    "keywords": "ColorGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class ColorGameEventListener : UnityGameEventListener<Color, ColorGameEvent, ColorUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Color , ColorGameEvent , ColorUnityEvent > ColorGameEventListener Description The color game event listener class Inherited Members UnityGameEventListener<Color, ColorGameEvent, ColorUnityEvent>.OnEventRaised(Color) UnityGameEventListener<Color, ColorGameEvent, ColorUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.DoubleGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.DoubleGameEventListener.html",
    "title": "| Core Framework Documentation DoubleGameEventListener",
    "keywords": "DoubleGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class DoubleGameEventListener : UnityGameEventListener<double, DoubleGameEvent, DoubleUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Double , DoubleGameEvent , DoubleUnityEvent > DoubleGameEventListener Description The double game event listener class Inherited Members UnityGameEventListener<Double, DoubleGameEvent, DoubleUnityEvent>.OnEventRaised(Double) UnityGameEventListener<Double, DoubleGameEvent, DoubleUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.FloatGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.FloatGameEventListener.html",
    "title": "| Core Framework Documentation FloatGameEventListener",
    "keywords": "FloatGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class FloatGameEventListener : UnityGameEventListener<float, FloatGameEvent, FloatUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Single , FloatGameEvent , FloatUnityEvent > FloatGameEventListener Description The float game event listener class Inherited Members UnityGameEventListener<Single, FloatGameEvent, FloatUnityEvent>.OnEventRaised(Single) UnityGameEventListener<Single, FloatGameEvent, FloatUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.GameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.GameEventListener.html",
    "title": "| Core Framework Documentation GameEventListener",
    "keywords": "GameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class GameEventListener : UnityGameEventListener<BaseGameEvent, UnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < BaseGameEvent , UnityEvent > GameEventListener Description Inherited Members UnityGameEventListener<BaseGameEvent, UnityEvent>.OnEventRaised()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.GameObjectGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.GameObjectGameEventListener.html",
    "title": "| Core Framework Documentation GameObjectGameEventListener",
    "keywords": "GameObjectGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class GameObjectGameEventListener : UnityGameEventListener<GameObject, GameObjectGameEvent, GameObjectUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < GameObject , GameObjectGameEvent , GameObjectUnityEvent > GameObjectGameEventListener Description The game object game event listener class Inherited Members UnityGameEventListener<GameObject, GameObjectGameEvent, GameObjectUnityEvent>.OnEventRaised(GameObject) UnityGameEventListener<GameObject, GameObjectGameEvent, GameObjectUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.html",
    "title": "| Core Framework Documentation CoreFramework.ScriptableObjectArchitecture.Events.Listeners",
    "keywords": "Namespace CoreFramework.ScriptableObjectArchitecture.Events.Listeners Classes BoolGameEventListener The bool game event listener BoundsGameEventListener The bounds game event listener class ByteGameEventListener The byte game event listener class CodedGameEventListener The coded game event listener class CodedGameEventListener<T> The coded game event listener class CodedGameEventListener<T1, T2> The coded game event listener class Color32GameEventListener The color 32 game event listener class ColorGameEventListener The color game event listener class DoubleGameEventListener The double game event listener class FloatGameEventListener The float game event listener class GameEventListener GameObjectGameEventListener The game object game event listener class IntGameEventListener The int game event listener class LayerMaskGameEventListener The layer mask game event listener class LongGameEventListener The long game event listener class ObjectGameEventListener The object game event listener class QuaternionGameEventListener The quaternion game event listener class SByteGameEventListener The byte game event listener class SceneGameEventListener The scene game event listener class ShortGameEventListener The short game event listener class StringGameEventListener The string game event listener class UIntGameEventListener The int game event listener class ULongGameEventListener The long game event listener class Vector2GameEventListener The Vector2 game event listener class Vector3GameEventListener The vector3 game event listener class Vector4GameEventListener The vector4 game event listener class Interfaces IGameEventListener Interface to Implement for an Object to listen to IGameEvent IGameEventListener<T> Interface to Implement for an Object to listen to IGameEvent<T> that takes one parameter. IGameEventListener<T1, T2> Interface to Implement for an Object to listen to IGameEvent<T> that takes one parameter."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener.html",
    "title": "| Core Framework Documentation IGameEventListener",
    "keywords": "IGameEventListener Interface in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public interface IGameEventListener Description Interface to Implement for an Object to listen to IGameEvent Methods OnEventRaised() void OnEventRaised() Description Ons the event raised"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener-1.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener-1.html",
    "title": "| Core Framework Documentation IGameEventListener<T>",
    "keywords": "IGameEventListener<T> Interface in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public interface IGameEventListener<in T> Description Interface to Implement for an Object to listen to IGameEvent<T> that takes one parameter. Type Parameters T Methods OnEventRaised(T) void OnEventRaised(T value) Parameters T value The value Description Ons the event raised using the specified value"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IGameEventListener-2.html",
    "title": "| Core Framework Documentation IGameEventListener<T1, T2>",
    "keywords": "IGameEventListener<T1, T2> Interface in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public interface IGameEventListener<in T1, in T2> Description Interface to Implement for an Object to listen to IGameEvent<T> that takes one parameter. Type Parameters T1 T2 Methods OnEventRaised(T1, T2) void OnEventRaised(T1 value1, T2 value2) Parameters T1 value1 T2 value2 Description Ons the event raised using the specified value"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IntGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.IntGameEventListener.html",
    "title": "| Core Framework Documentation IntGameEventListener",
    "keywords": "IntGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class IntGameEventListener : UnityGameEventListener<int, IntGameEvent, IntUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Int32 , IntGameEvent , IntUnityEvent > IntGameEventListener Description The int game event listener class Inherited Members UnityGameEventListener<Int32, IntGameEvent, IntUnityEvent>.OnEventRaised(Int32) UnityGameEventListener<Int32, IntGameEvent, IntUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.LayerMaskGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.LayerMaskGameEventListener.html",
    "title": "| Core Framework Documentation LayerMaskGameEventListener",
    "keywords": "LayerMaskGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class LayerMaskGameEventListener : UnityGameEventListener<LayerMask, LayerMaskGameEvent, LayerMaskUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < LayerMask , LayerMaskGameEvent , LayerMaskUnityEvent > LayerMaskGameEventListener Description The layer mask game event listener class Inherited Members UnityGameEventListener<LayerMask, LayerMaskGameEvent, LayerMaskUnityEvent>.OnEventRaised(LayerMask) UnityGameEventListener<LayerMask, LayerMaskGameEvent, LayerMaskUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.LongGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.LongGameEventListener.html",
    "title": "| Core Framework Documentation LongGameEventListener",
    "keywords": "LongGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class LongGameEventListener : UnityGameEventListener<long, LongGameEvent, LongUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Int64 , LongGameEvent , LongUnityEvent > LongGameEventListener Description The long game event listener class Inherited Members UnityGameEventListener<Int64, LongGameEvent, LongUnityEvent>.OnEventRaised(Int64) UnityGameEventListener<Int64, LongGameEvent, LongUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ObjectGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ObjectGameEventListener.html",
    "title": "| Core Framework Documentation ObjectGameEventListener",
    "keywords": "ObjectGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class ObjectGameEventListener : UnityGameEventListener<Object, ObjectGameEvent, ObjectUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Object , ObjectGameEvent , ObjectUnityEvent > ObjectGameEventListener Description The object game event listener class Inherited Members UnityGameEventListener<Object, ObjectGameEvent, ObjectUnityEvent>.OnEventRaised(Object) UnityGameEventListener<Object, ObjectGameEvent, ObjectUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.QuaternionGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.QuaternionGameEventListener.html",
    "title": "| Core Framework Documentation QuaternionGameEventListener",
    "keywords": "QuaternionGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class QuaternionGameEventListener : UnityGameEventListener<Quaternion, QuaternionGameEvent, QuaternionUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Quaternion , QuaternionGameEvent , QuaternionUnityEvent > QuaternionGameEventListener Description The quaternion game event listener class Inherited Members UnityGameEventListener<Quaternion, QuaternionGameEvent, QuaternionUnityEvent>.OnEventRaised(Quaternion) UnityGameEventListener<Quaternion, QuaternionGameEvent, QuaternionUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.SByteGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.SByteGameEventListener.html",
    "title": "| Core Framework Documentation SByteGameEventListener",
    "keywords": "SByteGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class SByteGameEventListener : UnityGameEventListener<sbyte, SByteGameEvent, SByteUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.SByte , SByteGameEvent , SByteUnityEvent > SByteGameEventListener Description The byte game event listener class Inherited Members UnityGameEventListener<SByte, SByteGameEvent, SByteUnityEvent>.OnEventRaised(SByte) UnityGameEventListener<SByte, SByteGameEvent, SByteUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.SceneGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.SceneGameEventListener.html",
    "title": "| Core Framework Documentation SceneGameEventListener",
    "keywords": "SceneGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class SceneGameEventListener : UnityGameEventListener<SceneInfo, SceneGameEvent, SceneUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < SceneInfo , SceneGameEvent , SceneUnityEvent > SceneGameEventListener Description The scene game event listener class Inherited Members UnityGameEventListener<SceneInfo, SceneGameEvent, SceneUnityEvent>.OnEventRaised(SceneInfo) UnityGameEventListener<SceneInfo, SceneGameEvent, SceneUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ShortGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ShortGameEventListener.html",
    "title": "| Core Framework Documentation ShortGameEventListener",
    "keywords": "ShortGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class ShortGameEventListener : UnityGameEventListener<short, ShortGameEvent, ShortUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.Int16 , ShortGameEvent , ShortUnityEvent > ShortGameEventListener Description The short game event listener class Inherited Members UnityGameEventListener<Int16, ShortGameEvent, ShortUnityEvent>.OnEventRaised(Int16) UnityGameEventListener<Int16, ShortGameEvent, ShortUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.StringGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.StringGameEventListener.html",
    "title": "| Core Framework Documentation StringGameEventListener",
    "keywords": "StringGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class StringGameEventListener : UnityGameEventListener<string, StringGameEvent, StringUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.String , StringGameEvent , StringUnityEvent > StringGameEventListener Description The string game event listener class Inherited Members UnityGameEventListener<String, StringGameEvent, StringUnityEvent>.OnEventRaised(String) UnityGameEventListener<String, StringGameEvent, StringUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.UIntGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.UIntGameEventListener.html",
    "title": "| Core Framework Documentation UIntGameEventListener",
    "keywords": "UIntGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class UIntGameEventListener : UnityGameEventListener<uint, UIntGameEvent, UIntUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.UInt32 , UIntGameEvent , UIntUnityEvent > UIntGameEventListener Description The int game event listener class Inherited Members UnityGameEventListener<UInt32, UIntGameEvent, UIntUnityEvent>.OnEventRaised(UInt32) UnityGameEventListener<UInt32, UIntGameEvent, UIntUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ULongGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.ULongGameEventListener.html",
    "title": "| Core Framework Documentation ULongGameEventListener",
    "keywords": "ULongGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class ULongGameEventListener : UnityGameEventListener<ulong, ULongGameEvent, ULongUnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < System.UInt64 , ULongGameEvent , ULongUnityEvent > ULongGameEventListener Description The long game event listener class Inherited Members UnityGameEventListener<UInt64, ULongGameEvent, ULongUnityEvent>.OnEventRaised(UInt64) UnityGameEventListener<UInt64, ULongGameEvent, ULongUnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector2GameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector2GameEventListener.html",
    "title": "| Core Framework Documentation Vector2GameEventListener",
    "keywords": "Vector2GameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class Vector2GameEventListener : UnityGameEventListener<Vector2, Vector2GameEvent, Vector2UnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Vector2 , Vector2GameEvent , Vector2UnityEvent > Vector2GameEventListener Description The Vector2 game event listener class Inherited Members UnityGameEventListener<Vector2, Vector2GameEvent, Vector2UnityEvent>.OnEventRaised(Vector2) UnityGameEventListener<Vector2, Vector2GameEvent, Vector2UnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector3GameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector3GameEventListener.html",
    "title": "| Core Framework Documentation Vector3GameEventListener",
    "keywords": "Vector3GameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class Vector3GameEventListener : UnityGameEventListener<Vector3, Vector3GameEvent, Vector3UnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Vector3 , Vector3GameEvent , Vector3UnityEvent > Vector3GameEventListener Description The vector3 game event listener class Inherited Members UnityGameEventListener<Vector3, Vector3GameEvent, Vector3UnityEvent>.OnEventRaised(Vector3) UnityGameEventListener<Vector3, Vector3GameEvent, Vector3UnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector4GameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Listeners.Vector4GameEventListener.html",
    "title": "| Core Framework Documentation Vector4GameEventListener",
    "keywords": "Vector4GameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events.Listeners public sealed class Vector4GameEventListener : UnityGameEventListener<Vector4, Vector4GameEvent, Vector4UnityEvent> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener < Vector4 , Vector4GameEvent , Vector4UnityEvent > Vector4GameEventListener Description The vector4 game event listener class Inherited Members UnityGameEventListener<Vector4, Vector4GameEvent, Vector4UnityEvent>.OnEventRaised(Vector4) UnityGameEventListener<Vector4, Vector4GameEvent, Vector4UnityEvent>.OnEventRaised() See Also UnityGameEventListener <TType, TEvent, TResponse>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.LongGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.LongGameEvent.html",
    "title": "| Core Framework Documentation LongGameEvent",
    "keywords": "LongGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class LongGameEvent : BaseGameEvent<long>, IGameEvent, IGameEvent<long> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Int64 > LongGameEvent Description Represents a Scriptable Object game event that passes a long (System.Int64) parameter. Remarks This event type is suitable when you need to pass a large integer value (up to 64 bits) through your game's event system. It can be used in scenarios that involve large numeric computations or when interacting with systems that require extended numerical ranges, such as certain score or currency systems. Inherited Members BaseGameEvent<Int64>.Raise(Int64) BaseGameEvent<Int64>.AddListener(IGameEventListener<Int64>) BaseGameEvent<Int64>.RemoveListener(IGameEventListener<Int64>) BaseGameEvent<Int64>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.LongUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.LongUnityEvent.html",
    "title": "| Core Framework Documentation LongUnityEvent",
    "keywords": "LongUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class LongUnityEvent : UnityEvent<long> Inheritance System.Object LongUnityEvent Description The long unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ObjectGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ObjectGameEvent.html",
    "title": "| Core Framework Documentation ObjectGameEvent",
    "keywords": "ObjectGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ObjectGameEvent : BaseGameEvent<Object>, IGameEvent, IGameEvent<Object> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Object > ObjectGameEvent Description A Game Event that takes a Unity Object as its parameter. Remarks This event can be used to pass any Unity Object reference, allowing for a wide range of uses, such as sending assets, components, or scriptable objects through the event system. It provides a flexible way to notify listeners about generic object-related occurrences. Inherited Members BaseGameEvent<Object>.Raise(Object) BaseGameEvent<Object>.AddListener(IGameEventListener<Object>) BaseGameEvent<Object>.RemoveListener(IGameEventListener<Object>) BaseGameEvent<Object>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ObjectUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ObjectUnityEvent.html",
    "title": "| Core Framework Documentation ObjectUnityEvent",
    "keywords": "ObjectUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ObjectUnityEvent : UnityEvent<Object> Inheritance System.Object ObjectUnityEvent Description The object unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.QuaternionGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.QuaternionGameEvent.html",
    "title": "| Core Framework Documentation QuaternionGameEvent",
    "keywords": "QuaternionGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class QuaternionGameEvent : BaseGameEvent<Quaternion>, IGameEvent, IGameEvent<Quaternion> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Quaternion > QuaternionGameEvent Description A Game Event that takes a Quaternion as its parameter. Remarks This event can be used to communicate rotation-related actions across different systems and components. For example, it can be used to signal rotation changes that need to be applied to game objects, or to synchronize rotational states in a networked game. Inherited Members BaseGameEvent<Quaternion>.Raise(Quaternion) BaseGameEvent<Quaternion>.AddListener(IGameEventListener<Quaternion>) BaseGameEvent<Quaternion>.RemoveListener(IGameEventListener<Quaternion>) BaseGameEvent<Quaternion>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.QuaternionUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.QuaternionUnityEvent.html",
    "title": "| Core Framework Documentation QuaternionUnityEvent",
    "keywords": "QuaternionUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class QuaternionUnityEvent : UnityEvent<Quaternion> Inheritance System.Object QuaternionUnityEvent Description The quaternion unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.SByteGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.SByteGameEvent.html",
    "title": "| Core Framework Documentation SByteGameEvent",
    "keywords": "SByteGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class SByteGameEvent : BaseGameEvent<sbyte>, IGameEvent, IGameEvent<sbyte> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.SByte > SByteGameEvent Description Represents a Scriptable Object game event that passes an sbyte (System.SByte) parameter. Remarks Use this event type when you need to pass a signed byte (-128 to 127) as a parameter within your game events. This could be useful for small numeric values that are used frequently and need to be managed through the event system. Inherited Members BaseGameEvent<SByte>.Raise(SByte) BaseGameEvent<SByte>.AddListener(IGameEventListener<SByte>) BaseGameEvent<SByte>.RemoveListener(IGameEventListener<SByte>) BaseGameEvent<SByte>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.SByteUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.SByteUnityEvent.html",
    "title": "| Core Framework Documentation SByteUnityEvent",
    "keywords": "SByteUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class SByteUnityEvent : UnityEvent<sbyte> Inheritance System.Object SByteUnityEvent Description The byte unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.SceneGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.SceneGameEvent.html",
    "title": "| Core Framework Documentation SceneGameEvent",
    "keywords": "SceneGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class SceneGameEvent : BaseGameEvent<SceneInfo>, IGameEvent, IGameEvent<SceneInfo> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < SceneInfo > SceneGameEvent Description A Game Event that takes a SceneInfo as its parameter. Remarks This event is typically used to trigger scene-related actions such as loading, unloading, or transitioning between scenes. The SceneInfo parameter can carry necessary data for scene management systems to handle these actions appropriately. Inherited Members BaseGameEvent<SceneInfo>.Raise(SceneInfo) BaseGameEvent<SceneInfo>.AddListener(IGameEventListener<SceneInfo>) BaseGameEvent<SceneInfo>.RemoveListener(IGameEventListener<SceneInfo>) BaseGameEvent<SceneInfo>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.SceneUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.SceneUnityEvent.html",
    "title": "| Core Framework Documentation SceneUnityEvent",
    "keywords": "SceneUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class SceneUnityEvent : UnityEvent<SceneInfo> Inheritance System.Object SceneUnityEvent Description The scene unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ShortGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ShortGameEvent.html",
    "title": "| Core Framework Documentation ShortGameEvent",
    "keywords": "ShortGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ShortGameEvent : BaseGameEvent<short>, IGameEvent, IGameEvent<short> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.Int16 > ShortGameEvent Description A game event that can be raised with a short (System.Int16) parameter. Remarks This class allows the creation of events that specifically handle the short data type. Events of this type could be used to pass numeric values within the range of short, for instance, scores, item counts, or other game metrics that do not exceed the short value limits. Inherited Members BaseGameEvent<Int16>.Raise(Int16) BaseGameEvent<Int16>.AddListener(IGameEventListener<Int16>) BaseGameEvent<Int16>.RemoveListener(IGameEventListener<Int16>) BaseGameEvent<Int16>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ShortUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ShortUnityEvent.html",
    "title": "| Core Framework Documentation ShortUnityEvent",
    "keywords": "ShortUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ShortUnityEvent : UnityEvent<short> Inheritance System.Object ShortUnityEvent Description The short unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.StringGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.StringGameEvent.html",
    "title": "| Core Framework Documentation StringGameEvent",
    "keywords": "StringGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class StringGameEvent : BaseGameEvent<string>, IGameEvent, IGameEvent<string> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.String > StringGameEvent Description Represents a Game Event that can be raised with a string parameter. This Game Event can be created via the Unity Inspector with the \"CreateAssetMenu\" attribute. Remarks Use this class to create events that need to send a string value to all listeners when the event is raised. This could be useful for sending messages, identifiers, or other text-based data. Inherited Members BaseGameEvent<String>.Raise(String) BaseGameEvent<String>.AddListener(IGameEventListener<String>) BaseGameEvent<String>.RemoveListener(IGameEventListener<String>) BaseGameEvent<String>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.StringUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.StringUnityEvent.html",
    "title": "| Core Framework Documentation StringUnityEvent",
    "keywords": "StringUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class StringUnityEvent : UnityEvent<string> Inheritance System.Object StringUnityEvent Description The string unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UIntGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UIntGameEvent.html",
    "title": "| Core Framework Documentation UIntGameEvent",
    "keywords": "UIntGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class UIntGameEvent : BaseGameEvent<uint>, IGameEvent, IGameEvent<uint> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.UInt32 > UIntGameEvent Description A ScriptableObject event that can be raised with an unsigned integer (uint) parameter. This event can be instantiated via the Unity Editor by using the provided \"Create\" asset menu. Remarks This event type is suitable for scenarios where an event needs to pass along a piece of data of type uint when it is raised. Listeners can be added to respond specifically to this data type. Inherited Members BaseGameEvent<UInt32>.Raise(UInt32) BaseGameEvent<UInt32>.AddListener(IGameEventListener<UInt32>) BaseGameEvent<UInt32>.RemoveListener(IGameEventListener<UInt32>) BaseGameEvent<UInt32>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UIntUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UIntUnityEvent.html",
    "title": "| Core Framework Documentation UIntUnityEvent",
    "keywords": "UIntUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class UIntUnityEvent : UnityEvent<uint> Inheritance System.Object UIntUnityEvent Description The int unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ULongGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ULongGameEvent.html",
    "title": "| Core Framework Documentation ULongGameEvent",
    "keywords": "ULongGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ULongGameEvent : BaseGameEvent<ulong>, IGameEvent, IGameEvent<ulong> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.UInt64 > ULongGameEvent Description Represents a ScriptableObject-based event that can be raised with an unsigned long (ulong) parameter. This event can be created via the Unity Editor by using the \"Create\" asset menu. Remarks Use this event to pass ulong data when the event is raised. To respond to this event, create a listener that listens for ULongGameEvent and register it with the event. Inherited Members BaseGameEvent<UInt64>.Raise(UInt64) BaseGameEvent<UInt64>.AddListener(IGameEventListener<UInt64>) BaseGameEvent<UInt64>.RemoveListener(IGameEventListener<UInt64>) BaseGameEvent<UInt64>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.ULongUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.ULongUnityEvent.html",
    "title": "| Core Framework Documentation ULongUnityEvent",
    "keywords": "ULongUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class ULongUnityEvent : UnityEvent<ulong> Inheritance System.Object ULongUnityEvent Description The long unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener.html",
    "title": "| Core Framework Documentation UnityGameEventListener",
    "keywords": "UnityGameEventListener Class in CoreFramework.ScriptableObjectArchitecture.Events public abstract class UnityGameEventListener : BaseMonoBehaviour Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener<TEvent, TResponse> UnityGameEventListener<TType, TEvent, TResponse> UnityGameEventListener<TType1, TType2, TEvent, TResponse> Description The unity game event listener class See Also BaseMonoBehaviour"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-2.html",
    "title": "| Core Framework Documentation UnityGameEventListener<TEvent, TResponse>",
    "keywords": "UnityGameEventListener<TEvent, TResponse> Class in CoreFramework.ScriptableObjectArchitecture.Events public abstract class UnityGameEventListener<TEvent, TResponse> : UnityGameEventListener where TEvent : class, IGameEvent where TResponse : UnityEvent Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener<TEvent, TResponse> GameEventListener Description The unity game event listener class Type Parameters TEvent TResponse Methods OnEventRaised() public void OnEventRaised() Description See Also UnityGameEventListener"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-3.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-3.html",
    "title": "| Core Framework Documentation UnityGameEventListener<TType, TEvent, TResponse>",
    "keywords": "UnityGameEventListener<TType, TEvent, TResponse> Class in CoreFramework.ScriptableObjectArchitecture.Events public abstract class UnityGameEventListener<TType, TEvent, TResponse> : UnityGameEventListener where TEvent : class, IGameEvent<TType> where TResponse : UnityEvent<TType> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener<TType, TEvent, TResponse> AudioClipGameEventListener BoolGameEventListener BoundsGameEventListener ByteGameEventListener Color32GameEventListener ColorGameEventListener DoubleGameEventListener FloatGameEventListener GameObjectGameEventListener IntGameEventListener LayerMaskGameEventListener LongGameEventListener ObjectGameEventListener QuaternionGameEventListener SByteGameEventListener SceneGameEventListener ShortGameEventListener StringGameEventListener UIntGameEventListener ULongGameEventListener Vector2GameEventListener Vector3GameEventListener Vector4GameEventListener Description The unity game event listener class Type Parameters TType TEvent TResponse Methods OnEventRaised() protected void OnEventRaised() Description Ons the event raised OnEventRaised(TType) public void OnEventRaised(TType value) Parameters TType value Description See Also UnityGameEventListener"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-4.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UnityGameEventListener-4.html",
    "title": "| Core Framework Documentation UnityGameEventListener<TType1, TType2, TEvent, TResponse>",
    "keywords": "UnityGameEventListener<TType1, TType2, TEvent, TResponse> Class in CoreFramework.ScriptableObjectArchitecture.Events public abstract class UnityGameEventListener<TType1, TType2, TEvent, TResponse> : UnityGameEventListener where TEvent : class, IGameEvent<TType1, TType2> where TResponse : UnityEvent<TType1, TType2> Inheritance System.Object BaseMonoBehaviour UnityGameEventListener UnityGameEventListener<TType1, TType2, TEvent, TResponse> Description Type Parameters TType1 TType2 TEvent TResponse Methods OnEventRaised() protected void OnEventRaised() Description Ons the event raised OnEventRaised(TType1, TType2) public void OnEventRaised(TType1 value1, TType2 value2) Parameters TType1 value1 TType2 value2 Description"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UShortGameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UShortGameEvent.html",
    "title": "| Core Framework Documentation UShortGameEvent",
    "keywords": "UShortGameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class UShortGameEvent : BaseGameEvent<ushort>, IGameEvent, IGameEvent<ushort> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < System.UInt16 > UShortGameEvent Description Represents a ScriptableObject-based event that can be raised with an unsigned short (ushort) parameter. This event can be created via the Unity Editor by using the \"Create\" asset menu. Remarks Use this event to pass ushort data when the event is raised. To respond to this event, create a listener that listens for UShortGameEvent and register it with the event. Inherited Members BaseGameEvent<UInt16>.Raise(UInt16) BaseGameEvent<UInt16>.AddListener(IGameEventListener<UInt16>) BaseGameEvent<UInt16>.RemoveListener(IGameEventListener<UInt16>) BaseGameEvent<UInt16>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.UShortUnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.UShortUnityEvent.html",
    "title": "| Core Framework Documentation UShortUnityEvent",
    "keywords": "UShortUnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class UShortUnityEvent : UnityEvent<ushort> Inheritance System.Object UShortUnityEvent Description The short unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector2GameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector2GameEvent.html",
    "title": "| Core Framework Documentation Vector2GameEvent",
    "keywords": "Vector2GameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector2GameEvent : BaseGameEvent<Vector2>, IGameEvent, IGameEvent<Vector2> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Vector2 > Vector2GameEvent Description A Game Event that takes a Vector2 as its parameter. Remarks This event can be used to communicate two-dimensional vector data, such as positions, directions, or other 2D-related information, facilitating the interaction between systems or components that operate within a two-dimensional space. Inherited Members BaseGameEvent<Vector2>.Raise(Vector2) BaseGameEvent<Vector2>.AddListener(IGameEventListener<Vector2>) BaseGameEvent<Vector2>.RemoveListener(IGameEventListener<Vector2>) BaseGameEvent<Vector2>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector2UnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector2UnityEvent.html",
    "title": "| Core Framework Documentation Vector2UnityEvent",
    "keywords": "Vector2UnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector2UnityEvent : UnityEvent<Vector2> Inheritance System.Object Vector2UnityEvent Description The Vector 2 unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector3GameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector3GameEvent.html",
    "title": "| Core Framework Documentation Vector3GameEvent",
    "keywords": "Vector3GameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector3GameEvent : BaseGameEvent<Vector3>, IGameEvent, IGameEvent<Vector3> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Vector3 > Vector3GameEvent Description A Game Event that takes a Vector3 as its parameter. Remarks This event can be used for transmitting 3D coordinates, directions, or scales within the game, allowing for loose coupling between different systems that need to share three-dimensional vector data. Inherited Members BaseGameEvent<Vector3>.Raise(Vector3) BaseGameEvent<Vector3>.AddListener(IGameEventListener<Vector3>) BaseGameEvent<Vector3>.RemoveListener(IGameEventListener<Vector3>) BaseGameEvent<Vector3>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector3UnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector3UnityEvent.html",
    "title": "| Core Framework Documentation Vector3UnityEvent",
    "keywords": "Vector3UnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector3UnityEvent : UnityEvent<Vector3> Inheritance System.Object Vector3UnityEvent Description The vector 3 unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector4GameEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector4GameEvent.html",
    "title": "| Core Framework Documentation Vector4GameEvent",
    "keywords": "Vector4GameEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector4GameEvent : BaseGameEvent<Vector4>, IGameEvent, IGameEvent<Vector4> Inheritance System.Object BaseObject BaseGameEvent BaseGameEvent < Vector4 > Vector4GameEvent Description A Game Event that takes a Vector4 as its parameter. Remarks Use this event to pass Vector4 data such as positions, directions with magnitude, or any other four-dimensional data throughout your game system. Inherited Members BaseGameEvent<Vector4>.Raise(Vector4) BaseGameEvent<Vector4>.AddListener(IGameEventListener<Vector4>) BaseGameEvent<Vector4>.RemoveListener(IGameEventListener<Vector4>) BaseGameEvent<Vector4>.Raise() BaseGameEvent.AddListener(IGameEventListener) BaseGameEvent.RemoveListener(IGameEventListener) BaseGameEvent.RemoveAll()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector4UnityEvent.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Events.Vector4UnityEvent.html",
    "title": "| Core Framework Documentation Vector4UnityEvent",
    "keywords": "Vector4UnityEvent Class in CoreFramework.ScriptableObjectArchitecture.Events public sealed class Vector4UnityEvent : UnityEvent<Vector4> Inheritance System.Object Vector4UnityEvent Description The vector 4 unity event class"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.html",
    "title": "| Core Framework Documentation CoreFramework.ScriptableObjectArchitecture",
    "keywords": "Namespace CoreFramework.ScriptableObjectArchitecture Classes BaseMonoBehaviour Base class for all MonoBehaviours in the Scriptable Object Architecture framework. This class can be inherited by other MonoBehaviour scripts that are part of the ScriptableObject system. It can be used to define shared functionality or common properties that are utilized by various components within the architecture. BaseObject A base class for creating Scriptable Objects that are part of the Scriptable Object Architecture framework. Inherits from the Unity Engine's ScriptableObject class and can be extended to include common functionality for all custom Scriptable Objects within the framework. SceneInfo A container for information about a Unity scene that can be used as a ScriptableObject. This allows scenes to be referenced as assets within the Unity editor and be used in a type-safe manner. Utility Provides a collection of constants for organizing assets within the Unity Editor's menus."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.AnimationCurveReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.AnimationCurveReference.html",
    "title": "| Core Framework Documentation AnimationCurveReference",
    "keywords": "AnimationCurveReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class AnimationCurveReference : BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent, AnimationCurveUnityEvent> Inheritance System.Object BaseReference < AnimationCurve , AnimationCurveVariable , AnimationCurveGameEvent > BaseReference < AnimationCurve , AnimationCurveVariable , AnimationCurveGameEvent , AnimationCurveUnityEvent > AnimationCurveReference Description The Animation Curve Variable Reference. Inherited Members BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent, AnimationCurveUnityEvent>.Raise(AnimationCurve) BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.selection BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.constantValue BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.onValueChangeGameEvent BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.variable BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.Value BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.MaxValue BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.MinValue BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.SetInitialValue(AnimationCurve) BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.IsValueDefined BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.Raise() BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.Raise(AnimationCurve) BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.CreateCopy() BaseReference<AnimationCurve, AnimationCurveVariable, AnimationCurveGameEvent>.ToString() Constructors AnimationCurveReference() public AnimationCurveReference() Description Initializes a new instance of the AnimationCurveReference class AnimationCurveReference(AnimationCurve) public AnimationCurveReference(AnimationCurve value) Parameters AnimationCurve value The value Description Initializes a new instance of the AnimationCurveReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.AudioClipReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.AudioClipReference.html",
    "title": "| Core Framework Documentation AudioClipReference",
    "keywords": "AudioClipReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class AudioClipReference : BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent, AudioClipUnityEvent> Inheritance System.Object BaseReference < AudioClip , AudioClipVariable , AudioClipGameEvent > BaseReference < AudioClip , AudioClipVariable , AudioClipGameEvent , AudioClipUnityEvent > AudioClipReference Description The Audio Clip Variable Reference. Inherited Members BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent, AudioClipUnityEvent>.Raise(AudioClip) BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.selection BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.constantValue BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.onValueChangeGameEvent BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.variable BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.Value BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.MaxValue BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.MinValue BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.SetInitialValue(AudioClip) BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.IsValueDefined BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.Raise() BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.Raise(AudioClip) BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.CreateCopy() BaseReference<AudioClip, AudioClipVariable, AudioClipGameEvent>.ToString() Constructors AudioClipReference() public AudioClipReference() Description Initializes a new instance of the AudioClipReference class AudioClipReference(AudioClip) public AudioClipReference(AudioClip value) Parameters AudioClip value The value Description Initializes a new instance of the AudioClipReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-3.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-3.html",
    "title": "| Core Framework Documentation BaseReference<TBase, TVariable, TEvent>",
    "keywords": "BaseReference<TBase, TVariable, TEvent> Class in CoreFramework.ScriptableObjectArchitecture.References [Serializable] public class BaseReference<TBase, TVariable, TEvent> where TVariable : BaseVariable<TBase, TEvent> where TEvent : IGameEvent<TBase> Inheritance System.Object BaseReference<TBase, TVariable, TEvent> BaseReference<TBase, TVariable, TEvent, TUEvent> Description Base Class for all Reference Variables That have a type. Is a Game Event that gets raised if the variable changes. Type Parameters TBase The type that this variable is. TVariable TEvent Constructors BaseReference() public BaseReference() Description Initializes a new instance of the BaseReference<TBase, TVariable, TEvent> class BaseReference(TBase) public BaseReference(TBase baseValue) Parameters TBase baseValue The base value Description Initializes a new instance of the BaseReference<TBase, TVariable, TEvent> class Fields constantValue protected TBase constantValue Field Value TBase constantValue The constant value. Description The constant value. onValueChangeGameEvent protected TEvent onValueChangeGameEvent Field Value TEvent onValueChangeGameEvent The change event. Description The change event. selection protected BaseReference<TBase, TVariable, TEvent>.Selection selection Field Value BaseReference.Selection <> selection The value. Description The value. variable protected TVariable variable Field Value TVariable variable The variable. Description The variable. Properties IsValueDefined public bool IsValueDefined { get; } Property Value System.Boolean IsValueDefined Is the value defined. Description Is the value defined. MaxValue public TBase MaxValue { get; } Property Value TBase MaxValue Description MinValue public TBase MinValue { get; } Property Value TBase MinValue Description Value public TBase Value { get; set; } Property Value TBase Value Gets or sets the value of the value. Description Gets or sets the value of the value. Methods CreateCopy() public BaseReference<TBase, TVariable, TEvent> CreateCopy() Returns BaseReference <TBase, TVariable, TEvent> The copy Description Creates the copy Raise() protected void Raise() Description Raises this instance. Raise(TBase) protected virtual void Raise(TBase value) Parameters TBase value The value. Description Raises the value. SetInitialValue(TBase) public void SetInitialValue(TBase value) Parameters TBase value The value. Description Sets the initial value using the specified value. ToString() Overrides System.Object.ToString() public override string ToString() Returns System.String Description Operators Implicit(TBase to BaseReference<TBase, TVariable, TEvent>) public static implicit operator BaseReference<TBase, TVariable, TEvent>(TBase value) Parameters TBase value Returns BaseReference <TBase, TVariable, TEvent> Description Implicit(TVariable to BaseReference<TBase, TVariable, TEvent>) public static implicit operator BaseReference<TBase, TVariable, TEvent>(TVariable variable) Parameters TVariable variable Returns BaseReference <TBase, TVariable, TEvent> Description Implicit(BaseReference<TBase, TVariable, TEvent> to TBase) public static implicit operator TBase(BaseReference<TBase, TVariable, TEvent> variable) Parameters BaseReference <TBase, TVariable, TEvent> variable The variable pf the type that you want to get the value from. Returns TBase The value of the variable. Description Creates a value from Variable Object, Remarks For more information on Implicit Operator Overloading see - https://www.codeproject.com/Articles/15191/Understanding-Implicit-Operator-Overloading-in-C https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators Examples int count; IntVariable countVariable; // IntVariable is a BaseVariable of type int. public class IntVariable : BaseVariable{int, IntGameEvent} public void StartCounting() { count = countVariable; } Implicit(BaseReference<TBase, TVariable, TEvent> to String) public static implicit operator string (BaseReference<TBase, TVariable, TEvent> variable) Parameters BaseReference <TBase, TVariable, TEvent> variable Returns System.String Description"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-3.Selection.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-3.Selection.html",
    "title": "| Core Framework Documentation BaseReference<TBase, TVariable, TEvent>.Selection",
    "keywords": "BaseReference<TBase, TVariable, TEvent>.Selection Enum in CoreFramework.ScriptableObjectArchitecture.References public enum Selection Description The Selection enum ScriptableObject The Scriptable Object Selection Value The Value Selection"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-4.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.BaseReference-4.html",
    "title": "| Core Framework Documentation BaseReference<TBase, TVariable, TEvent, TUEvent>",
    "keywords": "BaseReference<TBase, TVariable, TEvent, TUEvent> Class in CoreFramework.ScriptableObjectArchitecture.References [Serializable] public class BaseReference<TBase, TVariable, TEvent, TUEvent> : BaseReference<TBase, TVariable, TEvent> where TVariable : BaseVariable<TBase, TEvent> where TEvent : IGameEvent<TBase> where TUEvent : UnityEvent<TBase> Inheritance System.Object BaseReference <TBase, TVariable, TEvent> BaseReference<TBase, TVariable, TEvent, TUEvent> AnimationCurveReference AudioClipReference BoolReference BoundsReference ByteReference CharReference Color32Reference ColorReference DoubleReference FloatReference GameObjectReference IntReference LayerMaskReference LongReference ObjectReference QuaternionReference SByteReference SceneReference ShortReference StringReference UIntReference ULongReference UShortReference Vector2Reference Vector3Reference Vector4Reference Description Base Class for all Reference Variables That have a type. Is a Game Event that gets raised if the variable changes. Also contains a Unity Event that gets raised if the value changes. This is the class that is used for all Reference Variables. Inherited Members BaseReference<TBase, TVariable, TEvent>.selection BaseReference<TBase, TVariable, TEvent>.constantValue BaseReference<TBase, TVariable, TEvent>.onValueChangeGameEvent BaseReference<TBase, TVariable, TEvent>.variable BaseReference<TBase, TVariable, TEvent>.Value BaseReference<TBase, TVariable, TEvent>.MaxValue BaseReference<TBase, TVariable, TEvent>.MinValue BaseReference<TBase, TVariable, TEvent>.SetInitialValue(TBase) BaseReference<TBase, TVariable, TEvent>.IsValueDefined BaseReference<TBase, TVariable, TEvent>.Raise() BaseReference<TBase, TVariable, TEvent>.Raise(TBase) BaseReference<TBase, TVariable, TEvent>.CreateCopy() BaseReference<TBase, TVariable, TEvent>.ToString() Type Parameters TBase The type that this variable is. TVariable TEvent The Game Event of variable type to use. TUEvent The Unity Event to use. Constructors BaseReference() public BaseReference() Description Initializes a new instance of the BaseReference<TBase, TVariable, TEvent, TUEvent> class BaseReference(TBase) public BaseReference(TBase baseValue) Parameters TBase baseValue The base value Description Initializes a new instance of the BaseReference<TBase, TVariable, TEvent, TUEvent> class Methods Raise(TBase) Overrides CoreFramework.ScriptableObjectArchitecture.References.BaseReference<TBase, TVariable, TEvent>.Raise(TBase) protected override void Raise(TBase value) Parameters TBase value The value. Description Raises the value. Operators Implicit(TBase to BaseReference<TBase, TVariable, TEvent, TUEvent>) public static implicit operator BaseReference<TBase, TVariable, TEvent, TUEvent>(TBase value) Parameters TBase value Returns BaseReference <TBase, TVariable, TEvent, TUEvent> Description Implicit(TVariable to BaseReference<TBase, TVariable, TEvent, TUEvent>) public static implicit operator BaseReference<TBase, TVariable, TEvent, TUEvent>(TVariable variable) Parameters TVariable variable Returns BaseReference <TBase, TVariable, TEvent, TUEvent> Description Implicit(BaseReference<TBase, TVariable, TEvent, TUEvent> to TBase) public static implicit operator TBase(BaseReference<TBase, TVariable, TEvent, TUEvent> variable) Parameters BaseReference <TBase, TVariable, TEvent, TUEvent> variable Returns TBase Description Implicit(BaseReference<TBase, TVariable, TEvent, TUEvent> to String) public static implicit operator string (BaseReference<TBase, TVariable, TEvent, TUEvent> variable) Parameters BaseReference <TBase, TVariable, TEvent, TUEvent> variable Returns System.String Description"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.BoolReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.BoolReference.html",
    "title": "| Core Framework Documentation BoolReference",
    "keywords": "BoolReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class BoolReference : BaseReference<bool, BoolVariable, BoolGameEvent, BoolUnityEvent> Inheritance System.Object BaseReference < System.Boolean , BoolVariable , BoolGameEvent > BaseReference < System.Boolean , BoolVariable , BoolGameEvent , BoolUnityEvent > BoolReference Description The bool Variable Reference. Inherited Members BaseReference<Boolean, BoolVariable, BoolGameEvent, BoolUnityEvent>.Raise(Boolean) BaseReference<Boolean, BoolVariable, BoolGameEvent>.selection BaseReference<Boolean, BoolVariable, BoolGameEvent>.constantValue BaseReference<Boolean, BoolVariable, BoolGameEvent>.onValueChangeGameEvent BaseReference<Boolean, BoolVariable, BoolGameEvent>.variable BaseReference<Boolean, BoolVariable, BoolGameEvent>.Value BaseReference<Boolean, BoolVariable, BoolGameEvent>.MaxValue BaseReference<Boolean, BoolVariable, BoolGameEvent>.MinValue BaseReference<Boolean, BoolVariable, BoolGameEvent>.SetInitialValue(Boolean) BaseReference<Boolean, BoolVariable, BoolGameEvent>.IsValueDefined BaseReference<Boolean, BoolVariable, BoolGameEvent>.Raise() BaseReference<Boolean, BoolVariable, BoolGameEvent>.Raise(Boolean) BaseReference<Boolean, BoolVariable, BoolGameEvent>.CreateCopy() BaseReference<Boolean, BoolVariable, BoolGameEvent>.ToString() Constructors BoolReference() public BoolReference() Description Initializes a new instance of the BoolReference class BoolReference(Boolean) public BoolReference(bool value) Parameters System.Boolean value The value Description Initializes a new instance of the BoolReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.BoundsReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.BoundsReference.html",
    "title": "| Core Framework Documentation BoundsReference",
    "keywords": "BoundsReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class BoundsReference : BaseReference<Bounds, BoundsVariable, BoundsGameEvent, BoundsUnityEvent> Inheritance System.Object BaseReference < Bounds , BoundsVariable , BoundsGameEvent > BaseReference < Bounds , BoundsVariable , BoundsGameEvent , BoundsUnityEvent > BoundsReference Description The Bounds Variable Reference. Inherited Members BaseReference<Bounds, BoundsVariable, BoundsGameEvent, BoundsUnityEvent>.Raise(Bounds) BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.selection BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.constantValue BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.onValueChangeGameEvent BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.variable BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.Value BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.MaxValue BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.MinValue BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.SetInitialValue(Bounds) BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.IsValueDefined BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.Raise() BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.Raise(Bounds) BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.CreateCopy() BaseReference<Bounds, BoundsVariable, BoundsGameEvent>.ToString() Constructors BoundsReference() public BoundsReference() Description Initializes a new instance of the BoundsReference class BoundsReference(Bounds) public BoundsReference(Bounds value) Parameters Bounds value The value Description Initializes a new instance of the BoundsReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.ByteReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.ByteReference.html",
    "title": "| Core Framework Documentation ByteReference",
    "keywords": "ByteReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class ByteReference : BaseReference<byte, ByteVariable, ByteGameEvent, ByteUnityEvent> Inheritance System.Object BaseReference < System.Byte , ByteVariable , ByteGameEvent > BaseReference < System.Byte , ByteVariable , ByteGameEvent , ByteUnityEvent > ByteReference Description The Byte Variable Reference. Inherited Members BaseReference<Byte, ByteVariable, ByteGameEvent, ByteUnityEvent>.Raise(Byte) BaseReference<Byte, ByteVariable, ByteGameEvent>.selection BaseReference<Byte, ByteVariable, ByteGameEvent>.constantValue BaseReference<Byte, ByteVariable, ByteGameEvent>.onValueChangeGameEvent BaseReference<Byte, ByteVariable, ByteGameEvent>.variable BaseReference<Byte, ByteVariable, ByteGameEvent>.Value BaseReference<Byte, ByteVariable, ByteGameEvent>.MaxValue BaseReference<Byte, ByteVariable, ByteGameEvent>.MinValue BaseReference<Byte, ByteVariable, ByteGameEvent>.SetInitialValue(Byte) BaseReference<Byte, ByteVariable, ByteGameEvent>.IsValueDefined BaseReference<Byte, ByteVariable, ByteGameEvent>.Raise() BaseReference<Byte, ByteVariable, ByteGameEvent>.Raise(Byte) BaseReference<Byte, ByteVariable, ByteGameEvent>.CreateCopy() BaseReference<Byte, ByteVariable, ByteGameEvent>.ToString() Constructors ByteReference() public ByteReference() Description Initializes a new instance of the ByteReference class ByteReference(Byte) public ByteReference(byte value) Parameters System.Byte value The value Description Initializes a new instance of the ByteReference class Operators Implicit(ByteReference to Double) public static implicit operator double (ByteReference variable) Parameters ByteReference variable Returns System.Double Description Implicit(ByteReference to Int16) public static implicit operator short (ByteReference variable) Parameters ByteReference variable Returns System.Int16 Description Implicit(ByteReference to Int32) public static implicit operator int (ByteReference variable) Parameters ByteReference variable Returns System.Int32 Description Implicit(ByteReference to Int64) public static implicit operator long (ByteReference variable) Parameters ByteReference variable Returns System.Int64 Description Implicit(ByteReference to SByte) public static implicit operator sbyte (ByteReference variable) Parameters ByteReference variable Returns System.SByte Description Implicit(ByteReference to Single) public static implicit operator float (ByteReference variable) Parameters ByteReference variable Returns System.Single Description Implicit(ByteReference to UInt16) public static implicit operator ushort (ByteReference variable) Parameters ByteReference variable Returns System.UInt16 Description Implicit(ByteReference to UInt32) public static implicit operator uint (ByteReference variable) Parameters ByteReference variable Returns System.UInt32 Description Implicit(ByteReference to UInt64) public static implicit operator ulong (ByteReference variable) Parameters ByteReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.CharReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.CharReference.html",
    "title": "| Core Framework Documentation CharReference",
    "keywords": "CharReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class CharReference : BaseReference<char, CharVariable, CharGameEvent, CharUnityEvent> Inheritance System.Object BaseReference < System.Char , CharVariable , CharGameEvent > BaseReference < System.Char , CharVariable , CharGameEvent , CharUnityEvent > CharReference Description The Char Variable Reference. Inherited Members BaseReference<Char, CharVariable, CharGameEvent, CharUnityEvent>.Raise(Char) BaseReference<Char, CharVariable, CharGameEvent>.selection BaseReference<Char, CharVariable, CharGameEvent>.constantValue BaseReference<Char, CharVariable, CharGameEvent>.onValueChangeGameEvent BaseReference<Char, CharVariable, CharGameEvent>.variable BaseReference<Char, CharVariable, CharGameEvent>.Value BaseReference<Char, CharVariable, CharGameEvent>.MaxValue BaseReference<Char, CharVariable, CharGameEvent>.MinValue BaseReference<Char, CharVariable, CharGameEvent>.SetInitialValue(Char) BaseReference<Char, CharVariable, CharGameEvent>.IsValueDefined BaseReference<Char, CharVariable, CharGameEvent>.Raise() BaseReference<Char, CharVariable, CharGameEvent>.Raise(Char) BaseReference<Char, CharVariable, CharGameEvent>.CreateCopy() BaseReference<Char, CharVariable, CharGameEvent>.ToString() Constructors CharReference() public CharReference() Description Initializes a new instance of the CharReference class CharReference(Char) public CharReference(char value) Parameters System.Char value The value Description Initializes a new instance of the CharReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.Color32Reference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.Color32Reference.html",
    "title": "| Core Framework Documentation Color32Reference",
    "keywords": "Color32Reference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class Color32Reference : BaseReference<Color32, Color32Variable, Color32GameEvent, Color32UnityEvent> Inheritance System.Object BaseReference < Color32 , Color32Variable , Color32GameEvent > BaseReference < Color32 , Color32Variable , Color32GameEvent , Color32UnityEvent > Color32Reference Description The Color32 Variable Reference. Inherited Members BaseReference<Color32, Color32Variable, Color32GameEvent, Color32UnityEvent>.Raise(Color32) BaseReference<Color32, Color32Variable, Color32GameEvent>.selection BaseReference<Color32, Color32Variable, Color32GameEvent>.constantValue BaseReference<Color32, Color32Variable, Color32GameEvent>.onValueChangeGameEvent BaseReference<Color32, Color32Variable, Color32GameEvent>.variable BaseReference<Color32, Color32Variable, Color32GameEvent>.Value BaseReference<Color32, Color32Variable, Color32GameEvent>.MaxValue BaseReference<Color32, Color32Variable, Color32GameEvent>.MinValue BaseReference<Color32, Color32Variable, Color32GameEvent>.SetInitialValue(Color32) BaseReference<Color32, Color32Variable, Color32GameEvent>.IsValueDefined BaseReference<Color32, Color32Variable, Color32GameEvent>.Raise() BaseReference<Color32, Color32Variable, Color32GameEvent>.Raise(Color32) BaseReference<Color32, Color32Variable, Color32GameEvent>.CreateCopy() BaseReference<Color32, Color32Variable, Color32GameEvent>.ToString() Constructors Color32Reference() public Color32Reference() Description Initializes a new instance of the Color32Reference class Color32Reference(Color32) public Color32Reference(Color32 value) Parameters Color32 value The value Description Initializes a new instance of the Color32Reference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.ColorReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.ColorReference.html",
    "title": "| Core Framework Documentation ColorReference",
    "keywords": "ColorReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class ColorReference : BaseReference<Color, ColorVariable, ColorGameEvent, ColorUnityEvent> Inheritance System.Object BaseReference < Color , ColorVariable , ColorGameEvent > BaseReference < Color , ColorVariable , ColorGameEvent , ColorUnityEvent > ColorReference Description The Color Variable Reference. Inherited Members BaseReference<Color, ColorVariable, ColorGameEvent, ColorUnityEvent>.Raise(Color) BaseReference<Color, ColorVariable, ColorGameEvent>.selection BaseReference<Color, ColorVariable, ColorGameEvent>.constantValue BaseReference<Color, ColorVariable, ColorGameEvent>.onValueChangeGameEvent BaseReference<Color, ColorVariable, ColorGameEvent>.variable BaseReference<Color, ColorVariable, ColorGameEvent>.Value BaseReference<Color, ColorVariable, ColorGameEvent>.MaxValue BaseReference<Color, ColorVariable, ColorGameEvent>.MinValue BaseReference<Color, ColorVariable, ColorGameEvent>.SetInitialValue(Color) BaseReference<Color, ColorVariable, ColorGameEvent>.IsValueDefined BaseReference<Color, ColorVariable, ColorGameEvent>.Raise() BaseReference<Color, ColorVariable, ColorGameEvent>.Raise(Color) BaseReference<Color, ColorVariable, ColorGameEvent>.CreateCopy() BaseReference<Color, ColorVariable, ColorGameEvent>.ToString() Constructors ColorReference() public ColorReference() Description Initializes a new instance of the ColorReference class ColorReference(Color) public ColorReference(Color value) Parameters Color value The value Description Initializes a new instance of the ColorReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.DoubleReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.DoubleReference.html",
    "title": "| Core Framework Documentation DoubleReference",
    "keywords": "DoubleReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class DoubleReference : BaseReference<double, DoubleVariable, DoubleGameEvent, DoubleUnityEvent> Inheritance System.Object BaseReference < System.Double , DoubleVariable , DoubleGameEvent > BaseReference < System.Double , DoubleVariable , DoubleGameEvent , DoubleUnityEvent > DoubleReference Description The Double Variable Reference. Inherited Members BaseReference<Double, DoubleVariable, DoubleGameEvent, DoubleUnityEvent>.Raise(Double) BaseReference<Double, DoubleVariable, DoubleGameEvent>.selection BaseReference<Double, DoubleVariable, DoubleGameEvent>.constantValue BaseReference<Double, DoubleVariable, DoubleGameEvent>.onValueChangeGameEvent BaseReference<Double, DoubleVariable, DoubleGameEvent>.variable BaseReference<Double, DoubleVariable, DoubleGameEvent>.Value BaseReference<Double, DoubleVariable, DoubleGameEvent>.MaxValue BaseReference<Double, DoubleVariable, DoubleGameEvent>.MinValue BaseReference<Double, DoubleVariable, DoubleGameEvent>.SetInitialValue(Double) BaseReference<Double, DoubleVariable, DoubleGameEvent>.IsValueDefined BaseReference<Double, DoubleVariable, DoubleGameEvent>.Raise() BaseReference<Double, DoubleVariable, DoubleGameEvent>.Raise(Double) BaseReference<Double, DoubleVariable, DoubleGameEvent>.CreateCopy() BaseReference<Double, DoubleVariable, DoubleGameEvent>.ToString() Constructors DoubleReference() public DoubleReference() Description Initializes a new instance of the DoubleReference class DoubleReference(Double) public DoubleReference(double value) Parameters System.Double value The value Description Initializes a new instance of the DoubleReference class Operators Implicit(DoubleReference to Byte) public static implicit operator byte (DoubleReference variable) Parameters DoubleReference variable Returns System.Byte Description Implicit(DoubleReference to Double) public static implicit operator double (DoubleReference variable) Parameters DoubleReference variable Returns System.Double Description Implicit(DoubleReference to Int16) public static implicit operator short (DoubleReference variable) Parameters DoubleReference variable Returns System.Int16 Description Implicit(DoubleReference to Int32) public static implicit operator int (DoubleReference variable) Parameters DoubleReference variable Returns System.Int32 Description Implicit(DoubleReference to Int64) public static implicit operator long (DoubleReference variable) Parameters DoubleReference variable Returns System.Int64 Description Implicit(DoubleReference to SByte) public static implicit operator sbyte (DoubleReference variable) Parameters DoubleReference variable Returns System.SByte Description Implicit(DoubleReference to Single) public static implicit operator float (DoubleReference variable) Parameters DoubleReference variable Returns System.Single Description Implicit(DoubleReference to UInt16) public static implicit operator ushort (DoubleReference variable) Parameters DoubleReference variable Returns System.UInt16 Description Implicit(DoubleReference to UInt32) public static implicit operator uint (DoubleReference variable) Parameters DoubleReference variable Returns System.UInt32 Description Implicit(DoubleReference to UInt64) public static implicit operator ulong (DoubleReference variable) Parameters DoubleReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.FloatReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.FloatReference.html",
    "title": "| Core Framework Documentation FloatReference",
    "keywords": "FloatReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class FloatReference : BaseReference<float, FloatVariable, FloatGameEvent, FloatUnityEvent> Inheritance System.Object BaseReference < System.Single , FloatVariable , FloatGameEvent > BaseReference < System.Single , FloatVariable , FloatGameEvent , FloatUnityEvent > FloatReference Description The float Variable Reference. Inherited Members BaseReference<Single, FloatVariable, FloatGameEvent, FloatUnityEvent>.Raise(Single) BaseReference<Single, FloatVariable, FloatGameEvent>.selection BaseReference<Single, FloatVariable, FloatGameEvent>.constantValue BaseReference<Single, FloatVariable, FloatGameEvent>.onValueChangeGameEvent BaseReference<Single, FloatVariable, FloatGameEvent>.variable BaseReference<Single, FloatVariable, FloatGameEvent>.Value BaseReference<Single, FloatVariable, FloatGameEvent>.MaxValue BaseReference<Single, FloatVariable, FloatGameEvent>.MinValue BaseReference<Single, FloatVariable, FloatGameEvent>.SetInitialValue(Single) BaseReference<Single, FloatVariable, FloatGameEvent>.IsValueDefined BaseReference<Single, FloatVariable, FloatGameEvent>.Raise() BaseReference<Single, FloatVariable, FloatGameEvent>.Raise(Single) BaseReference<Single, FloatVariable, FloatGameEvent>.CreateCopy() BaseReference<Single, FloatVariable, FloatGameEvent>.ToString() Constructors FloatReference() public FloatReference() Description Initializes a new instance of the FloatReference class FloatReference(Single) public FloatReference(float value) Parameters System.Single value The value Description Initializes a new instance of the FloatReference class Operators Implicit(FloatReference to Byte) public static implicit operator byte (FloatReference variable) Parameters FloatReference variable Returns System.Byte Description Implicit(FloatReference to Double) public static implicit operator double (FloatReference variable) Parameters FloatReference variable Returns System.Double Description Implicit(FloatReference to Int16) public static implicit operator short (FloatReference variable) Parameters FloatReference variable Returns System.Int16 Description Implicit(FloatReference to Int32) public static implicit operator int (FloatReference variable) Parameters FloatReference variable Returns System.Int32 Description Implicit(FloatReference to Int64) public static implicit operator long (FloatReference variable) Parameters FloatReference variable Returns System.Int64 Description Implicit(FloatReference to SByte) public static implicit operator sbyte (FloatReference variable) Parameters FloatReference variable Returns System.SByte Description Implicit(FloatReference to UInt16) public static implicit operator ushort (FloatReference variable) Parameters FloatReference variable Returns System.UInt16 Description Implicit(FloatReference to UInt32) public static implicit operator uint (FloatReference variable) Parameters FloatReference variable Returns System.UInt32 Description Implicit(FloatReference to UInt64) public static implicit operator ulong (FloatReference variable) Parameters FloatReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.GameObjectReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.GameObjectReference.html",
    "title": "| Core Framework Documentation GameObjectReference",
    "keywords": "GameObjectReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class GameObjectReference : BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent, GameObjectUnityEvent> Inheritance System.Object BaseReference < GameObject , GameObjectVariable , GameObjectGameEvent > BaseReference < GameObject , GameObjectVariable , GameObjectGameEvent , GameObjectUnityEvent > GameObjectReference Description The game object Variable Reference. Inherited Members BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent, GameObjectUnityEvent>.Raise(GameObject) BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.selection BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.constantValue BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.onValueChangeGameEvent BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.variable BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.Value BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.MaxValue BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.MinValue BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.SetInitialValue(GameObject) BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.IsValueDefined BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.Raise() BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.Raise(GameObject) BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.CreateCopy() BaseReference<GameObject, GameObjectVariable, GameObjectGameEvent>.ToString() Constructors GameObjectReference() public GameObjectReference() Description Initializes a new instance of the GameObjectReference class GameObjectReference(GameObject) public GameObjectReference(GameObject value) Parameters GameObject value The value Description Initializes a new instance of the GameObjectReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.html",
    "title": "| Core Framework Documentation CoreFramework.ScriptableObjectArchitecture.References",
    "keywords": "Namespace CoreFramework.ScriptableObjectArchitecture.References Classes AnimationCurveReference The Animation Curve Variable Reference. AudioClipReference The Audio Clip Variable Reference. BaseReference<TBase, TVariable, TEvent> Base Class for all Reference Variables That have a type. Is a Game Event that gets raised if the variable changes. BaseReference<TBase, TVariable, TEvent, TUEvent> Base Class for all Reference Variables That have a type. Is a Game Event that gets raised if the variable changes. Also contains a Unity Event that gets raised if the value changes. This is the class that is used for all Reference Variables. BoolReference The bool Variable Reference. BoundsReference The Bounds Variable Reference. ByteReference The Byte Variable Reference. CharReference The Char Variable Reference. Color32Reference The Color32 Variable Reference. ColorReference The Color Variable Reference. DoubleReference The Double Variable Reference. FloatReference The float Variable Reference. GameObjectReference The game object Variable Reference. IntReference The int Variable Reference. LayerMaskReference The Layer Mask Variable Reference. LongReference The long Variable Reference. ObjectReference The object Variable Reference. QuaternionReference The Quaternion Variable Reference. SByteReference The byte Variable Reference. SceneReference The Scene Variable Reference. ShortReference The short Variable Reference. StringReference The string Variable Reference. UIntReference The int Variable Reference. ULongReference The long Variable Reference. UShortReference The short Variable Reference. Vector2Reference The vector Variable Reference. Vector3Reference The Vector3 Variable Reference. Vector4Reference The Vector4 Variable Reference. Enums BaseReference<TBase, TVariable, TEvent>.Selection The Selection enum"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.IntReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.IntReference.html",
    "title": "| Core Framework Documentation IntReference",
    "keywords": "IntReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class IntReference : BaseReference<int, IntVariable, IntGameEvent, IntUnityEvent> Inheritance System.Object BaseReference < System.Int32 , IntVariable , IntGameEvent > BaseReference < System.Int32 , IntVariable , IntGameEvent , IntUnityEvent > IntReference Description The int Variable Reference. Inherited Members BaseReference<Int32, IntVariable, IntGameEvent, IntUnityEvent>.Raise(Int32) BaseReference<Int32, IntVariable, IntGameEvent>.selection BaseReference<Int32, IntVariable, IntGameEvent>.constantValue BaseReference<Int32, IntVariable, IntGameEvent>.onValueChangeGameEvent BaseReference<Int32, IntVariable, IntGameEvent>.variable BaseReference<Int32, IntVariable, IntGameEvent>.Value BaseReference<Int32, IntVariable, IntGameEvent>.MaxValue BaseReference<Int32, IntVariable, IntGameEvent>.MinValue BaseReference<Int32, IntVariable, IntGameEvent>.SetInitialValue(Int32) BaseReference<Int32, IntVariable, IntGameEvent>.IsValueDefined BaseReference<Int32, IntVariable, IntGameEvent>.Raise() BaseReference<Int32, IntVariable, IntGameEvent>.Raise(Int32) BaseReference<Int32, IntVariable, IntGameEvent>.CreateCopy() BaseReference<Int32, IntVariable, IntGameEvent>.ToString() Constructors IntReference() public IntReference() Description Initializes a new instance of the IntReference class IntReference(Int32) public IntReference(int value) Parameters System.Int32 value The value Description Initializes a new instance of the IntReference class Operators Implicit(IntReference to Byte) public static implicit operator byte (IntReference variable) Parameters IntReference variable Returns System.Byte Description Implicit(IntReference to Double) public static implicit operator double (IntReference variable) Parameters IntReference variable Returns System.Double Description Implicit(IntReference to Int16) public static implicit operator short (IntReference variable) Parameters IntReference variable Returns System.Int16 Description Implicit(IntReference to Int64) public static implicit operator long (IntReference variable) Parameters IntReference variable Returns System.Int64 Description Implicit(IntReference to SByte) public static implicit operator sbyte (IntReference variable) Parameters IntReference variable Returns System.SByte Description Implicit(IntReference to Single) public static implicit operator float (IntReference variable) Parameters IntReference variable Returns System.Single Description Implicit(IntReference to UInt16) public static implicit operator ushort (IntReference variable) Parameters IntReference variable Returns System.UInt16 Description Implicit(IntReference to UInt32) public static implicit operator uint (IntReference variable) Parameters IntReference variable Returns System.UInt32 Description Implicit(IntReference to UInt64) public static implicit operator ulong (IntReference variable) Parameters IntReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.LayerMaskReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.LayerMaskReference.html",
    "title": "| Core Framework Documentation LayerMaskReference",
    "keywords": "LayerMaskReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class LayerMaskReference : BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent, LayerMaskUnityEvent> Inheritance System.Object BaseReference < LayerMask , LayerMaskVariable , LayerMaskGameEvent > BaseReference < LayerMask , LayerMaskVariable , LayerMaskGameEvent , LayerMaskUnityEvent > LayerMaskReference Description The Layer Mask Variable Reference. Inherited Members BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent, LayerMaskUnityEvent>.Raise(LayerMask) BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.selection BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.constantValue BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.onValueChangeGameEvent BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.variable BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.Value BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.MaxValue BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.MinValue BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.SetInitialValue(LayerMask) BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.IsValueDefined BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.Raise() BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.Raise(LayerMask) BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.CreateCopy() BaseReference<LayerMask, LayerMaskVariable, LayerMaskGameEvent>.ToString() Constructors LayerMaskReference() public LayerMaskReference() Description Initializes a new instance of the LayerMaskReference class LayerMaskReference(LayerMask) public LayerMaskReference(LayerMask value) Parameters LayerMask value The value Description Initializes a new instance of the LayerMaskReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.LongReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.LongReference.html",
    "title": "| Core Framework Documentation LongReference",
    "keywords": "LongReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class LongReference : BaseReference<long, LongVariable, LongGameEvent, LongUnityEvent> Inheritance System.Object BaseReference < System.Int64 , LongVariable , LongGameEvent > BaseReference < System.Int64 , LongVariable , LongGameEvent , LongUnityEvent > LongReference Description The long Variable Reference. Inherited Members BaseReference<Int64, LongVariable, LongGameEvent, LongUnityEvent>.Raise(Int64) BaseReference<Int64, LongVariable, LongGameEvent>.selection BaseReference<Int64, LongVariable, LongGameEvent>.constantValue BaseReference<Int64, LongVariable, LongGameEvent>.onValueChangeGameEvent BaseReference<Int64, LongVariable, LongGameEvent>.variable BaseReference<Int64, LongVariable, LongGameEvent>.Value BaseReference<Int64, LongVariable, LongGameEvent>.MaxValue BaseReference<Int64, LongVariable, LongGameEvent>.MinValue BaseReference<Int64, LongVariable, LongGameEvent>.SetInitialValue(Int64) BaseReference<Int64, LongVariable, LongGameEvent>.IsValueDefined BaseReference<Int64, LongVariable, LongGameEvent>.Raise() BaseReference<Int64, LongVariable, LongGameEvent>.Raise(Int64) BaseReference<Int64, LongVariable, LongGameEvent>.CreateCopy() BaseReference<Int64, LongVariable, LongGameEvent>.ToString() Constructors LongReference() public LongReference() Description Initializes a new instance of the LongReference class LongReference(Int64) public LongReference(long value) Parameters System.Int64 value The value Description Initializes a new instance of the LongReference class Operators Implicit(LongReference to Byte) public static implicit operator byte (LongReference variable) Parameters LongReference variable Returns System.Byte Description Implicit(LongReference to Double) public static implicit operator double (LongReference variable) Parameters LongReference variable Returns System.Double Description Implicit(LongReference to Int16) public static implicit operator short (LongReference variable) Parameters LongReference variable Returns System.Int16 Description Implicit(LongReference to Int32) public static implicit operator int (LongReference variable) Parameters LongReference variable Returns System.Int32 Description Implicit(LongReference to SByte) public static implicit operator sbyte (LongReference variable) Parameters LongReference variable Returns System.SByte Description Implicit(LongReference to Single) public static implicit operator float (LongReference variable) Parameters LongReference variable Returns System.Single Description Implicit(LongReference to UInt16) public static implicit operator ushort (LongReference variable) Parameters LongReference variable Returns System.UInt16 Description Implicit(LongReference to UInt32) public static implicit operator uint (LongReference variable) Parameters LongReference variable Returns System.UInt32 Description Implicit(LongReference to UInt64) public static implicit operator ulong (LongReference variable) Parameters LongReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.ObjectReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.ObjectReference.html",
    "title": "| Core Framework Documentation ObjectReference",
    "keywords": "ObjectReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class ObjectReference : BaseReference<Object, ObjectVariable, ObjectGameEvent, ObjectUnityEvent> Inheritance System.Object BaseReference < Object , ObjectVariable , ObjectGameEvent > BaseReference < Object , ObjectVariable , ObjectGameEvent , ObjectUnityEvent > ObjectReference Description The object Variable Reference. Inherited Members BaseReference<Object, ObjectVariable, ObjectGameEvent, ObjectUnityEvent>.Raise(Object) BaseReference<Object, ObjectVariable, ObjectGameEvent>.selection BaseReference<Object, ObjectVariable, ObjectGameEvent>.constantValue BaseReference<Object, ObjectVariable, ObjectGameEvent>.onValueChangeGameEvent BaseReference<Object, ObjectVariable, ObjectGameEvent>.variable BaseReference<Object, ObjectVariable, ObjectGameEvent>.Value BaseReference<Object, ObjectVariable, ObjectGameEvent>.MaxValue BaseReference<Object, ObjectVariable, ObjectGameEvent>.MinValue BaseReference<Object, ObjectVariable, ObjectGameEvent>.SetInitialValue(Object) BaseReference<Object, ObjectVariable, ObjectGameEvent>.IsValueDefined BaseReference<Object, ObjectVariable, ObjectGameEvent>.Raise() BaseReference<Object, ObjectVariable, ObjectGameEvent>.Raise(Object) BaseReference<Object, ObjectVariable, ObjectGameEvent>.CreateCopy() BaseReference<Object, ObjectVariable, ObjectGameEvent>.ToString() Constructors ObjectReference() public ObjectReference() Description Initializes a new instance of the ObjectReference class ObjectReference(Object) public ObjectReference(Object value) Parameters Object value The value Description Initializes a new instance of the ObjectReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.QuaternionReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.QuaternionReference.html",
    "title": "| Core Framework Documentation QuaternionReference",
    "keywords": "QuaternionReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class QuaternionReference : BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent, QuaternionUnityEvent> Inheritance System.Object BaseReference < Quaternion , QuaternionVariable , QuaternionGameEvent > BaseReference < Quaternion , QuaternionVariable , QuaternionGameEvent , QuaternionUnityEvent > QuaternionReference Description The Quaternion Variable Reference. Inherited Members BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent, QuaternionUnityEvent>.Raise(Quaternion) BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.selection BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.constantValue BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.onValueChangeGameEvent BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.variable BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.Value BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.MaxValue BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.MinValue BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.SetInitialValue(Quaternion) BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.IsValueDefined BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.Raise() BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.Raise(Quaternion) BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.CreateCopy() BaseReference<Quaternion, QuaternionVariable, QuaternionGameEvent>.ToString() Constructors QuaternionReference() public QuaternionReference() Description Initializes a new instance of the QuaternionReference class QuaternionReference(Quaternion) public QuaternionReference(Quaternion value) Parameters Quaternion value The value Description Initializes a new instance of the QuaternionReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.SByteReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.SByteReference.html",
    "title": "| Core Framework Documentation SByteReference",
    "keywords": "SByteReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class SByteReference : BaseReference<sbyte, SByteVariable, SByteGameEvent, SByteUnityEvent> Inheritance System.Object BaseReference < System.SByte , SByteVariable , SByteGameEvent > BaseReference < System.SByte , SByteVariable , SByteGameEvent , SByteUnityEvent > SByteReference Description The byte Variable Reference. Inherited Members BaseReference<SByte, SByteVariable, SByteGameEvent, SByteUnityEvent>.Raise(SByte) BaseReference<SByte, SByteVariable, SByteGameEvent>.selection BaseReference<SByte, SByteVariable, SByteGameEvent>.constantValue BaseReference<SByte, SByteVariable, SByteGameEvent>.onValueChangeGameEvent BaseReference<SByte, SByteVariable, SByteGameEvent>.variable BaseReference<SByte, SByteVariable, SByteGameEvent>.Value BaseReference<SByte, SByteVariable, SByteGameEvent>.MaxValue BaseReference<SByte, SByteVariable, SByteGameEvent>.MinValue BaseReference<SByte, SByteVariable, SByteGameEvent>.SetInitialValue(SByte) BaseReference<SByte, SByteVariable, SByteGameEvent>.IsValueDefined BaseReference<SByte, SByteVariable, SByteGameEvent>.Raise() BaseReference<SByte, SByteVariable, SByteGameEvent>.Raise(SByte) BaseReference<SByte, SByteVariable, SByteGameEvent>.CreateCopy() BaseReference<SByte, SByteVariable, SByteGameEvent>.ToString() Constructors SByteReference() public SByteReference() Description Initializes a new instance of the SByteReference class SByteReference(SByte) public SByteReference(sbyte value) Parameters System.SByte value The value Description Initializes a new instance of the SByteReference class Operators Implicit(SByteReference to Byte) public static implicit operator byte (SByteReference variable) Parameters SByteReference variable Returns System.Byte Description Implicit(SByteReference to Double) public static implicit operator double (SByteReference variable) Parameters SByteReference variable Returns System.Double Description Implicit(SByteReference to Int16) public static implicit operator short (SByteReference variable) Parameters SByteReference variable Returns System.Int16 Description Implicit(SByteReference to Int32) public static implicit operator int (SByteReference variable) Parameters SByteReference variable Returns System.Int32 Description Implicit(SByteReference to Int64) public static implicit operator long (SByteReference variable) Parameters SByteReference variable Returns System.Int64 Description Implicit(SByteReference to Single) public static implicit operator float (SByteReference variable) Parameters SByteReference variable Returns System.Single Description Implicit(SByteReference to UInt16) public static implicit operator ushort (SByteReference variable) Parameters SByteReference variable Returns System.UInt16 Description Implicit(SByteReference to UInt32) public static implicit operator uint (SByteReference variable) Parameters SByteReference variable Returns System.UInt32 Description Implicit(SByteReference to UInt64) public static implicit operator ulong (SByteReference variable) Parameters SByteReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.SceneReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.SceneReference.html",
    "title": "| Core Framework Documentation SceneReference",
    "keywords": "SceneReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class SceneReference : BaseReference<SceneInfo, SceneVariable, SceneGameEvent, SceneUnityEvent> Inheritance System.Object BaseReference < SceneInfo , SceneVariable , SceneGameEvent > BaseReference < SceneInfo , SceneVariable , SceneGameEvent , SceneUnityEvent > SceneReference Description The Scene Variable Reference. Inherited Members BaseReference<SceneInfo, SceneVariable, SceneGameEvent, SceneUnityEvent>.Raise(SceneInfo) BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.selection BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.constantValue BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.onValueChangeGameEvent BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.variable BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.Value BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.MaxValue BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.MinValue BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.SetInitialValue(SceneInfo) BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.IsValueDefined BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.Raise() BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.Raise(SceneInfo) BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.CreateCopy() BaseReference<SceneInfo, SceneVariable, SceneGameEvent>.ToString() Constructors SceneReference() public SceneReference() Description Initializes a new instance of the SceneReference class SceneReference(SceneInfo) public SceneReference(SceneInfo value) Parameters SceneInfo value The value Description Initializes a new instance of the SceneReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.ShortReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.ShortReference.html",
    "title": "| Core Framework Documentation ShortReference",
    "keywords": "ShortReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class ShortReference : BaseReference<short, ShortVariable, ShortGameEvent, ShortUnityEvent> Inheritance System.Object BaseReference < System.Int16 , ShortVariable , ShortGameEvent > BaseReference < System.Int16 , ShortVariable , ShortGameEvent , ShortUnityEvent > ShortReference Description The short Variable Reference. Inherited Members BaseReference<Int16, ShortVariable, ShortGameEvent, ShortUnityEvent>.Raise(Int16) BaseReference<Int16, ShortVariable, ShortGameEvent>.selection BaseReference<Int16, ShortVariable, ShortGameEvent>.constantValue BaseReference<Int16, ShortVariable, ShortGameEvent>.onValueChangeGameEvent BaseReference<Int16, ShortVariable, ShortGameEvent>.variable BaseReference<Int16, ShortVariable, ShortGameEvent>.Value BaseReference<Int16, ShortVariable, ShortGameEvent>.MaxValue BaseReference<Int16, ShortVariable, ShortGameEvent>.MinValue BaseReference<Int16, ShortVariable, ShortGameEvent>.SetInitialValue(Int16) BaseReference<Int16, ShortVariable, ShortGameEvent>.IsValueDefined BaseReference<Int16, ShortVariable, ShortGameEvent>.Raise() BaseReference<Int16, ShortVariable, ShortGameEvent>.Raise(Int16) BaseReference<Int16, ShortVariable, ShortGameEvent>.CreateCopy() BaseReference<Int16, ShortVariable, ShortGameEvent>.ToString() Constructors ShortReference() public ShortReference() Description Initializes a new instance of the ShortReference class ShortReference(Int16) public ShortReference(short value) Parameters System.Int16 value The value Description Initializes a new instance of the ShortReference class Operators Implicit(ShortReference to Byte) public static implicit operator byte (ShortReference variable) Parameters ShortReference variable Returns System.Byte Description Implicit(ShortReference to Double) public static implicit operator double (ShortReference variable) Parameters ShortReference variable Returns System.Double Description Implicit(ShortReference to Int32) public static implicit operator int (ShortReference variable) Parameters ShortReference variable Returns System.Int32 Description Implicit(ShortReference to Int64) public static implicit operator long (ShortReference variable) Parameters ShortReference variable Returns System.Int64 Description Implicit(ShortReference to SByte) public static implicit operator sbyte (ShortReference variable) Parameters ShortReference variable Returns System.SByte Description Implicit(ShortReference to Single) public static implicit operator float (ShortReference variable) Parameters ShortReference variable Returns System.Single Description Implicit(ShortReference to UInt16) public static implicit operator ushort (ShortReference variable) Parameters ShortReference variable Returns System.UInt16 Description Implicit(ShortReference to UInt32) public static implicit operator uint (ShortReference variable) Parameters ShortReference variable Returns System.UInt32 Description Implicit(ShortReference to UInt64) public static implicit operator ulong (ShortReference variable) Parameters ShortReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.StringReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.StringReference.html",
    "title": "| Core Framework Documentation StringReference",
    "keywords": "StringReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class StringReference : BaseReference<string, StringVariable, StringGameEvent, StringUnityEvent> Inheritance System.Object BaseReference < System.String , StringVariable , StringGameEvent > BaseReference < System.String , StringVariable , StringGameEvent , StringUnityEvent > StringReference Description The string Variable Reference. Inherited Members BaseReference<String, StringVariable, StringGameEvent, StringUnityEvent>.Raise(String) BaseReference<String, StringVariable, StringGameEvent>.selection BaseReference<String, StringVariable, StringGameEvent>.constantValue BaseReference<String, StringVariable, StringGameEvent>.onValueChangeGameEvent BaseReference<String, StringVariable, StringGameEvent>.variable BaseReference<String, StringVariable, StringGameEvent>.Value BaseReference<String, StringVariable, StringGameEvent>.MaxValue BaseReference<String, StringVariable, StringGameEvent>.MinValue BaseReference<String, StringVariable, StringGameEvent>.SetInitialValue(String) BaseReference<String, StringVariable, StringGameEvent>.IsValueDefined BaseReference<String, StringVariable, StringGameEvent>.Raise() BaseReference<String, StringVariable, StringGameEvent>.Raise(String) BaseReference<String, StringVariable, StringGameEvent>.CreateCopy() BaseReference<String, StringVariable, StringGameEvent>.ToString() Constructors StringReference() public StringReference() Description Initializes a new instance of the StringReference class StringReference(String) public StringReference(string value) Parameters System.String value The value Description Initializes a new instance of the StringReference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.UIntReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.UIntReference.html",
    "title": "| Core Framework Documentation UIntReference",
    "keywords": "UIntReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class UIntReference : BaseReference<uint, UIntVariable, UIntGameEvent, UIntUnityEvent> Inheritance System.Object BaseReference < System.UInt32 , UIntVariable , UIntGameEvent > BaseReference < System.UInt32 , UIntVariable , UIntGameEvent , UIntUnityEvent > UIntReference Description The int Variable Reference. Inherited Members BaseReference<UInt32, UIntVariable, UIntGameEvent, UIntUnityEvent>.Raise(UInt32) BaseReference<UInt32, UIntVariable, UIntGameEvent>.selection BaseReference<UInt32, UIntVariable, UIntGameEvent>.constantValue BaseReference<UInt32, UIntVariable, UIntGameEvent>.onValueChangeGameEvent BaseReference<UInt32, UIntVariable, UIntGameEvent>.variable BaseReference<UInt32, UIntVariable, UIntGameEvent>.Value BaseReference<UInt32, UIntVariable, UIntGameEvent>.MaxValue BaseReference<UInt32, UIntVariable, UIntGameEvent>.MinValue BaseReference<UInt32, UIntVariable, UIntGameEvent>.SetInitialValue(UInt32) BaseReference<UInt32, UIntVariable, UIntGameEvent>.IsValueDefined BaseReference<UInt32, UIntVariable, UIntGameEvent>.Raise() BaseReference<UInt32, UIntVariable, UIntGameEvent>.Raise(UInt32) BaseReference<UInt32, UIntVariable, UIntGameEvent>.CreateCopy() BaseReference<UInt32, UIntVariable, UIntGameEvent>.ToString() Constructors UIntReference() public UIntReference() Description Initializes a new instance of the UIntReference class UIntReference(UInt32) public UIntReference(uint value) Parameters System.UInt32 value The value Description Initializes a new instance of the UIntReference class Operators Implicit(UIntReference to Byte) public static implicit operator byte (UIntReference variable) Parameters UIntReference variable Returns System.Byte Description Implicit(UIntReference to Double) public static implicit operator double (UIntReference variable) Parameters UIntReference variable Returns System.Double Description Implicit(UIntReference to Int16) public static implicit operator short (UIntReference variable) Parameters UIntReference variable Returns System.Int16 Description Implicit(UIntReference to Int32) public static implicit operator int (UIntReference variable) Parameters UIntReference variable Returns System.Int32 Description Implicit(UIntReference to Int64) public static implicit operator long (UIntReference variable) Parameters UIntReference variable Returns System.Int64 Description Implicit(UIntReference to SByte) public static implicit operator sbyte (UIntReference variable) Parameters UIntReference variable Returns System.SByte Description Implicit(UIntReference to Single) public static implicit operator float (UIntReference variable) Parameters UIntReference variable Returns System.Single Description Implicit(UIntReference to UInt16) public static implicit operator ushort (UIntReference variable) Parameters UIntReference variable Returns System.UInt16 Description Implicit(UIntReference to UInt64) public static implicit operator ulong (UIntReference variable) Parameters UIntReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.ULongReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.ULongReference.html",
    "title": "| Core Framework Documentation ULongReference",
    "keywords": "ULongReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class ULongReference : BaseReference<ulong, ULongVariable, ULongGameEvent, ULongUnityEvent> Inheritance System.Object BaseReference < System.UInt64 , ULongVariable , ULongGameEvent > BaseReference < System.UInt64 , ULongVariable , ULongGameEvent , ULongUnityEvent > ULongReference Description The long Variable Reference. Inherited Members BaseReference<UInt64, ULongVariable, ULongGameEvent, ULongUnityEvent>.Raise(UInt64) BaseReference<UInt64, ULongVariable, ULongGameEvent>.selection BaseReference<UInt64, ULongVariable, ULongGameEvent>.constantValue BaseReference<UInt64, ULongVariable, ULongGameEvent>.onValueChangeGameEvent BaseReference<UInt64, ULongVariable, ULongGameEvent>.variable BaseReference<UInt64, ULongVariable, ULongGameEvent>.Value BaseReference<UInt64, ULongVariable, ULongGameEvent>.MaxValue BaseReference<UInt64, ULongVariable, ULongGameEvent>.MinValue BaseReference<UInt64, ULongVariable, ULongGameEvent>.SetInitialValue(UInt64) BaseReference<UInt64, ULongVariable, ULongGameEvent>.IsValueDefined BaseReference<UInt64, ULongVariable, ULongGameEvent>.Raise() BaseReference<UInt64, ULongVariable, ULongGameEvent>.Raise(UInt64) BaseReference<UInt64, ULongVariable, ULongGameEvent>.CreateCopy() BaseReference<UInt64, ULongVariable, ULongGameEvent>.ToString() Constructors ULongReference() public ULongReference() Description Initializes a new instance of the ULongReference class ULongReference(UInt64) public ULongReference(ulong value) Parameters System.UInt64 value The value Description Initializes a new instance of the ULongReference class Operators Implicit(ULongReference to Byte) public static implicit operator byte (ULongReference variable) Parameters ULongReference variable Returns System.Byte Description Implicit(ULongReference to Double) public static implicit operator double (ULongReference variable) Parameters ULongReference variable Returns System.Double Description Implicit(ULongReference to Int16) public static implicit operator short (ULongReference variable) Parameters ULongReference variable Returns System.Int16 Description Implicit(ULongReference to Int32) public static implicit operator int (ULongReference variable) Parameters ULongReference variable Returns System.Int32 Description Implicit(ULongReference to Int64) public static implicit operator long (ULongReference variable) Parameters ULongReference variable Returns System.Int64 Description Implicit(ULongReference to SByte) public static implicit operator sbyte (ULongReference variable) Parameters ULongReference variable Returns System.SByte Description Implicit(ULongReference to Single) public static implicit operator float (ULongReference variable) Parameters ULongReference variable Returns System.Single Description Implicit(ULongReference to UInt16) public static implicit operator ushort (ULongReference variable) Parameters ULongReference variable Returns System.UInt16 Description Implicit(ULongReference to UInt32) public static implicit operator uint (ULongReference variable) Parameters ULongReference variable Returns System.UInt32 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.UShortReference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.UShortReference.html",
    "title": "| Core Framework Documentation UShortReference",
    "keywords": "UShortReference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class UShortReference : BaseReference<ushort, UShortVariable, UShortGameEvent, UShortUnityEvent> Inheritance System.Object BaseReference < System.UInt16 , UShortVariable , UShortGameEvent > BaseReference < System.UInt16 , UShortVariable , UShortGameEvent , UShortUnityEvent > UShortReference Description The short Variable Reference. Inherited Members BaseReference<UInt16, UShortVariable, UShortGameEvent, UShortUnityEvent>.Raise(UInt16) BaseReference<UInt16, UShortVariable, UShortGameEvent>.selection BaseReference<UInt16, UShortVariable, UShortGameEvent>.constantValue BaseReference<UInt16, UShortVariable, UShortGameEvent>.onValueChangeGameEvent BaseReference<UInt16, UShortVariable, UShortGameEvent>.variable BaseReference<UInt16, UShortVariable, UShortGameEvent>.Value BaseReference<UInt16, UShortVariable, UShortGameEvent>.MaxValue BaseReference<UInt16, UShortVariable, UShortGameEvent>.MinValue BaseReference<UInt16, UShortVariable, UShortGameEvent>.SetInitialValue(UInt16) BaseReference<UInt16, UShortVariable, UShortGameEvent>.IsValueDefined BaseReference<UInt16, UShortVariable, UShortGameEvent>.Raise() BaseReference<UInt16, UShortVariable, UShortGameEvent>.Raise(UInt16) BaseReference<UInt16, UShortVariable, UShortGameEvent>.CreateCopy() BaseReference<UInt16, UShortVariable, UShortGameEvent>.ToString() Constructors UShortReference() public UShortReference() Description Initializes a new instance of the UShortReference class UShortReference(UInt16) public UShortReference(ushort value) Parameters System.UInt16 value The value Description Initializes a new instance of the UShortReference class Operators Implicit(UShortReference to Byte) public static implicit operator byte (UShortReference variable) Parameters UShortReference variable Returns System.Byte Description Implicit(UShortReference to Double) public static implicit operator double (UShortReference variable) Parameters UShortReference variable Returns System.Double Description Implicit(UShortReference to Int16) public static implicit operator short (UShortReference variable) Parameters UShortReference variable Returns System.Int16 Description Implicit(UShortReference to Int32) public static implicit operator int (UShortReference variable) Parameters UShortReference variable Returns System.Int32 Description Implicit(UShortReference to Int64) public static implicit operator long (UShortReference variable) Parameters UShortReference variable Returns System.Int64 Description Implicit(UShortReference to SByte) public static implicit operator sbyte (UShortReference variable) Parameters UShortReference variable Returns System.SByte Description Implicit(UShortReference to Single) public static implicit operator float (UShortReference variable) Parameters UShortReference variable Returns System.Single Description Implicit(UShortReference to UInt32) public static implicit operator uint (UShortReference variable) Parameters UShortReference variable Returns System.UInt32 Description Implicit(UShortReference to UInt64) public static implicit operator ulong (UShortReference variable) Parameters UShortReference variable Returns System.UInt64 Description See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.Vector2Reference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.Vector2Reference.html",
    "title": "| Core Framework Documentation Vector2Reference",
    "keywords": "Vector2Reference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class Vector2Reference : BaseReference<Vector2, Vector2Variable, Vector2GameEvent, Vector2UnityEvent> Inheritance System.Object BaseReference < Vector2 , Vector2Variable , Vector2GameEvent > BaseReference < Vector2 , Vector2Variable , Vector2GameEvent , Vector2UnityEvent > Vector2Reference Description The vector Variable Reference. Inherited Members BaseReference<Vector2, Vector2Variable, Vector2GameEvent, Vector2UnityEvent>.Raise(Vector2) BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.selection BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.constantValue BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.onValueChangeGameEvent BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.variable BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.Value BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.MaxValue BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.MinValue BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.SetInitialValue(Vector2) BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.IsValueDefined BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.Raise() BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.Raise(Vector2) BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.CreateCopy() BaseReference<Vector2, Vector2Variable, Vector2GameEvent>.ToString() Constructors Vector2Reference() public Vector2Reference() Description Initializes a new instance of the Vector2Reference class Vector2Reference(Vector2) public Vector2Reference(Vector2 value) Parameters Vector2 value The value Description Initializes a new instance of the Vector2Reference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.Vector3Reference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.Vector3Reference.html",
    "title": "| Core Framework Documentation Vector3Reference",
    "keywords": "Vector3Reference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class Vector3Reference : BaseReference<Vector3, Vector3Variable, Vector3GameEvent, Vector3UnityEvent> Inheritance System.Object BaseReference < Vector3 , Vector3Variable , Vector3GameEvent > BaseReference < Vector3 , Vector3Variable , Vector3GameEvent , Vector3UnityEvent > Vector3Reference Description The Vector3 Variable Reference. Inherited Members BaseReference<Vector3, Vector3Variable, Vector3GameEvent, Vector3UnityEvent>.Raise(Vector3) BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.selection BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.constantValue BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.onValueChangeGameEvent BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.variable BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.Value BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.MaxValue BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.MinValue BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.SetInitialValue(Vector3) BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.IsValueDefined BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.Raise() BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.Raise(Vector3) BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.CreateCopy() BaseReference<Vector3, Vector3Variable, Vector3GameEvent>.ToString() Constructors Vector3Reference() public Vector3Reference() Description Initializes a new instance of the Vector3Reference class Vector3Reference(Vector3) public Vector3Reference(Vector3 value) Parameters Vector3 value The value. Description Initializes a new instance of the Vector3Reference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.References.Vector4Reference.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.References.Vector4Reference.html",
    "title": "| Core Framework Documentation Vector4Reference",
    "keywords": "Vector4Reference Class in CoreFramework.ScriptableObjectArchitecture.References public sealed class Vector4Reference : BaseReference<Vector4, Vector4Variable, Vector4GameEvent, Vector4UnityEvent> Inheritance System.Object BaseReference < Vector4 , Vector4Variable , Vector4GameEvent > BaseReference < Vector4 , Vector4Variable , Vector4GameEvent , Vector4UnityEvent > Vector4Reference Description The Vector4 Variable Reference. Inherited Members BaseReference<Vector4, Vector4Variable, Vector4GameEvent, Vector4UnityEvent>.Raise(Vector4) BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.selection BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.constantValue BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.onValueChangeGameEvent BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.variable BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.Value BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.MaxValue BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.MinValue BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.SetInitialValue(Vector4) BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.IsValueDefined BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.Raise() BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.Raise(Vector4) BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.CreateCopy() BaseReference<Vector4, Vector4Variable, Vector4GameEvent>.ToString() Constructors Vector4Reference() public Vector4Reference() Description Initializes a new instance of the Vector4Reference class Vector4Reference(Vector4) public Vector4Reference(Vector4 value) Parameters Vector4 value The value Description Initializes a new instance of the Vector4Reference class See Also BaseReference <TBase, TVariable, TEvent, TUEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.SceneInfo.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.SceneInfo.html",
    "title": "| Core Framework Documentation SceneInfo",
    "keywords": "SceneInfo Class in CoreFramework.ScriptableObjectArchitecture [Serializable] public sealed class SceneInfo : ISerializationCallbackReceiver Inheritance System.Object SceneInfo Description A container for information about a Unity scene that can be used as a ScriptableObject. This allows scenes to be referenced as assets within the Unity editor and be used in a type-safe manner. Properties IsSceneEnabled public bool IsSceneEnabled { get; } Property Value System.Boolean IsSceneEnabled Gets a value indicating whether the scene is enabled in the Unity Build Settings. Description Gets a value indicating whether the scene is enabled in the Unity Build Settings. IsSceneInBuildSettings public bool IsSceneInBuildSettings { get; } Property Value System.Boolean IsSceneInBuildSettings Gets a value indicating whether the scene is included in the Unity Build Settings. Description Gets a value indicating whether the scene is included in the Unity Build Settings. SceneIndex public int SceneIndex { get; } Property Value System.Int32 SceneIndex Gets the index of the scene in the Unity Build Settings. Returns -1 if the scene is not part of the build settings. Description Gets the index of the scene in the Unity Build Settings. Returns -1 if the scene is not part of the build settings. SceneName public string SceneName { get; } Property Value System.String SceneName Gets the name of the scene. Description Gets the name of the scene. Methods OnAfterDeserialize() public void OnAfterDeserialize() Description Called after the object is deserialized. This can be used to perform any needed initialization that should occur after the object is constructed from its serialized state. OnBeforeSerialize() public void OnBeforeSerialize() Description Called before the object is serialized. This is used to prepare the object for serialization. For example, it may be used to update properties that depend on editor state."
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.AnimationCurveVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.AnimationCurveVariable.html",
    "title": "| Core Framework Documentation AnimationCurveVariable",
    "keywords": "AnimationCurveVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class AnimationCurveVariable : BaseVariable<AnimationCurve, AnimationCurveGameEvent> Inheritance System.Object BaseObject BaseVariable < AnimationCurve , AnimationCurveGameEvent > AnimationCurveVariable Description The Animation Curve Scriptable Object Variable. Inherited Members BaseVariable<AnimationCurve, AnimationCurveGameEvent>.readOnly BaseVariable<AnimationCurve, AnimationCurveGameEvent>.clampable BaseVariable<AnimationCurve, AnimationCurveGameEvent>.minValue BaseVariable<AnimationCurve, AnimationCurveGameEvent>.maxValue BaseVariable<AnimationCurve, AnimationCurveGameEvent>.onValueChangeGameEvent BaseVariable<AnimationCurve, AnimationCurveGameEvent>.Value BaseVariable<AnimationCurve, AnimationCurveGameEvent>.MinClampValue BaseVariable<AnimationCurve, AnimationCurveGameEvent>.MaxClampValue BaseVariable<AnimationCurve, AnimationCurveGameEvent>.ClampValue(AnimationCurve) BaseVariable<AnimationCurve, AnimationCurveGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.AudioClipVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.AudioClipVariable.html",
    "title": "| Core Framework Documentation AudioClipVariable",
    "keywords": "AudioClipVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class AudioClipVariable : BaseVariable<AudioClip, AudioClipGameEvent> Inheritance System.Object BaseObject BaseVariable < AudioClip , AudioClipGameEvent > AudioClipVariable Description The Audio Clip Scriptable Object Variable. Inherited Members BaseVariable<AudioClip, AudioClipGameEvent>.readOnly BaseVariable<AudioClip, AudioClipGameEvent>.clampable BaseVariable<AudioClip, AudioClipGameEvent>.minValue BaseVariable<AudioClip, AudioClipGameEvent>.maxValue BaseVariable<AudioClip, AudioClipGameEvent>.onValueChangeGameEvent BaseVariable<AudioClip, AudioClipGameEvent>.Value BaseVariable<AudioClip, AudioClipGameEvent>.MinClampValue BaseVariable<AudioClip, AudioClipGameEvent>.MaxClampValue BaseVariable<AudioClip, AudioClipGameEvent>.ClampValue(AudioClip) BaseVariable<AudioClip, AudioClipGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable-2.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable-2.html",
    "title": "| Core Framework Documentation BaseVariable<TType, TEvent>",
    "keywords": "BaseVariable<TType, TEvent> Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public abstract class BaseVariable<TType, TEvent> : BaseObject where TEvent : IGameEvent<TType> Inheritance System.Object BaseObject BaseVariable<TType, TEvent> AnimationCurveVariable AudioClipVariable BoolVariable BoundsVariable ByteVariable CharVariable Color32Variable ColorVariable DoubleVariable FloatVariable GameObjectVariable IntVariable LayerMaskVariable LongVariable ObjectVariable QuaternionVariable SByteVariable SceneVariable ShortVariable StringVariable UIntVariable ULongVariable UShortVariable Vector2Variable Vector3Variable Vector4Variable Description Base Class for all Scriptable Object Variables That have a type. Raises The Game Event when the value of the variable changes. Type Parameters TType The type that this variable is. TEvent The Game Event type to use. Fields clampable protected bool clampable Field Value System.Boolean clampable Description maxValue protected TType maxValue Field Value TType maxValue The Max value of this variable. Only if this variable is clamped. Description The Max value of this variable. Only if this variable is clamped. minValue protected TType minValue Field Value TType minValue The Min value of this variable. Only if this variable is clamped. Description The Min value of this variable. Only if this variable is clamped. onValueChangeGameEvent protected TEvent onValueChangeGameEvent Field Value TEvent onValueChangeGameEvent The Game Event to raise when the value of this variable changes. Description The Game Event to raise when the value of this variable changes. readOnly protected bool readOnly Field Value System.Boolean readOnly Should this value be changeable during runtime? Will still be editable in the inspector regardless. Description Should this value be changeable during runtime? Will still be editable in the inspector regardless. Properties MaxClampValue public TType MaxClampValue { get; } Property Value TType MaxClampValue Gets the value of the max clamp value Description Gets the value of the max clamp value MinClampValue public TType MinClampValue { get; } Property Value TType MinClampValue Gets the value of the min clamp value Description Gets the value of the min clamp value Value public TType Value { get; set; } Property Value TType Value The value of this variable. Raise the Game Event when the value is changed. Description The value of this variable. Raise the Game Event when the value is changed. Methods ClampValue(TType) protected virtual TType ClampValue(TType tValue) Parameters TType tValue The value to set to. Returns TType The clamped value. Description Clamps the value using the specified value. ToString() public override string ToString() Returns System.String Description Operators Implicit(BaseVariable<TType, TEvent> to TType) public static implicit operator TType(BaseVariable<TType, TEvent> variable) Parameters BaseVariable <TType, TEvent> variable The variable of the type that you want to get the value from. Returns TType The value of the variable. Description Creates a value from Variable Object. Remarks For more information on Implicit Operator Overloading see - https://www.codeproject.com/Articles/15191/Understanding-Implicit-Operator-Overloading-in-C https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators Examples int count; IntVariable countVariable; // IntVariable is a BaseVariable of type int. public class IntVariable : BaseVariable{Int32} public void StartCounting() { count = countVariable; } Implicit(BaseVariable<TType, TEvent> to String) public static implicit operator string (BaseVariable<TType, TEvent> variable) Parameters BaseVariable <TType, TEvent> variable Returns System.String Description"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BoolVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BoolVariable.html",
    "title": "| Core Framework Documentation BoolVariable",
    "keywords": "BoolVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class BoolVariable : BaseVariable<bool, BoolGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Boolean , BoolGameEvent > BoolVariable Description The bool Scriptable Object Variable. Inherited Members BaseVariable<Boolean, BoolGameEvent>.readOnly BaseVariable<Boolean, BoolGameEvent>.clampable BaseVariable<Boolean, BoolGameEvent>.minValue BaseVariable<Boolean, BoolGameEvent>.maxValue BaseVariable<Boolean, BoolGameEvent>.onValueChangeGameEvent BaseVariable<Boolean, BoolGameEvent>.Value BaseVariable<Boolean, BoolGameEvent>.MinClampValue BaseVariable<Boolean, BoolGameEvent>.MaxClampValue BaseVariable<Boolean, BoolGameEvent>.ClampValue(Boolean) BaseVariable<Boolean, BoolGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BoundsVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BoundsVariable.html",
    "title": "| Core Framework Documentation BoundsVariable",
    "keywords": "BoundsVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class BoundsVariable : BaseVariable<Bounds, BoundsGameEvent> Inheritance System.Object BaseObject BaseVariable < Bounds , BoundsGameEvent > BoundsVariable Description The Bounds Scriptable Object Variable. Inherited Members BaseVariable<Bounds, BoundsGameEvent>.readOnly BaseVariable<Bounds, BoundsGameEvent>.clampable BaseVariable<Bounds, BoundsGameEvent>.minValue BaseVariable<Bounds, BoundsGameEvent>.maxValue BaseVariable<Bounds, BoundsGameEvent>.onValueChangeGameEvent BaseVariable<Bounds, BoundsGameEvent>.Value BaseVariable<Bounds, BoundsGameEvent>.MinClampValue BaseVariable<Bounds, BoundsGameEvent>.MaxClampValue BaseVariable<Bounds, BoundsGameEvent>.ClampValue(Bounds) BaseVariable<Bounds, BoundsGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ByteVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ByteVariable.html",
    "title": "| Core Framework Documentation ByteVariable",
    "keywords": "ByteVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class ByteVariable : BaseVariable<byte, ByteGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Byte , ByteGameEvent > ByteVariable Description The Byte Scriptable Object Variable. Inherited Members BaseVariable<Byte, ByteGameEvent>.readOnly BaseVariable<Byte, ByteGameEvent>.clampable BaseVariable<Byte, ByteGameEvent>.minValue BaseVariable<Byte, ByteGameEvent>.maxValue BaseVariable<Byte, ByteGameEvent>.onValueChangeGameEvent BaseVariable<Byte, ByteGameEvent>.Value BaseVariable<Byte, ByteGameEvent>.MinClampValue BaseVariable<Byte, ByteGameEvent>.MaxClampValue BaseVariable<Byte, ByteGameEvent>.ClampValue(Byte) BaseVariable<Byte, ByteGameEvent>.ToString() Methods ClampValue(Byte) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Byte, ByteGameEvent>.ClampValue(System.Byte) protected override byte ClampValue(byte value) Parameters System.Byte value Returns System.Byte The clamped value. Description Clamps the value using the specified value. Operators Implicit(ByteVariable to Double) public static implicit operator double (ByteVariable variable) Parameters ByteVariable variable Returns System.Double Description Implicit(ByteVariable to Int16) public static implicit operator short (ByteVariable variable) Parameters ByteVariable variable Returns System.Int16 Description Implicit(ByteVariable to Int32) public static implicit operator int (ByteVariable variable) Parameters ByteVariable variable Returns System.Int32 Description Implicit(ByteVariable to Int64) public static implicit operator long (ByteVariable variable) Parameters ByteVariable variable Returns System.Int64 Description Implicit(ByteVariable to SByte) public static implicit operator sbyte (ByteVariable variable) Parameters ByteVariable variable Returns System.SByte Description Implicit(ByteVariable to Single) public static implicit operator float (ByteVariable variable) Parameters ByteVariable variable Returns System.Single Description Implicit(ByteVariable to UInt16) public static implicit operator ushort (ByteVariable variable) Parameters ByteVariable variable Returns System.UInt16 Description Implicit(ByteVariable to UInt32) public static implicit operator uint (ByteVariable variable) Parameters ByteVariable variable Returns System.UInt32 Description Implicit(ByteVariable to UInt64) public static implicit operator ulong (ByteVariable variable) Parameters ByteVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.CharVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.CharVariable.html",
    "title": "| Core Framework Documentation CharVariable",
    "keywords": "CharVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class CharVariable : BaseVariable<char, CharGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Char , CharGameEvent > CharVariable Description The Char Scriptable Object Variable. Inherited Members BaseVariable<Char, CharGameEvent>.readOnly BaseVariable<Char, CharGameEvent>.clampable BaseVariable<Char, CharGameEvent>.minValue BaseVariable<Char, CharGameEvent>.maxValue BaseVariable<Char, CharGameEvent>.onValueChangeGameEvent BaseVariable<Char, CharGameEvent>.Value BaseVariable<Char, CharGameEvent>.MinClampValue BaseVariable<Char, CharGameEvent>.MaxClampValue BaseVariable<Char, CharGameEvent>.ClampValue(Char) BaseVariable<Char, CharGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Color32Variable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Color32Variable.html",
    "title": "| Core Framework Documentation Color32Variable",
    "keywords": "Color32Variable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class Color32Variable : BaseVariable<Color32, Color32GameEvent> Inheritance System.Object BaseObject BaseVariable < Color32 , Color32GameEvent > Color32Variable Description The Color32 Scriptable Object Variable. Inherited Members BaseVariable<Color32, Color32GameEvent>.readOnly BaseVariable<Color32, Color32GameEvent>.clampable BaseVariable<Color32, Color32GameEvent>.minValue BaseVariable<Color32, Color32GameEvent>.maxValue BaseVariable<Color32, Color32GameEvent>.onValueChangeGameEvent BaseVariable<Color32, Color32GameEvent>.Value BaseVariable<Color32, Color32GameEvent>.MinClampValue BaseVariable<Color32, Color32GameEvent>.MaxClampValue BaseVariable<Color32, Color32GameEvent>.ClampValue(Color32) BaseVariable<Color32, Color32GameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ColorVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ColorVariable.html",
    "title": "| Core Framework Documentation ColorVariable",
    "keywords": "ColorVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class ColorVariable : BaseVariable<Color, ColorGameEvent> Inheritance System.Object BaseObject BaseVariable < Color , ColorGameEvent > ColorVariable Description The Color Scriptable Object Variable. Inherited Members BaseVariable<Color, ColorGameEvent>.readOnly BaseVariable<Color, ColorGameEvent>.clampable BaseVariable<Color, ColorGameEvent>.minValue BaseVariable<Color, ColorGameEvent>.maxValue BaseVariable<Color, ColorGameEvent>.onValueChangeGameEvent BaseVariable<Color, ColorGameEvent>.Value BaseVariable<Color, ColorGameEvent>.MinClampValue BaseVariable<Color, ColorGameEvent>.MaxClampValue BaseVariable<Color, ColorGameEvent>.ClampValue(Color) BaseVariable<Color, ColorGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.DoubleVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.DoubleVariable.html",
    "title": "| Core Framework Documentation DoubleVariable",
    "keywords": "DoubleVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class DoubleVariable : BaseVariable<double, DoubleGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Double , DoubleGameEvent > DoubleVariable Description The double Scriptable Object Variable. Inherited Members BaseVariable<Double, DoubleGameEvent>.readOnly BaseVariable<Double, DoubleGameEvent>.clampable BaseVariable<Double, DoubleGameEvent>.minValue BaseVariable<Double, DoubleGameEvent>.maxValue BaseVariable<Double, DoubleGameEvent>.onValueChangeGameEvent BaseVariable<Double, DoubleGameEvent>.Value BaseVariable<Double, DoubleGameEvent>.MinClampValue BaseVariable<Double, DoubleGameEvent>.MaxClampValue BaseVariable<Double, DoubleGameEvent>.ClampValue(Double) BaseVariable<Double, DoubleGameEvent>.ToString() Methods ClampValue(Double) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Double, DoubleGameEvent>.ClampValue(System.Double) protected override double ClampValue(double value) Parameters System.Double value Returns System.Double The clamped value. Description Clamps the value using the specified value. Operators Implicit(DoubleVariable to Byte) public static implicit operator byte (DoubleVariable variable) Parameters DoubleVariable variable Returns System.Byte Description Implicit(DoubleVariable to Int16) public static implicit operator short (DoubleVariable variable) Parameters DoubleVariable variable Returns System.Int16 Description Implicit(DoubleVariable to Int32) public static implicit operator int (DoubleVariable variable) Parameters DoubleVariable variable Returns System.Int32 Description Implicit(DoubleVariable to Int64) public static implicit operator long (DoubleVariable variable) Parameters DoubleVariable variable Returns System.Int64 Description Implicit(DoubleVariable to SByte) public static implicit operator sbyte (DoubleVariable variable) Parameters DoubleVariable variable Returns System.SByte Description Implicit(DoubleVariable to Single) public static implicit operator float (DoubleVariable variable) Parameters DoubleVariable variable Returns System.Single Description Implicit(DoubleVariable to UInt16) public static implicit operator ushort (DoubleVariable variable) Parameters DoubleVariable variable Returns System.UInt16 Description Implicit(DoubleVariable to UInt32) public static implicit operator uint (DoubleVariable variable) Parameters DoubleVariable variable Returns System.UInt32 Description Implicit(DoubleVariable to UInt64) public static implicit operator ulong (DoubleVariable variable) Parameters DoubleVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.FloatVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.FloatVariable.html",
    "title": "| Core Framework Documentation FloatVariable",
    "keywords": "FloatVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class FloatVariable : BaseVariable<float, FloatGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Single , FloatGameEvent > FloatVariable Description The Float Scriptable Object Variable. Inherited Members BaseVariable<Single, FloatGameEvent>.readOnly BaseVariable<Single, FloatGameEvent>.clampable BaseVariable<Single, FloatGameEvent>.minValue BaseVariable<Single, FloatGameEvent>.maxValue BaseVariable<Single, FloatGameEvent>.onValueChangeGameEvent BaseVariable<Single, FloatGameEvent>.Value BaseVariable<Single, FloatGameEvent>.MinClampValue BaseVariable<Single, FloatGameEvent>.MaxClampValue BaseVariable<Single, FloatGameEvent>.ClampValue(Single) BaseVariable<Single, FloatGameEvent>.ToString() Methods ClampValue(Single) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Single, FloatGameEvent>.ClampValue(System.Single) protected override float ClampValue(float value) Parameters System.Single value Returns System.Single The clamped value. Description Clamps the value using the specified value. Operators Implicit(FloatVariable to Byte) public static implicit operator byte (FloatVariable variable) Parameters FloatVariable variable Returns System.Byte Description Implicit(FloatVariable to Double) public static implicit operator double (FloatVariable variable) Parameters FloatVariable variable Returns System.Double Description Implicit(FloatVariable to Int16) public static implicit operator short (FloatVariable variable) Parameters FloatVariable variable Returns System.Int16 Description Implicit(FloatVariable to Int32) public static implicit operator int (FloatVariable variable) Parameters FloatVariable variable Returns System.Int32 Description Implicit(FloatVariable to Int64) public static implicit operator long (FloatVariable variable) Parameters FloatVariable variable Returns System.Int64 Description Implicit(FloatVariable to SByte) public static implicit operator sbyte (FloatVariable variable) Parameters FloatVariable variable Returns System.SByte Description Implicit(FloatVariable to UInt16) public static implicit operator ushort (FloatVariable variable) Parameters FloatVariable variable Returns System.UInt16 Description Implicit(FloatVariable to UInt32) public static implicit operator uint (FloatVariable variable) Parameters FloatVariable variable Returns System.UInt32 Description Implicit(FloatVariable to UInt64) public static implicit operator ulong (FloatVariable variable) Parameters FloatVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.GameObjectVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.GameObjectVariable.html",
    "title": "| Core Framework Documentation GameObjectVariable",
    "keywords": "GameObjectVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class GameObjectVariable : BaseVariable<GameObject, GameObjectGameEvent> Inheritance System.Object BaseObject BaseVariable < GameObject , GameObjectGameEvent > GameObjectVariable Description The Game Object Scriptable Object Variable. Inherited Members BaseVariable<GameObject, GameObjectGameEvent>.readOnly BaseVariable<GameObject, GameObjectGameEvent>.clampable BaseVariable<GameObject, GameObjectGameEvent>.minValue BaseVariable<GameObject, GameObjectGameEvent>.maxValue BaseVariable<GameObject, GameObjectGameEvent>.onValueChangeGameEvent BaseVariable<GameObject, GameObjectGameEvent>.Value BaseVariable<GameObject, GameObjectGameEvent>.MinClampValue BaseVariable<GameObject, GameObjectGameEvent>.MaxClampValue BaseVariable<GameObject, GameObjectGameEvent>.ClampValue(GameObject) BaseVariable<GameObject, GameObjectGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.html",
    "title": "| Core Framework Documentation CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables",
    "keywords": "Namespace CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables Classes AnimationCurveVariable The Animation Curve Scriptable Object Variable. AudioClipVariable The Audio Clip Scriptable Object Variable. BaseVariable<TType, TEvent> Base Class for all Scriptable Object Variables That have a type. Raises The Game Event when the value of the variable changes. BoolVariable The bool Scriptable Object Variable. BoundsVariable The Bounds Scriptable Object Variable. ByteVariable The Byte Scriptable Object Variable. CharVariable The Char Scriptable Object Variable. Color32Variable The Color32 Scriptable Object Variable. ColorVariable The Color Scriptable Object Variable. DoubleVariable The double Scriptable Object Variable. FloatVariable The Float Scriptable Object Variable. GameObjectVariable The Game Object Scriptable Object Variable. IntVariable The Int Scriptable Object Variable. LayerMaskVariable The Layer Mask Scriptable Object Variable. LongVariable The Long Scriptable Object Variable. ObjectVariable The Object Scriptable Object Variable. QuaternionVariable The Quaternion Scriptable Object Variable. SByteVariable The SByte Scriptable Object Variable. SceneVariable Scriptable constant variable whose scene values are assigned at edit-time by assigning a instance to it. ShortVariable The Short Scriptable Object Variable. StringVariable The String Scriptable Object Variable. UIntVariable The UInt Scriptable Object Variable. ULongVariable The ULong Scriptable Object Variable. UShortVariable The UShort Scriptable Object Variable. Vector2Variable The Vector2 Scriptable Object Variable. Vector3Variable The Vector3 Scriptable Object Variable. Vector4Variable The Vector4 Scriptable Object Variable. Enums VariableTypes"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.IntVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.IntVariable.html",
    "title": "| Core Framework Documentation IntVariable",
    "keywords": "IntVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class IntVariable : BaseVariable<int, IntGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Int32 , IntGameEvent > IntVariable Description The Int Scriptable Object Variable. Inherited Members BaseVariable<Int32, IntGameEvent>.readOnly BaseVariable<Int32, IntGameEvent>.clampable BaseVariable<Int32, IntGameEvent>.minValue BaseVariable<Int32, IntGameEvent>.maxValue BaseVariable<Int32, IntGameEvent>.onValueChangeGameEvent BaseVariable<Int32, IntGameEvent>.Value BaseVariable<Int32, IntGameEvent>.MinClampValue BaseVariable<Int32, IntGameEvent>.MaxClampValue BaseVariable<Int32, IntGameEvent>.ClampValue(Int32) BaseVariable<Int32, IntGameEvent>.ToString() Methods ClampValue(Int32) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Int32, IntGameEvent>.ClampValue(System.Int32) protected override int ClampValue(int value) Parameters System.Int32 value Returns System.Int32 The clamped value. Description Clamps the value using the specified value. Operators Implicit(IntVariable to Byte) public static implicit operator byte (IntVariable variable) Parameters IntVariable variable Returns System.Byte Description Implicit(IntVariable to Double) public static implicit operator double (IntVariable variable) Parameters IntVariable variable Returns System.Double Description Implicit(IntVariable to Int16) public static implicit operator short (IntVariable variable) Parameters IntVariable variable Returns System.Int16 Description Implicit(IntVariable to Int64) public static implicit operator long (IntVariable variable) Parameters IntVariable variable Returns System.Int64 Description Implicit(IntVariable to SByte) public static implicit operator sbyte (IntVariable variable) Parameters IntVariable variable Returns System.SByte Description Implicit(IntVariable to Single) public static implicit operator float (IntVariable variable) Parameters IntVariable variable Returns System.Single Description Implicit(IntVariable to UInt16) public static implicit operator ushort (IntVariable variable) Parameters IntVariable variable Returns System.UInt16 Description Implicit(IntVariable to UInt32) public static implicit operator uint (IntVariable variable) Parameters IntVariable variable Returns System.UInt32 Description Implicit(IntVariable to UInt64) public static implicit operator ulong (IntVariable variable) Parameters IntVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.LayerMaskVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.LayerMaskVariable.html",
    "title": "| Core Framework Documentation LayerMaskVariable",
    "keywords": "LayerMaskVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class LayerMaskVariable : BaseVariable<LayerMask, LayerMaskGameEvent> Inheritance System.Object BaseObject BaseVariable < LayerMask , LayerMaskGameEvent > LayerMaskVariable Description The Layer Mask Scriptable Object Variable. Inherited Members BaseVariable<LayerMask, LayerMaskGameEvent>.readOnly BaseVariable<LayerMask, LayerMaskGameEvent>.clampable BaseVariable<LayerMask, LayerMaskGameEvent>.minValue BaseVariable<LayerMask, LayerMaskGameEvent>.maxValue BaseVariable<LayerMask, LayerMaskGameEvent>.onValueChangeGameEvent BaseVariable<LayerMask, LayerMaskGameEvent>.Value BaseVariable<LayerMask, LayerMaskGameEvent>.MinClampValue BaseVariable<LayerMask, LayerMaskGameEvent>.MaxClampValue BaseVariable<LayerMask, LayerMaskGameEvent>.ClampValue(LayerMask) BaseVariable<LayerMask, LayerMaskGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.LongVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.LongVariable.html",
    "title": "| Core Framework Documentation LongVariable",
    "keywords": "LongVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class LongVariable : BaseVariable<long, LongGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Int64 , LongGameEvent > LongVariable Description The Long Scriptable Object Variable. Inherited Members BaseVariable<Int64, LongGameEvent>.readOnly BaseVariable<Int64, LongGameEvent>.clampable BaseVariable<Int64, LongGameEvent>.minValue BaseVariable<Int64, LongGameEvent>.maxValue BaseVariable<Int64, LongGameEvent>.onValueChangeGameEvent BaseVariable<Int64, LongGameEvent>.Value BaseVariable<Int64, LongGameEvent>.MinClampValue BaseVariable<Int64, LongGameEvent>.MaxClampValue BaseVariable<Int64, LongGameEvent>.ClampValue(Int64) BaseVariable<Int64, LongGameEvent>.ToString() Methods ClampValue(Int64) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Int64, LongGameEvent>.ClampValue(System.Int64) protected override long ClampValue(long value) Parameters System.Int64 value Returns System.Int64 The clamped value. Description Clamps the value using the specified value. Operators Implicit(LongVariable to Byte) public static implicit operator byte (LongVariable variable) Parameters LongVariable variable Returns System.Byte Description Implicit(LongVariable to Double) public static implicit operator double (LongVariable variable) Parameters LongVariable variable Returns System.Double Description Implicit(LongVariable to Int16) public static implicit operator short (LongVariable variable) Parameters LongVariable variable Returns System.Int16 Description Implicit(LongVariable to Int32) public static implicit operator int (LongVariable variable) Parameters LongVariable variable Returns System.Int32 Description Implicit(LongVariable to SByte) public static implicit operator sbyte (LongVariable variable) Parameters LongVariable variable Returns System.SByte Description Implicit(LongVariable to Single) public static implicit operator float (LongVariable variable) Parameters LongVariable variable Returns System.Single Description Implicit(LongVariable to UInt16) public static implicit operator ushort (LongVariable variable) Parameters LongVariable variable Returns System.UInt16 Description Implicit(LongVariable to UInt32) public static implicit operator uint (LongVariable variable) Parameters LongVariable variable Returns System.UInt32 Description Implicit(LongVariable to UInt64) public static implicit operator ulong (LongVariable variable) Parameters LongVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ObjectVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ObjectVariable.html",
    "title": "| Core Framework Documentation ObjectVariable",
    "keywords": "ObjectVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class ObjectVariable : BaseVariable<Object, ObjectGameEvent> Inheritance System.Object BaseObject BaseVariable < Object , ObjectGameEvent > ObjectVariable Description The Object Scriptable Object Variable. Inherited Members BaseVariable<Object, ObjectGameEvent>.readOnly BaseVariable<Object, ObjectGameEvent>.clampable BaseVariable<Object, ObjectGameEvent>.minValue BaseVariable<Object, ObjectGameEvent>.maxValue BaseVariable<Object, ObjectGameEvent>.onValueChangeGameEvent BaseVariable<Object, ObjectGameEvent>.Value BaseVariable<Object, ObjectGameEvent>.MinClampValue BaseVariable<Object, ObjectGameEvent>.MaxClampValue BaseVariable<Object, ObjectGameEvent>.ClampValue(Object) BaseVariable<Object, ObjectGameEvent>.ToString() Methods ToString() Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<Object, ObjectGameEvent>.ToString() public override string ToString() Returns System.String Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.QuaternionVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.QuaternionVariable.html",
    "title": "| Core Framework Documentation QuaternionVariable",
    "keywords": "QuaternionVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class QuaternionVariable : BaseVariable<Quaternion, QuaternionGameEvent> Inheritance System.Object BaseObject BaseVariable < Quaternion , QuaternionGameEvent > QuaternionVariable Description The Quaternion Scriptable Object Variable. Inherited Members BaseVariable<Quaternion, QuaternionGameEvent>.readOnly BaseVariable<Quaternion, QuaternionGameEvent>.clampable BaseVariable<Quaternion, QuaternionGameEvent>.minValue BaseVariable<Quaternion, QuaternionGameEvent>.maxValue BaseVariable<Quaternion, QuaternionGameEvent>.onValueChangeGameEvent BaseVariable<Quaternion, QuaternionGameEvent>.Value BaseVariable<Quaternion, QuaternionGameEvent>.MinClampValue BaseVariable<Quaternion, QuaternionGameEvent>.MaxClampValue BaseVariable<Quaternion, QuaternionGameEvent>.ClampValue(Quaternion) BaseVariable<Quaternion, QuaternionGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.SByteVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.SByteVariable.html",
    "title": "| Core Framework Documentation SByteVariable",
    "keywords": "SByteVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class SByteVariable : BaseVariable<sbyte, SByteGameEvent> Inheritance System.Object BaseObject BaseVariable < System.SByte , SByteGameEvent > SByteVariable Description The SByte Scriptable Object Variable. Inherited Members BaseVariable<SByte, SByteGameEvent>.readOnly BaseVariable<SByte, SByteGameEvent>.clampable BaseVariable<SByte, SByteGameEvent>.minValue BaseVariable<SByte, SByteGameEvent>.maxValue BaseVariable<SByte, SByteGameEvent>.onValueChangeGameEvent BaseVariable<SByte, SByteGameEvent>.Value BaseVariable<SByte, SByteGameEvent>.MinClampValue BaseVariable<SByte, SByteGameEvent>.MaxClampValue BaseVariable<SByte, SByteGameEvent>.ClampValue(SByte) BaseVariable<SByte, SByteGameEvent>.ToString() Methods ClampValue(SByte) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.SByte, SByteGameEvent>.ClampValue(System.SByte) protected override sbyte ClampValue(sbyte value) Parameters System.SByte value Returns System.SByte The clamped value. Description Clamps the value using the specified value. Operators Implicit(SByteVariable to Byte) public static implicit operator byte (SByteVariable variable) Parameters SByteVariable variable Returns System.Byte Description Implicit(SByteVariable to Double) public static implicit operator double (SByteVariable variable) Parameters SByteVariable variable Returns System.Double Description Implicit(SByteVariable to Int16) public static implicit operator short (SByteVariable variable) Parameters SByteVariable variable Returns System.Int16 Description Implicit(SByteVariable to Int32) public static implicit operator int (SByteVariable variable) Parameters SByteVariable variable Returns System.Int32 Description Implicit(SByteVariable to Int64) public static implicit operator long (SByteVariable variable) Parameters SByteVariable variable Returns System.Int64 Description Implicit(SByteVariable to Single) public static implicit operator float (SByteVariable variable) Parameters SByteVariable variable Returns System.Single Description Implicit(SByteVariable to UInt16) public static implicit operator ushort (SByteVariable variable) Parameters SByteVariable variable Returns System.UInt16 Description Implicit(SByteVariable to UInt32) public static implicit operator uint (SByteVariable variable) Parameters SByteVariable variable Returns System.UInt32 Description Implicit(SByteVariable to UInt64) public static implicit operator ulong (SByteVariable variable) Parameters SByteVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.SceneVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.SceneVariable.html",
    "title": "| Core Framework Documentation SceneVariable",
    "keywords": "SceneVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class SceneVariable : BaseVariable<SceneInfo, SceneGameEvent> Inheritance System.Object BaseObject BaseVariable < SceneInfo , SceneGameEvent > SceneVariable Description Scriptable constant variable whose scene values are assigned at edit-time by assigning a instance to it. Inherited Members BaseVariable<SceneInfo, SceneGameEvent>.readOnly BaseVariable<SceneInfo, SceneGameEvent>.clampable BaseVariable<SceneInfo, SceneGameEvent>.minValue BaseVariable<SceneInfo, SceneGameEvent>.maxValue BaseVariable<SceneInfo, SceneGameEvent>.onValueChangeGameEvent BaseVariable<SceneInfo, SceneGameEvent>.Value BaseVariable<SceneInfo, SceneGameEvent>.MinClampValue BaseVariable<SceneInfo, SceneGameEvent>.MaxClampValue BaseVariable<SceneInfo, SceneGameEvent>.ClampValue(SceneInfo) BaseVariable<SceneInfo, SceneGameEvent>.ToString()"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ShortVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ShortVariable.html",
    "title": "| Core Framework Documentation ShortVariable",
    "keywords": "ShortVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class ShortVariable : BaseVariable<short, ShortGameEvent> Inheritance System.Object BaseObject BaseVariable < System.Int16 , ShortGameEvent > ShortVariable Description The Short Scriptable Object Variable. Inherited Members BaseVariable<Int16, ShortGameEvent>.readOnly BaseVariable<Int16, ShortGameEvent>.clampable BaseVariable<Int16, ShortGameEvent>.minValue BaseVariable<Int16, ShortGameEvent>.maxValue BaseVariable<Int16, ShortGameEvent>.onValueChangeGameEvent BaseVariable<Int16, ShortGameEvent>.Value BaseVariable<Int16, ShortGameEvent>.MinClampValue BaseVariable<Int16, ShortGameEvent>.MaxClampValue BaseVariable<Int16, ShortGameEvent>.ClampValue(Int16) BaseVariable<Int16, ShortGameEvent>.ToString() Methods ClampValue(Int16) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.Int16, ShortGameEvent>.ClampValue(System.Int16) protected override short ClampValue(short value) Parameters System.Int16 value Returns System.Int16 The clamped value. Description Clamps the value using the specified value. Operators Implicit(ShortVariable to Byte) public static implicit operator byte (ShortVariable variable) Parameters ShortVariable variable Returns System.Byte Description Implicit(ShortVariable to Double) public static implicit operator double (ShortVariable variable) Parameters ShortVariable variable Returns System.Double Description Implicit(ShortVariable to Int32) public static implicit operator int (ShortVariable variable) Parameters ShortVariable variable Returns System.Int32 Description Implicit(ShortVariable to Int64) public static implicit operator long (ShortVariable variable) Parameters ShortVariable variable Returns System.Int64 Description Implicit(ShortVariable to SByte) public static implicit operator sbyte (ShortVariable variable) Parameters ShortVariable variable Returns System.SByte Description Implicit(ShortVariable to Single) public static implicit operator float (ShortVariable variable) Parameters ShortVariable variable Returns System.Single Description Implicit(ShortVariable to UInt16) public static implicit operator ushort (ShortVariable variable) Parameters ShortVariable variable Returns System.UInt16 Description Implicit(ShortVariable to UInt32) public static implicit operator uint (ShortVariable variable) Parameters ShortVariable variable Returns System.UInt32 Description Implicit(ShortVariable to UInt64) public static implicit operator ulong (ShortVariable variable) Parameters ShortVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.StringVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.StringVariable.html",
    "title": "| Core Framework Documentation StringVariable",
    "keywords": "StringVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class StringVariable : BaseVariable<string, StringGameEvent> Inheritance System.Object BaseObject BaseVariable < System.String , StringGameEvent > StringVariable Description The String Scriptable Object Variable. Inherited Members BaseVariable<String, StringGameEvent>.readOnly BaseVariable<String, StringGameEvent>.clampable BaseVariable<String, StringGameEvent>.minValue BaseVariable<String, StringGameEvent>.maxValue BaseVariable<String, StringGameEvent>.onValueChangeGameEvent BaseVariable<String, StringGameEvent>.Value BaseVariable<String, StringGameEvent>.MinClampValue BaseVariable<String, StringGameEvent>.MaxClampValue BaseVariable<String, StringGameEvent>.ClampValue(String) BaseVariable<String, StringGameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.UIntVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.UIntVariable.html",
    "title": "| Core Framework Documentation UIntVariable",
    "keywords": "UIntVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class UIntVariable : BaseVariable<uint, UIntGameEvent> Inheritance System.Object BaseObject BaseVariable < System.UInt32 , UIntGameEvent > UIntVariable Description The UInt Scriptable Object Variable. Inherited Members BaseVariable<UInt32, UIntGameEvent>.readOnly BaseVariable<UInt32, UIntGameEvent>.clampable BaseVariable<UInt32, UIntGameEvent>.minValue BaseVariable<UInt32, UIntGameEvent>.maxValue BaseVariable<UInt32, UIntGameEvent>.onValueChangeGameEvent BaseVariable<UInt32, UIntGameEvent>.Value BaseVariable<UInt32, UIntGameEvent>.MinClampValue BaseVariable<UInt32, UIntGameEvent>.MaxClampValue BaseVariable<UInt32, UIntGameEvent>.ClampValue(UInt32) BaseVariable<UInt32, UIntGameEvent>.ToString() Methods ClampValue(UInt32) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.UInt32, UIntGameEvent>.ClampValue(System.UInt32) protected override uint ClampValue(uint value) Parameters System.UInt32 value Returns System.UInt32 The clamped value. Description Clamps the value using the specified value. Operators Implicit(UIntVariable to Byte) public static implicit operator byte (UIntVariable variable) Parameters UIntVariable variable Returns System.Byte Description Implicit(UIntVariable to Double) public static implicit operator double (UIntVariable variable) Parameters UIntVariable variable Returns System.Double Description Implicit(UIntVariable to Int16) public static implicit operator short (UIntVariable variable) Parameters UIntVariable variable Returns System.Int16 Description Implicit(UIntVariable to Int32) public static implicit operator int (UIntVariable variable) Parameters UIntVariable variable Returns System.Int32 Description Implicit(UIntVariable to Int64) public static implicit operator long (UIntVariable variable) Parameters UIntVariable variable Returns System.Int64 Description Implicit(UIntVariable to SByte) public static implicit operator sbyte (UIntVariable variable) Parameters UIntVariable variable Returns System.SByte Description Implicit(UIntVariable to Single) public static implicit operator float (UIntVariable variable) Parameters UIntVariable variable Returns System.Single Description Implicit(UIntVariable to UInt16) public static implicit operator ushort (UIntVariable variable) Parameters UIntVariable variable Returns System.UInt16 Description Implicit(UIntVariable to UInt64) public static implicit operator ulong (UIntVariable variable) Parameters UIntVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ULongVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.ULongVariable.html",
    "title": "| Core Framework Documentation ULongVariable",
    "keywords": "ULongVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class ULongVariable : BaseVariable<ulong, ULongGameEvent> Inheritance System.Object BaseObject BaseVariable < System.UInt64 , ULongGameEvent > ULongVariable Description The ULong Scriptable Object Variable. Inherited Members BaseVariable<UInt64, ULongGameEvent>.readOnly BaseVariable<UInt64, ULongGameEvent>.clampable BaseVariable<UInt64, ULongGameEvent>.minValue BaseVariable<UInt64, ULongGameEvent>.maxValue BaseVariable<UInt64, ULongGameEvent>.onValueChangeGameEvent BaseVariable<UInt64, ULongGameEvent>.Value BaseVariable<UInt64, ULongGameEvent>.MinClampValue BaseVariable<UInt64, ULongGameEvent>.MaxClampValue BaseVariable<UInt64, ULongGameEvent>.ClampValue(UInt64) BaseVariable<UInt64, ULongGameEvent>.ToString() Methods ClampValue(UInt64) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.UInt64, ULongGameEvent>.ClampValue(System.UInt64) protected override ulong ClampValue(ulong value) Parameters System.UInt64 value Returns System.UInt64 The clamped value. Description Clamps the value using the specified value. Operators Implicit(ULongVariable to Byte) public static implicit operator byte (ULongVariable variable) Parameters ULongVariable variable Returns System.Byte Description Implicit(ULongVariable to Double) public static implicit operator double (ULongVariable variable) Parameters ULongVariable variable Returns System.Double Description Implicit(ULongVariable to Int32) public static implicit operator int (ULongVariable variable) Parameters ULongVariable variable Returns System.Int32 Description Implicit(ULongVariable to Int64) public static implicit operator long (ULongVariable variable) Parameters ULongVariable variable Returns System.Int64 Description Implicit(ULongVariable to SByte) public static implicit operator sbyte (ULongVariable variable) Parameters ULongVariable variable Returns System.SByte Description Implicit(ULongVariable to Single) public static implicit operator float (ULongVariable variable) Parameters ULongVariable variable Returns System.Single Description Implicit(ULongVariable to UInt16) public static implicit operator ushort (ULongVariable variable) Parameters ULongVariable variable Returns System.UInt16 Description Implicit(ULongVariable to UInt32) public static implicit operator uint (ULongVariable variable) Parameters ULongVariable variable Returns System.UInt32 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.UShortVariable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.UShortVariable.html",
    "title": "| Core Framework Documentation UShortVariable",
    "keywords": "UShortVariable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class UShortVariable : BaseVariable<ushort, UShortGameEvent> Inheritance System.Object BaseObject BaseVariable < System.UInt16 , UShortGameEvent > UShortVariable Description The UShort Scriptable Object Variable. Inherited Members BaseVariable<UInt16, UShortGameEvent>.readOnly BaseVariable<UInt16, UShortGameEvent>.clampable BaseVariable<UInt16, UShortGameEvent>.minValue BaseVariable<UInt16, UShortGameEvent>.maxValue BaseVariable<UInt16, UShortGameEvent>.onValueChangeGameEvent BaseVariable<UInt16, UShortGameEvent>.Value BaseVariable<UInt16, UShortGameEvent>.MinClampValue BaseVariable<UInt16, UShortGameEvent>.MaxClampValue BaseVariable<UInt16, UShortGameEvent>.ClampValue(UInt16) BaseVariable<UInt16, UShortGameEvent>.ToString() Methods ClampValue(UInt16) Overrides CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.BaseVariable<System.UInt16, UShortGameEvent>.ClampValue(System.UInt16) protected override ushort ClampValue(ushort value) Parameters System.UInt16 value Returns System.UInt16 The clamped value. Description Clamps the value using the specified value. Operators Implicit(UShortVariable to Byte) public static implicit operator byte (UShortVariable variable) Parameters UShortVariable variable Returns System.Byte Description Implicit(UShortVariable to Double) public static implicit operator double (UShortVariable variable) Parameters UShortVariable variable Returns System.Double Description Implicit(UShortVariable to Int16) public static implicit operator short (UShortVariable variable) Parameters UShortVariable variable Returns System.Int16 Description Implicit(UShortVariable to Int32) public static implicit operator int (UShortVariable variable) Parameters UShortVariable variable Returns System.Int32 Description Implicit(UShortVariable to Int64) public static implicit operator long (UShortVariable variable) Parameters UShortVariable variable Returns System.Int64 Description Implicit(UShortVariable to SByte) public static implicit operator sbyte (UShortVariable variable) Parameters UShortVariable variable Returns System.SByte Description Implicit(UShortVariable to Single) public static implicit operator float (UShortVariable variable) Parameters UShortVariable variable Returns System.Single Description Implicit(UShortVariable to UInt16) public static implicit operator ushort (UShortVariable variable) Parameters UShortVariable variable Returns System.UInt16 Description Implicit(UShortVariable to UInt64) public static implicit operator ulong (UShortVariable variable) Parameters UShortVariable variable Returns System.UInt64 Description See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.VariableTypes.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.VariableTypes.html",
    "title": "| Core Framework Documentation VariableTypes",
    "keywords": "VariableTypes Enum in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public enum VariableTypes Description AnimationCurve AudioClip Bool Bounds Byte Char Color Color32 Double Float GameObject Int LayerMask Long Object Quaternion SByte Scene Short String UInt ULong UShort Vector2 Vector3 Vector4"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector2Variable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector2Variable.html",
    "title": "| Core Framework Documentation Vector2Variable",
    "keywords": "Vector2Variable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class Vector2Variable : BaseVariable<Vector2, Vector2GameEvent> Inheritance System.Object BaseObject BaseVariable < Vector2 , Vector2GameEvent > Vector2Variable Description The Vector2 Scriptable Object Variable. Inherited Members BaseVariable<Vector2, Vector2GameEvent>.readOnly BaseVariable<Vector2, Vector2GameEvent>.clampable BaseVariable<Vector2, Vector2GameEvent>.minValue BaseVariable<Vector2, Vector2GameEvent>.maxValue BaseVariable<Vector2, Vector2GameEvent>.onValueChangeGameEvent BaseVariable<Vector2, Vector2GameEvent>.Value BaseVariable<Vector2, Vector2GameEvent>.MinClampValue BaseVariable<Vector2, Vector2GameEvent>.MaxClampValue BaseVariable<Vector2, Vector2GameEvent>.ClampValue(Vector2) BaseVariable<Vector2, Vector2GameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector3Variable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector3Variable.html",
    "title": "| Core Framework Documentation Vector3Variable",
    "keywords": "Vector3Variable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public sealed class Vector3Variable : BaseVariable<Vector3, Vector3GameEvent> Inheritance System.Object BaseObject BaseVariable < Vector3 , Vector3GameEvent > Vector3Variable Description The Vector3 Scriptable Object Variable. Inherited Members BaseVariable<Vector3, Vector3GameEvent>.readOnly BaseVariable<Vector3, Vector3GameEvent>.clampable BaseVariable<Vector3, Vector3GameEvent>.minValue BaseVariable<Vector3, Vector3GameEvent>.maxValue BaseVariable<Vector3, Vector3GameEvent>.onValueChangeGameEvent BaseVariable<Vector3, Vector3GameEvent>.Value BaseVariable<Vector3, Vector3GameEvent>.MinClampValue BaseVariable<Vector3, Vector3GameEvent>.MaxClampValue BaseVariable<Vector3, Vector3GameEvent>.ClampValue(Vector3) BaseVariable<Vector3, Vector3GameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector4Variable.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables.Vector4Variable.html",
    "title": "| Core Framework Documentation Vector4Variable",
    "keywords": "Vector4Variable Class in CoreFramework.ScriptableObjectArchitecture.ScriptableObjectVariables public class Vector4Variable : BaseVariable<Vector4, Vector4GameEvent> Inheritance System.Object BaseObject BaseVariable < Vector4 , Vector4GameEvent > Vector4Variable Description The Vector4 Scriptable Object Variable. Inherited Members BaseVariable<Vector4, Vector4GameEvent>.readOnly BaseVariable<Vector4, Vector4GameEvent>.clampable BaseVariable<Vector4, Vector4GameEvent>.minValue BaseVariable<Vector4, Vector4GameEvent>.maxValue BaseVariable<Vector4, Vector4GameEvent>.onValueChangeGameEvent BaseVariable<Vector4, Vector4GameEvent>.Value BaseVariable<Vector4, Vector4GameEvent>.MinClampValue BaseVariable<Vector4, Vector4GameEvent>.MaxClampValue BaseVariable<Vector4, Vector4GameEvent>.ClampValue(Vector4) BaseVariable<Vector4, Vector4GameEvent>.ToString() See Also BaseVariable <TType, TEvent>"
  },
  "api/CoreFramework.ScriptableObjectArchitecture.Utility.html": {
    "href": "api/CoreFramework.ScriptableObjectArchitecture.Utility.html",
    "title": "| Core Framework Documentation Utility",
    "keywords": "Utility Class in CoreFramework.ScriptableObjectArchitecture public static class Utility Inheritance System.Object Utility Description Provides a collection of constants for organizing assets within the Unity Editor's menus. Fields AddComponentRootMenu public const string AddComponentRootMenu = \"Scriptable Object Architecture/\" Field Value System.String AddComponentRootMenu Path for the Add Component root menu in the Unity Editor. Description Path for the Add Component root menu in the Unity Editor. AdvancedGameEvent public const string AdvancedGameEvent = \"Core Framework/Game Events/Advanced/\" Field Value System.String AdvancedGameEvent Path for the Advanced submenu under the game events submenu. Description Path for the Advanced submenu under the game events submenu. AdvancedVariableSubmenu public const string AdvancedVariableSubmenu = \"Core Framework/Variables/Advanced/\" Field Value System.String AdvancedVariableSubmenu Path for the Advanced submenu under the variables submenu. Description Path for the Advanced submenu under the variables submenu. AssetMenuOrderEvents public const int AssetMenuOrderEvents = 40 Field Value System.Int32 AssetMenuOrderEvents Defines the order in the asset menu for event assets. Description Defines the order in the asset menu for event assets. AssetMenuOrderVariables public const int AssetMenuOrderVariables = 10 Field Value System.Int32 AssetMenuOrderVariables Defines the order in the asset menu for variable assets. Description Defines the order in the asset menu for variable assets. EventListenerSubmenu public const string EventListenerSubmenu = \"Scriptable Object Architecture/Event Listeners/\" Field Value System.String EventListenerSubmenu Path for the Event Listeners submenu under the Add Component root menu. Description Path for the Event Listeners submenu under the Add Component root menu. GameEvent public const string GameEvent = \"Core Framework/Game Events/\" Field Value System.String GameEvent Path for the game events submenu under the main ScriptableObject Architecture menu. Description Path for the game events submenu under the main ScriptableObject Architecture menu. GameEventStructs public const string GameEventStructs = \"Core Framework/Game Events/Structs/\" Field Value System.String GameEventStructs Path for the Structs submenu under the game events submenu. Description Path for the Structs submenu under the game events submenu. StructsSubmenu public const string StructsSubmenu = \"Core Framework/Variables/Structs/\" Field Value System.String StructsSubmenu Path for the Structs submenu under the variables submenu. Description Path for the Structs submenu under the variables submenu. VariableSubmenu public const string VariableSubmenu = \"Core Framework/Variables/\" Field Value System.String VariableSubmenu Path for the variables submenu under the main ScriptableObject Architecture menu. Description Path for the variables submenu under the main ScriptableObject Architecture menu."
  },
  "api/CoreFramework.Settings.CoreFrameWorkSettings.html": {
    "href": "api/CoreFramework.Settings.CoreFrameWorkSettings.html",
    "title": "| Core Framework Documentation CoreFrameWorkSettings",
    "keywords": "CoreFrameWorkSettings Class in CoreFramework.Settings public static class CoreFrameWorkSettings Inheritance System.Object CoreFrameWorkSettings Description Static class to provide global access to Core Framework settings, with default values provided if the settings asset is not set. Fields SettingsSO public static CoreFrameworkSettingsSO SettingsSO Field Value CoreFrameworkSettingsSO SettingsSO The CoreFrameworkSettingsSO instance that contains the configurable settings. Description The CoreFrameworkSettingsSO instance that contains the configurable settings. Properties BootScene public static string BootScene { get; } Property Value System.String BootScene The name of the boot scene. Defaults to \"Bootstrapper\" if SettingsSO is not set. Description The name of the boot scene. Defaults to \"Bootstrapper\" if SettingsSO is not set. ErrorSize public static int ErrorSize { get; } Property Value System.Int32 ErrorSize The font size for error log messages. Defaults to 16 if SettingsSO is not set. Description The font size for error log messages. Defaults to 16 if SettingsSO is not set. InfoSize public static int InfoSize { get; } Property Value System.Int32 InfoSize The font size for informational log messages. Defaults to 14 if SettingsSO is not set. Description The font size for informational log messages. Defaults to 14 if SettingsSO is not set. ShowDebug public static bool ShowDebug { get; } Property Value System.Boolean ShowDebug Flag to indicate if debugging information should be displayed. Defaults to true if SettingsSO is not set. Description Flag to indicate if debugging information should be displayed. Defaults to true if SettingsSO is not set. StartScene public static string StartScene { get; } Property Value System.String StartScene The name of the starting scene. Defaults to \"SampleScene\" if SettingsSO is not set. Description The name of the starting scene. Defaults to \"SampleScene\" if SettingsSO is not set. WarningSize public static int WarningSize { get; } Property Value System.Int32 WarningSize The font size for warning log messages. Defaults to 15 if SettingsSO is not set. Description The font size for warning log messages. Defaults to 15 if SettingsSO is not set."
  },
  "api/CoreFramework.Settings.CoreFrameworkSettingsSO.html": {
    "href": "api/CoreFramework.Settings.CoreFrameworkSettingsSO.html",
    "title": "| Core Framework Documentation CoreFrameworkSettingsSO",
    "keywords": "CoreFrameworkSettingsSO Class in CoreFramework.Settings public class CoreFrameworkSettingsSO : ScriptableObject Inheritance System.Object CoreFrameworkSettingsSO Description A ScriptableObject that contains settings for the Core Framework, including scene names and logging preferences. Fields bootScene public string bootScene Field Value System.String bootScene The name of the bootstrapper scene that initializes the application. Description The name of the bootstrapper scene that initializes the application. errorSize public int errorSize Field Value System.Int32 errorSize The font size for error log messages. Description The font size for error log messages. infoSize public int infoSize Field Value System.Int32 infoSize The font size for informational log messages. Description The font size for informational log messages. showDebug public bool showDebug Field Value System.Boolean showDebug A flag indicating whether debugging logs should be shown. Description A flag indicating whether debugging logs should be shown. startScene public string startScene Field Value System.String startScene The name of the initial scene to start the application. Description The name of the initial scene to start the application. warningSize public int warningSize Field Value System.Int32 warningSize The font size for warning log messages. Description The font size for warning log messages."
  },
  "api/CoreFramework.Settings.html": {
    "href": "api/CoreFramework.Settings.html",
    "title": "| Core Framework Documentation CoreFramework.Settings",
    "keywords": "Namespace CoreFramework.Settings Classes CoreFrameWorkSettings Static class to provide global access to Core Framework settings, with default values provided if the settings asset is not set. CoreFrameworkSettingsSO A ScriptableObject that contains settings for the Core Framework, including scene names and logging preferences."
  },
  "api/CoreFramework.Singleton-1.html": {
    "href": "api/CoreFramework.Singleton-1.html",
    "title": "| Core Framework Documentation Singleton<T>",
    "keywords": "Singleton<T> Class in CoreFramework public class Singleton<T> : MonoBehaviour where T : Component Inheritance System.Object Singleton<T> Description Generic Singleton class for MonoBehaviour types. Ensures that only one instance of the MonoBehaviour exists within the application. If no instance is found, one will be created. Type Parameters T The type of the MonoBehaviour that should be a Singleton. Fields instance protected static T instance Field Value T instance The static instance of the Singleton. Description The static instance of the Singleton. Properties Current public static T Current { get; } Property Value T Current The current instance of the Singleton. Use this for all instance calls instead of the static property. Description The current instance of the Singleton. Use this for all instance calls instead of the static property. HasInstance public static bool HasInstance { get; } Property Value System.Boolean HasInstance Checks if an instance of the Singleton already exists. Description Checks if an instance of the Singleton already exists. Instance public static T Instance { get; } Property Value T Instance Provides access to the Singleton instance, creating it if it does not already exist. Description Provides access to the Singleton instance, creating it if it does not already exist. Methods Awake() protected virtual void Awake() Description Initializes the Singleton instance. Called by Unity when the script instance is being loaded. InitializeSingleton() protected virtual void InitializeSingleton() Description Sets the static instance to this object if it is the first to be created. Otherwise, destroys the GameObject to which this script is attached if an instance already exists. TryGetInstance() public static T TryGetInstance() Returns T The instance of the Singleton or null. Description Retrieves the instance of the Singleton if it exists; otherwise, returns null."
  },
  "api/CoreFramework.Utilities.Application.html": {
    "href": "api/CoreFramework.Utilities.Application.html",
    "title": "| Core Framework Documentation Application",
    "keywords": "Application Class in CoreFramework.Utilities public static class Application Inheritance System.Object Application Description Provides a static utility methods for the game application. Methods QuitGame() public static void QuitGame() Description Quits the game application. When called in the Unity Editor, it will stop the play mode. When called in a built game, it will close the application."
  },
  "api/CoreFramework.Utilities.CountdownTimer.html": {
    "href": "api/CoreFramework.Utilities.CountdownTimer.html",
    "title": "| Core Framework Documentation CountdownTimer",
    "keywords": "CountdownTimer Class in CoreFramework.Utilities public class CountdownTimer : Timer Inheritance System.Object Timer CountdownTimer Description A countdown timer that decrements its time until it reaches zero. Inherited Members Timer.initialTime Timer.Time Timer.IsRunning Timer.Progress Timer.OnTimerStart Timer.OnTimerStop Timer.Start() Timer.Stop() Timer.Resume() Timer.Pause() Constructors CountdownTimer(Single) public CountdownTimer(float value) Parameters System.Single value The time value to count down from. Description Initializes a new instance of the CountdownTimer class with the specified time value. Properties IsFinished public bool IsFinished { get; } Property Value System.Boolean IsFinished Indicates whether the countdown has finished. Description Indicates whether the countdown has finished. Methods Reset() public void Reset() Description Resets the countdown timer to the initial time value. Reset(Single) public void Reset(float newTime) Parameters System.Single newTime The new initial time to set. Description Resets the countdown timer with a new initial time value. Tick(Single) Overrides Timer.Tick(Single) public override void Tick(float deltaTime) Parameters System.Single deltaTime The time in seconds to advance the timer. Description Advances the timer by the given delta time. This method should be implemented by derived classes."
  },
  "api/CoreFramework.Utilities.html": {
    "href": "api/CoreFramework.Utilities.html",
    "title": "| Core Framework Documentation CoreFramework.Utilities",
    "keywords": "Namespace CoreFramework.Utilities Classes Application Provides a static utility methods for the game application. CountdownTimer A countdown timer that decrements its time until it reaches zero. StopwatchTimer A stopwatch timer that increments its time from zero upwards. Timer Represents a generic timer with basic functionality to start, stop, pause, and resume."
  },
  "api/CoreFramework.Utilities.StopwatchTimer.html": {
    "href": "api/CoreFramework.Utilities.StopwatchTimer.html",
    "title": "| Core Framework Documentation StopwatchTimer",
    "keywords": "StopwatchTimer Class in CoreFramework.Utilities public class StopwatchTimer : Timer Inheritance System.Object Timer StopwatchTimer Description A stopwatch timer that increments its time from zero upwards. Inherited Members Timer.initialTime Timer.Time Timer.IsRunning Timer.Progress Timer.OnTimerStart Timer.OnTimerStop Timer.Start() Timer.Stop() Timer.Resume() Timer.Pause() Constructors StopwatchTimer() public StopwatchTimer() Description Initializes a new instance of the StopwatchTimer class. Methods GetTime() public float GetTime() Returns System.Single The current time of the stopwatch. Description Gets the current time of the stopwatch. Reset() public void Reset() Description Resets the stopwatch timer to zero. Tick(Single) Overrides Timer.Tick(Single) public override void Tick(float deltaTime) Parameters System.Single deltaTime The time in seconds to advance the timer. Description Advances the timer by the given delta time. This method should be implemented by derived classes."
  },
  "api/CoreFramework.Utilities.Timer.html": {
    "href": "api/CoreFramework.Utilities.Timer.html",
    "title": "| Core Framework Documentation Timer",
    "keywords": "Timer Class in CoreFramework.Utilities public abstract class Timer Inheritance System.Object Timer CountdownTimer StopwatchTimer Description Represents a generic timer with basic functionality to start, stop, pause, and resume. Constructors Timer(Single) protected Timer(float value) Parameters System.Single value The initial time value for the timer. Description Initializes a new instance of the Timer class with the specified time value. Fields initialTime protected float initialTime Field Value System.Single initialTime The initial time set for the timer. Description The initial time set for the timer. OnTimerStart public Action OnTimerStart Field Value Action OnTimerStart Event triggered when the timer starts. Description Event triggered when the timer starts. OnTimerStop public Action OnTimerStop Field Value Action OnTimerStop Event triggered when the timer stops. Description Event triggered when the timer stops. Properties IsRunning public bool IsRunning { get; protected set; } Property Value System.Boolean IsRunning Indicates whether the timer is currently running. Description Indicates whether the timer is currently running. Progress public float Progress { get; } Property Value System.Single Progress The progress of the timer represented as a fraction of the current time over the initial time. Description The progress of the timer represented as a fraction of the current time over the initial time. Time protected float Time { get; set; } Property Value System.Single Time The current time of the timer. Description The current time of the timer. Methods Pause() public void Pause() Description Pauses the timer. Resume() public void Resume() Description Resumes a paused timer. Start() public void Start() Description Starts the timer. Stop() public void Stop() Description Stops the timer. Tick(Single) public abstract void Tick(float deltaTime) Parameters System.Single deltaTime The time in seconds to advance the timer. Description Advances the timer by the given delta time. This method should be implemented by derived classes."
  },
  "api/CoreFrameworkEditor.Animation.AnimationParameterDrawer.html": {
    "href": "api/CoreFrameworkEditor.Animation.AnimationParameterDrawer.html",
    "title": "| Core Framework Documentation AnimationParameterDrawer",
    "keywords": "AnimationParameterDrawer Class in CoreFrameworkEditor.Animation public class AnimationParameterDrawer : PropertyDrawer Inheritance System.Object AnimationParameterDrawer Description From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 A property drawer for AnimationParameter https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Animation.html": {
    "href": "api/CoreFrameworkEditor.Animation.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Animation",
    "keywords": "Namespace CoreFrameworkEditor.Animation Classes AnimationParameterDrawer From Bit Cake Studio's BitStrap https://assetstore.unity.com/publishers/4147 A property drawer for AnimationParameter https://docs.unity3d.com/ScriptReference/PropertyDrawer.html"
  },
  "api/CoreFrameworkEditor.Attributes.ExposedReferencePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ExposedReferencePropertyDrawer.html",
    "title": "| Core Framework Documentation ExposedReferencePropertyDrawer",
    "keywords": "ExposedReferencePropertyDrawer Class in CoreFrameworkEditor.Attributes public class ExposedReferencePropertyDrawer : PropertyDrawer Inheritance System.Object ExposedReferencePropertyDrawer Description Provides a custom property drawer for properties marked with the ExposedReferenceAttribute . This drawer displays the main property as a field without a label and presents a foldout next to it, which, when expanded, will show the properties of the referenced object. Remarks This property drawer is intended for use with the Unity Editor and requires the UI Toolkit package. It assumes that ExposedReferenceAttribute is defined in the CoreFramework.Attributes namespace. Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property The SerializedProperty to make a custom GUI for. Returns VisualElement The VisualElement representing the custom GUI. Description Creates a custom GUI for the property in the Unity Inspector. Remarks This method organizes the GUI elements in a specific layout with a main property field and a foldout. When the property references an object, the foldout will display the properties of that object."
  },
  "api/CoreFrameworkEditor.Attributes.FolderPathAttributeDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.FolderPathAttributeDrawer.html",
    "title": "| Core Framework Documentation FolderPathAttributeDrawer",
    "keywords": "FolderPathAttributeDrawer Class in CoreFrameworkEditor.Attributes public class FolderPathAttributeDrawer : PropertyDrawer Inheritance System.Object FolderPathAttributeDrawer Description A property drawer for FolderPathAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Attributes.HeaderAttributeDecoratorDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.HeaderAttributeDecoratorDrawer.html",
    "title": "| Core Framework Documentation HeaderAttributeDecoratorDrawer",
    "keywords": "HeaderAttributeDecoratorDrawer Class in CoreFrameworkEditor.Attributes public class HeaderAttributeDecoratorDrawer : DecoratorDrawer Inheritance System.Object HeaderAttributeDecoratorDrawer Description The header attribute decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html Methods CreatePropertyGUI() public override VisualElement CreatePropertyGUI() Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Attributes.html": {
    "href": "api/CoreFrameworkEditor.Attributes.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Attributes",
    "keywords": "Namespace CoreFrameworkEditor.Attributes Contains all of the property drawers and the custom inspector editor that are used to draw the Default Inspector Classes ExposedReferencePropertyDrawer Provides a custom property drawer for properties marked with the ExposedReferenceAttribute . This drawer displays the main property as a field without a label and presents a foldout next to it, which, when expanded, will show the properties of the referenced object. FolderPathAttributeDrawer A property drawer for FolderPathAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html HeaderAttributeDecoratorDrawer The header attribute decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html InfoBoxDecoratorDrawer The info box decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html InputAxisPropertyDrawer A custom property drawer for the InputAxisAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html ReadOnlyPropertyDrawer A property drawer for the ReadOnlyAttribute Inherits from UnityEditor.PropertyDrawer RequiredReferencePropertyDrawer A property drawer for RequiredReferenceAttribute UnityEditor.PropertyDrawer SceneAttributePropertyDrawer A custom property drawer for the SceneAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html SerializedObjectExtensions ShowIfBoolPropertyDrawer A property drawer for ShowIfBoolAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html ShowIfEnumPropertyDrawer A property drawer for ShowIfEnumValueAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html TagAttributePropertyDrawer A custom property drawer for the TagAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html"
  },
  "api/CoreFrameworkEditor.Attributes.InfoBoxDecoratorDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.InfoBoxDecoratorDrawer.html",
    "title": "| Core Framework Documentation InfoBoxDecoratorDrawer",
    "keywords": "InfoBoxDecoratorDrawer Class in CoreFrameworkEditor.Attributes public class InfoBoxDecoratorDrawer : DecoratorDrawer Inheritance System.Object InfoBoxDecoratorDrawer Description The info box decorator drawer class https://docs.unity3d.com/ScriptReference/DecoratorDrawer.html Methods CreatePropertyGUI() public override VisualElement CreatePropertyGUI() Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Attributes.InputAxisPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.InputAxisPropertyDrawer.html",
    "title": "| Core Framework Documentation InputAxisPropertyDrawer",
    "keywords": "InputAxisPropertyDrawer Class in CoreFrameworkEditor.Attributes public class InputAxisPropertyDrawer : PropertyDrawer Inheritance System.Object InputAxisPropertyDrawer Description A custom property drawer for the InputAxisAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Attributes.ReadOnlyPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ReadOnlyPropertyDrawer.html",
    "title": "| Core Framework Documentation ReadOnlyPropertyDrawer",
    "keywords": "ReadOnlyPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ReadOnlyPropertyDrawer : PropertyDrawer Inheritance System.Object ReadOnlyPropertyDrawer Description A property drawer for the ReadOnlyAttribute Inherits from UnityEditor.PropertyDrawer Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property The SerializedProperty to make the custom GUI for. Returns VisualElement VisualElement The element containing the custom GUI. Description Override this method to make your own UIElements based GUI for the property. UnityEditor.PropertyDrawer.CreatePropertyGUI"
  },
  "api/CoreFrameworkEditor.Attributes.RequiredReferencePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.RequiredReferencePropertyDrawer.html",
    "title": "| Core Framework Documentation RequiredReferencePropertyDrawer",
    "keywords": "RequiredReferencePropertyDrawer Class in CoreFrameworkEditor.Attributes public class RequiredReferencePropertyDrawer : PropertyDrawer Inheritance System.Object RequiredReferencePropertyDrawer Description A property drawer for RequiredReferenceAttribute UnityEditor.PropertyDrawer Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description PropertyDrawer.CreatePropertyGUI"
  },
  "api/CoreFrameworkEditor.Attributes.SceneAttributePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.SceneAttributePropertyDrawer.html",
    "title": "| Core Framework Documentation SceneAttributePropertyDrawer",
    "keywords": "SceneAttributePropertyDrawer Class in CoreFrameworkEditor.Attributes public class SceneAttributePropertyDrawer : PropertyDrawer Inheritance System.Object SceneAttributePropertyDrawer Description A custom property drawer for the SceneAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Properties AnySceneInBuildSettings public static bool AnySceneInBuildSettings { get; } Property Value System.Boolean AnySceneInBuildSettings Gets the value of the any scene in build settings Description Gets the value of the any scene in build settings Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description GetSceneOptions(IEnumerable<String>) public static IEnumerable<string> GetSceneOptions(IEnumerable<string> scenes) Parameters System.Collections.Generic.IEnumerable < System.String > scenes The scenes Returns System.Collections.Generic.IEnumerable < System.String > The string array Description Gets the scene options using the specified scenes GetScenes() public static string[] GetScenes() Returns System.String [] The string array Description Gets the scenes"
  },
  "api/CoreFrameworkEditor.Attributes.SerializedObjectExtensions.html": {
    "href": "api/CoreFrameworkEditor.Attributes.SerializedObjectExtensions.html",
    "title": "| Core Framework Documentation SerializedObjectExtensions",
    "keywords": "SerializedObjectExtensions Class in CoreFrameworkEditor.Attributes public static class SerializedObjectExtensions Inheritance System.Object SerializedObjectExtensions Description Methods OnPropertyChanged(SerializedObject, SerializedProperty, Action) public static Action OnPropertyChanged(this SerializedObject serializedObject, SerializedProperty property, Action callback) Parameters SerializedObject serializedObject The serialized object containing the property to watch. SerializedProperty property The serialized property to watch for changes. Action callback The action to invoke when a change is detected on the property. Returns Action An Action that unsubscribes the change monitoring when invoked. Description Registers a callback to be invoked when a specific property of a serialized object changes. Returns an Action that should be called to unsubscribe from the event when monitoring is no longer needed. Examples Here is an example of how to use OnPropertyChanged: SerializedProperty myProperty = serializedObject.FindProperty(\"myPropertyName\"); Action unsubscribe = serializedObject.OnPropertyChanged(myProperty, () => { Debug.Log(\"Property value changed!\"); }); // When you want to stop monitoring changes unsubscribe();"
  },
  "api/CoreFrameworkEditor.Attributes.ShowIfBoolPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ShowIfBoolPropertyDrawer.html",
    "title": "| Core Framework Documentation ShowIfBoolPropertyDrawer",
    "keywords": "ShowIfBoolPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ShowIfBoolPropertyDrawer : PropertyDrawer Inheritance System.Object ShowIfBoolPropertyDrawer Description A property drawer for ShowIfBoolAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Attributes.ShowIfEnumPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.ShowIfEnumPropertyDrawer.html",
    "title": "| Core Framework Documentation ShowIfEnumPropertyDrawer",
    "keywords": "ShowIfEnumPropertyDrawer Class in CoreFrameworkEditor.Attributes public class ShowIfEnumPropertyDrawer : PropertyDrawer Inheritance System.Object ShowIfEnumPropertyDrawer Description A property drawer for ShowIfEnumValueAttribute https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description"
  },
  "api/CoreFrameworkEditor.Attributes.TagAttributePropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.Attributes.TagAttributePropertyDrawer.html",
    "title": "| Core Framework Documentation TagAttributePropertyDrawer",
    "keywords": "TagAttributePropertyDrawer Class in CoreFrameworkEditor.Attributes public class TagAttributePropertyDrawer : PropertyDrawer Inheritance System.Object TagAttributePropertyDrawer Description A custom property drawer for the TagAttribute . https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.CreateGameObjectFromUnityScript.html": {
    "href": "api/CoreFrameworkEditor.CreateGameObjectFromUnityScript.html",
    "title": "| Core Framework Documentation CreateGameObjectFromUnityScript",
    "keywords": "CreateGameObjectFromUnityScript Class in CoreFrameworkEditor public class CreateGameObjectFromUnityScript Inheritance System.Object CreateGameObjectFromUnityScript Description This editor script reacts too dragging and dropping in the editor and creates a new UnityEngine.GameObject with the name of a UnityEngine.MonoBehavior script that is being dropped."
  },
  "api/CoreFrameworkEditor.html": {
    "href": "api/CoreFrameworkEditor.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor",
    "keywords": "Namespace CoreFrameworkEditor Classes CreateGameObjectFromUnityScript This editor script reacts too dragging and dropping in the editor and creates a new UnityEngine.GameObject with the name of a UnityEngine.MonoBehavior script that is being dropped. PropertyDrawerHelper Provides utility methods for working with PropertyDrawers within the Unity Editor. This class helps to abstract and simplify some of the common operations when dealing with SerializedProperties."
  },
  "api/CoreFrameworkEditor.Inspector.AttributeMonoBehaviourInspector.html": {
    "href": "api/CoreFrameworkEditor.Inspector.AttributeMonoBehaviourInspector.html",
    "title": "| Core Framework Documentation AttributeMonoBehaviourInspector",
    "keywords": "AttributeMonoBehaviourInspector Class in CoreFrameworkEditor.Inspector public class AttributeMonoBehaviourInspector : Editor Inheritance System.Object AttributeMonoBehaviourInspector AttributeScriptableObjectInspector Description Custom editor for all MonoBehaviour scripts in order to draw buttons for all button attributes ( ButtonAttribute ). UnityEditor.Editor Methods CreateInspectorGUI() public override VisualElement CreateInspectorGUI() Returns VisualElement Description"
  },
  "api/CoreFrameworkEditor.Inspector.AttributeScriptableObjectInspector.html": {
    "href": "api/CoreFrameworkEditor.Inspector.AttributeScriptableObjectInspector.html",
    "title": "| Core Framework Documentation AttributeScriptableObjectInspector",
    "keywords": "AttributeScriptableObjectInspector Class in CoreFrameworkEditor.Inspector public class AttributeScriptableObjectInspector : AttributeMonoBehaviourInspector Inheritance System.Object AttributeMonoBehaviourInspector AttributeScriptableObjectInspector Description Custom editor for all ScriptableObject scripts in order to draw buttons for all button attributes ( ButtonAttribute ). UnityEditor.Editor Inherited Members AttributeMonoBehaviourInspector.CreateInspectorGUI()"
  },
  "api/CoreFrameworkEditor.Inspector.ButtonAttributeHelper.html": {
    "href": "api/CoreFrameworkEditor.Inspector.ButtonAttributeHelper.html",
    "title": "| Core Framework Documentation ButtonAttributeHelper",
    "keywords": "ButtonAttributeHelper Class in CoreFrameworkEditor.Inspector public sealed class ButtonAttributeHelper Inheritance System.Object ButtonAttributeHelper Description Searches through a target class in order to find all button attributes ( />). Methods CreateButtons() public VisualElement CreateButtons() Returns VisualElement A Visual Element representing the Buttons. Description Creates the button visual elements. DrawButtons() public void DrawButtons() Description Draws the buttons Init(Object) public void Init(Object targetObject) Parameters Object targetObject The target object Description Inits the target object"
  },
  "api/CoreFrameworkEditor.Inspector.html": {
    "href": "api/CoreFrameworkEditor.Inspector.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Inspector",
    "keywords": "Namespace CoreFrameworkEditor.Inspector Classes AttributeMonoBehaviourInspector Custom editor for all MonoBehaviour scripts in order to draw buttons for all button attributes ( ButtonAttribute ). UnityEditor.Editor AttributeScriptableObjectInspector Custom editor for all ScriptableObject scripts in order to draw buttons for all button attributes ( ButtonAttribute ). UnityEditor.Editor ButtonAttributeHelper Searches through a target class in order to find all button attributes ( />). QuaternionDrawer A property drawer for Quaternion https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Vector4Drawer The vector drawer class"
  },
  "api/CoreFrameworkEditor.Inspector.QuaternionDrawer.html": {
    "href": "api/CoreFrameworkEditor.Inspector.QuaternionDrawer.html",
    "title": "| Core Framework Documentation QuaternionDrawer",
    "keywords": "QuaternionDrawer Class in CoreFrameworkEditor.Inspector public class QuaternionDrawer : PropertyDrawer Inheritance System.Object QuaternionDrawer Description A property drawer for Quaternion https://docs.unity3d.com/ScriptReference/PropertyDrawer.html Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Inspector.Vector4Drawer.html": {
    "href": "api/CoreFrameworkEditor.Inspector.Vector4Drawer.html",
    "title": "| Core Framework Documentation Vector4Drawer",
    "keywords": "Vector4Drawer Class in CoreFrameworkEditor.Inspector public class Vector4Drawer : PropertyDrawer Inheritance System.Object Vector4Drawer Description The vector drawer class Methods CreatePropertyGUI(SerializedProperty) public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters SerializedProperty property Returns VisualElement Description GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.PropertyDrawerHelper.html": {
    "href": "api/CoreFrameworkEditor.PropertyDrawerHelper.html",
    "title": "| Core Framework Documentation PropertyDrawerHelper",
    "keywords": "PropertyDrawerHelper Class in CoreFrameworkEditor public static class PropertyDrawerHelper Inheritance System.Object PropertyDrawerHelper Description Provides utility methods for working with PropertyDrawers within the Unity Editor. This class helps to abstract and simplify some of the common operations when dealing with SerializedProperties. Methods FindProperty(SerializedProperty, String, out String) public static SerializedProperty FindProperty(SerializedProperty property, string propertyName, out string errorMessage) Parameters SerializedProperty property The reference property from which to search. System.String propertyName The name of the property to find. System.String errorMessage Output parameter that will contain an error message if the property isn't found. Returns SerializedProperty The found SerializedProperty, or null if it couldn't be found. Description Attempts to find a property by its name. GetAttribute<T>(SerializedProperty) public static T GetAttribute<T>(this SerializedProperty self) where T : Attribute Type Parameters T The type of the attribute to retrieve. Parameters SerializedProperty self The SerializedProperty to get the attribute from. Returns T The attribute if found; otherwise, null. Description Retrieves a custom attribute from a SerializedProperty. ShouldShow(Boolean, Boolean) public static bool ShouldShow(bool showIfProp, bool show) Parameters System.Boolean showIfProp The first boolean condition. System.Boolean show The second boolean condition. Returns System.Boolean True if the conditions match, otherwise false. Description Determines whether a property should be shown based on two boolean conditions."
  },
  "api/CoreFrameworkEditor.Saving.html": {
    "href": "api/CoreFrameworkEditor.Saving.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Saving",
    "keywords": "Namespace CoreFrameworkEditor.Saving Classes SaveEditorWindow A custom editor window https://docs.unity3d.com/ScriptReference/EditorWindow.html"
  },
  "api/CoreFrameworkEditor.Saving.SaveEditorWindow.html": {
    "href": "api/CoreFrameworkEditor.Saving.SaveEditorWindow.html",
    "title": "| Core Framework Documentation SaveEditorWindow",
    "keywords": "SaveEditorWindow Class in CoreFrameworkEditor.Saving public class SaveEditorWindow : EditorWindow Inheritance System.Object SaveEditorWindow Description A custom editor window https://docs.unity3d.com/ScriptReference/EditorWindow.html"
  },
  "api/CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers.html": {
    "href": "api/CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers",
    "keywords": "Namespace CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers Classes SceneInfoPropertyDrawer The scene info property drawer class"
  },
  "api/CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers.SceneInfoPropertyDrawer.html": {
    "href": "api/CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers.SceneInfoPropertyDrawer.html",
    "title": "| Core Framework Documentation SceneInfoPropertyDrawer",
    "keywords": "SceneInfoPropertyDrawer Class in CoreFrameworkEditor.ScriptableObjectArchitecture.PropertyDrawers public class SceneInfoPropertyDrawer : PropertyDrawer Inheritance System.Object SceneInfoPropertyDrawer Description The scene info property drawer class Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters SerializedProperty property GUIContent label Returns System.Single Description OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Rect position SerializedProperty property GUIContent label Description"
  },
  "api/CoreFrameworkEditor.Settings.CoreFrameworkSettingsEditor.html": {
    "href": "api/CoreFrameworkEditor.Settings.CoreFrameworkSettingsEditor.html",
    "title": "| Core Framework Documentation CoreFrameworkSettingsEditor",
    "keywords": "CoreFrameworkSettingsEditor Class in CoreFrameworkEditor.Settings public class CoreFrameworkSettingsEditor : EditorWindow Inheritance System.Object CoreFrameworkSettingsEditor Description CoreFrameworkSettingsEditor is a custom Unity Editor window that allows for easy configuration of the Core Framework's settings through a user interface."
  },
  "api/CoreFrameworkEditor.Settings.html": {
    "href": "api/CoreFrameworkEditor.Settings.html",
    "title": "| Core Framework Documentation CoreFrameworkEditor.Settings",
    "keywords": "Namespace CoreFrameworkEditor.Settings Classes CoreFrameworkSettingsEditor CoreFrameworkSettingsEditor is a custom Unity Editor window that allows for easy configuration of the Core Framework's settings through a user interface."
  },
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| Core Framework Documentation Change Log",
    "keywords": "Change Log Initial Commit 4b9d94168e1fc4aef365031d84ac9f72da21c13c Documentation Configuration. 5354d7b3cd70afd6be27ba4fa4d63ad0ea9d72e4 Attributes, Animation Parameters, Destroy, Extensions, Functional, Interactable copied and working from Local Core Framework package Started Working on Documentation and Samples bfcae1e9af625ee3fe0714dd98a476bb605231a5 Placed Animator Parameter Attribute with Animation related files 4ca03819696cf097cc6ccb31e7949c5fefef4bb7 Fixed Issue with Icons not displaying if property had no other attributes 1d8f30d97cb898662a14f6b366158611cf041c5e Completed Attribute Samples af6ce2627b13156fb05feb23bb85847e14b8fa52"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Core Framework Documentation About The Project",
    "keywords": "<!-- Header --> <!--<h3 align=\"center\">Project Title</h3>--> <!--<h2 align=\"center\">Project Description</h2>--> ' Report Bug or Request Feature <!-- PROJECT SHIELDS --> <!-- Links --> <!-- PROJECT LOGO --> <!-- ABOUT THE PROJECT --> About The Project Documentation Framework that contains useful Modules to be Used in Unity Project. Built With V2021.3.5f1 <!-- Installation --> Installation To install this into your project for modifications Clone or Download the code from Git Hub into your project. Check Out Third Party Notices for additional assets that where used in this project that you can get from the asset store. <!-- ROADMAP --> Roadmap See the open issues for a list of proposed features (and known issues). Currently in Work: Documentation, Samples, Attributes using UI Elements, and Scriptable Object Variables and Game Events. Scriptable Object Variables and Game Events Documentation: Manual Animation Animation Parameters Bool Float Int Trigger Animation Parameter Drawer Attributes Bootstrapper Create From Game Object CoreFrameworkMenu DebugMonBehaviour DebugScriptableObject Destroy After Time No Children Extensions Array Quaternion Text Vector4 Functional Option Interactable Scriptable Object Variables and Game Events Singleton API Documentation Samples Animation Animation Parameters Bool Float Int Trigger Animation Parameter Drawer Attributes Destroy After Time No Children Extensions Array Quaternion Text Vector4 Functional Option Interactable Scriptable Object Variables and Game Events Attributes using UI Elements Header Add Header Element to Property Element Use Style Sheet Info Box Add Header Element to Property Element Use Style Sheet Icon Show If Bool Show If Enum <!-- LICENSE --> License Distributed under the MIT License. See for more information. <!-- Ac --> License Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 @roboryantron The slides are on slide share. [!Video https://www.youtube.com/embed/raQ3iHhE_Kk ] The video for the talk is posted on Unity's YouTube page. Add API documentation Add this to the doc.json file { \"metadata\": [ { \"src\": [ { \"src\":\"../\", \"files\": [\"**.cs\"], \"exclude\": [ \"docs/**\", \"**/bin/**\", \"**/obj/**\", \"Documentation~/**\", \".git/**\" ] } ], \"dest\": \"api\", \"disableGitFeatures\": false, \"disableDefaultFilter\": false, \"force\": true } ], \"build\": { \"content\": [ { \"files\": [\"api/**\"] }, } }"
  },
  "License/Asset Licenses.html": {
    "href": "License/Asset Licenses.html",
    "title": "| Core Framework Documentation Asset Licenses",
    "keywords": "Asset Licenses Restricted Asset The publisher has designated this as a Restricted Asset under Section 2.2.2 of the Asset Store EULA. Specifically, the publisher added the following restrictions: END USER may not monetize this Asset in an application whose primary purpose is to create user-generated content. ( Metaverse) END USER may not incorporate the Asset into a product whose primary purpose is to enable the minting and exchange of non-fungible tokens. Extension Asset One license required for each individual user. Single Entity License applies to a single entity. Contractors are required to have their own, separate license. Multi Entity License applies to an entity as well as parent, child, and sister entities. Contractors working on a project do not need a separate license. For more information, check the EULA and FAQ ."
  },
  "License/LICENSE.html": {
    "href": "License/LICENSE.html",
    "title": "| Core Framework Documentation MIT License",
    "keywords": "MIT License Copyright (c) 2022 James LaFritz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "License/Third Party Notices.html": {
    "href": "License/Third Party Notices.html",
    "title": "| Core Framework Documentation Third Party Notices",
    "keywords": "Third Party Notices This package contains third-party software components governed by the license(s) indicated below: Unity Property Attribute License Assets: \"Runtime/Extensions/ArrayExtensions.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: Unity Cs Reference License BitCake BitStrap License Assets: \"Runtime/Attributes/Functional/Option.cs\" \"Runtime/Animation/AnimationParameter.cs\" \"Runtime/Animation/AnimatorFieldAttribute.cs\" \"Runtime/Animation/BoolAnimationParameter.cs\" \"Runtime/Animation/FloatAnimationParameter.cs\" \"Runtime/Animation/IntAnimationParameter.cs\" \"Runtime/Animation/TriggerAnimationParameter.cs\" \"Editor/Animation/AnimationParameterDrawer.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: BitCake BitStrap License"
  },
  "Manual/Attributes/attributes.html": {
    "href": "Manual/Attributes/attributes.html",
    "title": "| Core Framework Documentation Attributes",
    "keywords": "Attributes Alerts Note some info Tip This is some Tip Warning This is a warning Caution This is a Catuion Important This is something Important Images Put Images in the Images Directory To use them here Code Inline This Code is Inline Code Block // ButtonAttribute.cs // 07-19-2022 // James LaFritz namespace CoreFramework.Attributes { /// <summary> /// Add this attribute above one of your MonoBehaviour method and it will draw /// a button in the inspector that will run the method when clicked. /// </summary> /// <remarks> /// > [!WARNING] /// > The method must not have any parameters and can not be static. /// > [!TIP] /// > Use **`ButtonAttribute.Mode.Play`** if you want the _Button_ to only work in _Play_ mode. /// > [!TIP] /// > Use **`ButtonAttribute.Mode.Editor`** if you want the _Button_ to only work in _Edit_ mode. /// </remarks> /// <example> /// <code class=\"lang-cs\"> /// [Button] /// public void MyMethod() /// { /// Debug.Log($\"{name}: MyMethod()\"); /// } /// </code> /// </example> [System.AttributeUsage(System.AttributeTargets.Method)] public class ButtonAttribute : System.Attribute { /// <summary> /// Determine which Unity Editor mode a button should work in. /// </summary> public enum Mode { /// <summary> /// The button will only work in Editor mode (Unity Editor is not in Play Mode). /// </summary> Editor, /// <summary> /// The button will only work when Unity is in Play mode. /// </summary> Play, /// <summary> /// The button will work in both Editor and Play Mode /// </summary> Both } /// <summary> /// Which mode the button is clickable in the **_Inspector_** (Play Mode, Editor Mode, or Both). /// </summary> /// <value>Determine which Unity Editor mode a button should work in..</value> public readonly Mode mode; public string description { get; set; } /// <summary> /// Initializes a new instance of the ButtonAttribute /// </summary> /// <param name=\"mode\">The Unity Editor <see cref=\"Mode\"/> that the button should be clickable.</param> public ButtonAttribute(Mode mode = Mode.Both) { Debug.Assert(mode != Mode.Both, \"ButtonAttribute.Mode.Both is not a valid mode.\"); this.mode = mode; } } } Block Quote private void Update() { } Quote This is a Quote How Do we like it H1 H2 H3 H4 H5 H6"
  },
  "Manual/Attributes/ButtonAttribute.html": {
    "href": "Manual/Attributes/ButtonAttribute.html",
    "title": "| Core Framework Documentation Button Attribute",
    "keywords": "Button Attribute Overview The ButtonAttribute class is a custom attribute that can be used in Unity to draw a clickable button in the Unity Inspector window. When this attribute is applied to a method within a MonoBehaviour script, it allows the method to be invoked directly from the Inspector by clicking the button, without the need to play the scene or write additional editor scripting. Usage To use ButtonAttribute , you simply place it above a MonoBehaviour method. This attribute takes an optional ButtonMode parameter that controls when the button is active. Warning The method must not have any parameters and can not be static. Tip Use ButtonAttribute.Mode.Play if you want the Button to only work in Play mode. Tip Use ButtonAttribute.Mode.Editor if you want the Button to only work in Edit mode. Example: using CoreFramework.Attributes; using UnityEngine; public class ButtonExample : MonoBehaviour { [Button(ButtonAttribute.Mode.Play)] public void PlayModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode Only\"); } [Button(ButtonAttribute.Mode.Editor)] public void EditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Edit Mode Only\"); } [Button] public void PlayAndEditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode and Edit Mode\"); } } public class MyComponent : MonoBehaviour { [Button] private void ResetValues() { // Reset some values here } [Button(ButtonAttribute.ButtonMode.Editor)] private void InitializeSettings() { // Some initialization logic that should only run in the editor } } In this example, the ResetValues method will have a button in the Inspector that is clickable both in Play and Editor modes, while InitializeSettings will only be clickable in Editor mode. Properties Mode public readonly ButtonMode Mode; Read-only property that gets the mode in which the button should be active. The mode can be Editor , Play , or Both , determining whether the button can be clicked while Unity is in Editor mode, Play mode, or both. Constructor public ButtonAttribute(ButtonMode mode = ButtonMode.Both) Initializes a new instance of the ButtonAttribute class with an optional ButtonMode parameter. If no parameter is given, the button defaults to being active in both Editor and Play modes. Enums ButtonMode Defines the modes in which the button is operational. Editor Editor The button will only work in the Unity Editor mode when Unity is not in Play Mode. Play Play The button will only work when Unity is in Play mode. Both Both The button will work in both Editor and Play Mode. Notes The attribute must target a method and cannot be used on properties or fields. To make the button visible, the method must not have any parameters, can not be static and needs to be decorated with the ButtonAttribute . The functionality of rendering the button in the Inspector and invoking the method is handled by custom editor scripting, AttributeMonoBehaviourInspector : Editor , AttributeScriptableObjectInspector : AttributeMonoBehaviourInspector and ButtonAttributeHelper . These scripts are automatically used for drawing all classes that derive from MonoBehaviours and ScriptableObjects unless you have created a Custome Editor Script . csharp [CustomEditor(typeof(MonoBehaviour), true, isFallback = true)] [CanEditMultipleObjects] public class AttributeMonoBehaviourInspector : Editor See Also Unity's custom editor scripting: CustomEditor Unity's manual on extending the editor: Extending the Editor"
  },
  "Manual/Attributes/Decorators/HeaderAttribute.html": {
    "href": "Manual/Attributes/Decorators/HeaderAttribute.html",
    "title": "| Core Framework Documentation Header",
    "keywords": "Header Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. Tip To Draw a header that is just a separator use empty strings \"\" for the Text and Icon Header(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, a color and a text height increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; } Header(string text, string iconPath, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon and a textheight increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; } Header(string s, bool textOnly = true) Draws a Header in the Inspector that allows using custom text, or an icon with a text height increase. The text Height increase defaults to 1.5f . Will use Grey for the separator and White for the text. Tip To Draw a separator use an empty string \"\" Tip To Draw a header that is just an Icon pass false using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; } Header(string text, string iconPath, PresetColor presetColor, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, one of the preset colors and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the separator and White for the text. The Colors available are Black Blue Cyan Gray Green Grey Magenta Red Yellow using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; } Can Be Used In Connection with any other Attribute including Unity's Built-In Attributes Order does not mater. You can also have Multiple Headers. using UnityEngine; using Header = CoreFramework.Attributes.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"\", \"\", HeaderAttribute.PresetColor.Black)] [Header(\"Health Range\")] [Range(0, 500)] public float healthRange = 100; [Range(0, 100)] [Header(\"Health Range\")] public float healthRange1 = 100; }"
  },
  "Manual/Attributes/Decorators/InfoBoxAttribute.html": {
    "href": "Manual/Attributes/Decorators/InfoBoxAttribute.html",
    "title": "| Core Framework Documentation Info Box",
    "keywords": "Info Box Draws an Information Box in the Inspector. The Types of Boxes available are None - A Message Box Info - A Message Box with an Info Icon (Default) Warning - A Warning Message Box Error - An Error Message Box. using CoreFramework.Attributes; using UnityEngine; public class AttributesExample : MonoBehaviour { [InfoBox(\"Info String To Display\")] public float someFloat; [InfoBox(\"Some Float with no icon in box\", InfoBoxType.None)] public float someOtherFloat; [InfoBox(\"Some Bool with a warning.\", InfoBoxType.Warning)] public bool someBool; [InfoBox(\"Some String with an error message.\", InfoBoxType.Error)] public string someString; }"
  },
  "Manual/Attributes/Properties/Drop Down Selection/InputAxis.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/InputAxis.html",
    "title": "| Core Framework Documentation Input Axis",
    "keywords": "Input Axis Overview The InputAxisAttribute is a custom attribute specifically created for Unity projects that are utilizing the legacy Input Manager. This attribute is intended to decorate string fields or properties, allowing them to be set via a dropdown menu in the Unity Inspector that lists all the available input axes configured in the project. Usage This attribute is particularly useful when you want to ensure that the strings used to refer to input axes are correct, by providing a convenient dropdown of all configured axes rather than relying on manually typing them out and potentially introducing typos. Important Only Usable if Unity's Legacy Input Manager is Enabled. Important Must be used with a 'string' typed field. Example: using CoreFramework.Attributes; using UnityEngine; public class InputAxisExample : MonoBehaviour { [InputAxis] public string inputToUse; private void Update() { float axis = Input.GetAxis(inputToUse); bool buttonPressed = Input.GetButton(inputToUse); } } In the above example, inputToUse will display as dropdown menus in the Inspector. The dropdown menu will contain all the input axes configured in the project's Input Manager, allowing you to select the appropriate one for each field. The Update Method stores the intputToUse as an axis ( Input.GetAxis ) and a button press ( Input.GetButton ). Typically you would use one or the other. Attribute Declaration #if ENABLE_LEGACY_INPUT_MANAGER [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] #endif public class InputAxisAttribute : PropertyAttribute { } Preprocessor Directive #if ENABLE_LEGACY_INPUT_MANAGER : This preprocessor directive checks if the legacy Input Manager is enabled in the project settings. If it is not enabled, the attribute will not be compiled into the code. This is useful to prevent errors in projects that have migrated to the new Input System. Notes The attribute is intended for use only with Unity's legacy Input Manager, not with the newer Input System package that Unity currently recommends. There is no additional functionality or properties defined within the attribute class itself—it acts as a marker to trigger the custom dropdown behavior in the Unity Editor. A custom property drawer InputAxisPropertyDrawer is provided that implements the dropdown functionality in the Unity Inspector. Compatibility The use of the preprocessor directive ensures that the attribute is only available when the legacy Input Manager is enabled, avoiding any conflicts with Unity's newer Input System. See Also Unity Scripting API's PropertyAttribute Unity's Input Manager for configuring input axes. Unity's CustomPropertyDrawer for creating custom UI elements in the Unity Editor. Unity's EditorGUILayout.Popup or EditorGUI.Popup which can be used to create the dropdown menu in a custom property drawer."
  },
  "Manual/Attributes/Properties/Drop Down Selection/Scene.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/Scene.html",
    "title": "| Core Framework Documentation Scene",
    "keywords": "Scene Overview The SceneAttribute is a custom attribute for use within the Unity editor that enables a dropdown list for selecting scenes. This dropdown is populated with scenes that are included in the project's build settings, providing an easy way to reference scenes without hard-coding their names or indices. This attribute can be applied to fields or properties of type string or int . Usage When you apply the SceneAttribute to a string or integer field within a MonoBehaviour or ScriptableObject, the Unity Inspector provides a dropdown menu from which you can select a scene. If you're using a string, it will store the scene's name. If you're using an integer, it will store the scene's build index. Important Must be used with a 'string' or 'integer' typed field. Example: using CoreFramework.Attributes; using UnityEngine; public class LevelLoader : MonoBehaviour { [Scene] public string nextLevelName; [Scene] public int nextLevelIndex; } In the above example, nextLevelName will have a dropdown list with all the scene names, and nextLevelIndex will have a dropdown list with all the scene indices from the build settings. You can select the desired scene directly from these dropdowns in the Unity Inspector. Attribute Declaration [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class SceneAttribute : PropertyAttribute { } Attribute Details [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] : This indicates that the attribute can be used on fields and properties. public class SceneAttribute : PropertyAttribute : The class is derived from PropertyAttribute , which is part of Unity's scripting API and is used to create custom attributes for Inspector fields. Functionality The attribute itself is a marker that tells Unity's Inspector to use a custom property drawer when displaying fields with this attribute. This means that in order to see the dropdown in the editor, a custom property drawer must be implemented that looks for SceneAttribute and creates a dropdown list. Considerations This attribute simplifies scene management by preventing hard-coded strings or indices, reducing the risk of errors when scenes are renamed or the build settings are modified. The scenes that appear in the dropdown are those added to the build settings, so it's important to keep the build settings up to date with the scenes you want to be selectable. See Also Unity Scripting API's PropertyAttribute Unity's build settings for managing which scenes are included in the build. Unity's CustomPropertyDrawer for creating the inspector GUI elements for custom attributes. Unity Editor's EditorGUI.Popup or EditorGUILayout.Popup , which might be used within a custom property drawer to render the dropdown list."
  },
  "Manual/Attributes/Properties/Drop Down Selection/Tag.html": {
    "href": "Manual/Attributes/Properties/Drop Down Selection/Tag.html",
    "title": "| Core Framework Documentation Tag",
    "keywords": "Tag Overview The TagAttribute is a custom attribute for Unity that provides a dropdown list of all the tags currently available in the project. It is intended to be used with fields or properties of type string that are meant to hold the name of a tag. Usage Important Must be used with a 'string' typed field. When you apply the TagAttribute to a string field in a script, the Unity Inspector will show a dropdown list from which you can select one of the existing tags. This makes it easier to assign tags within scripts and minimizes errors compared to typing out tag strings manually. Example: using CoreFramework.Attributes; using UnityEngine; public class TagExample : MonoBehaviour { [Tag] public string targetTag; } In this example, targetTag will show a dropdown in the Unity Inspector populated with all the tags defined in the Unity project. The selected tag from the dropdown will be assigned as the string value to targetTag . Attribute Declaration [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class TagAttribute : PropertyAttribute { } Attribute Details [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] : Specifies that the TagAttribute can be used on fields and properties within a class. public class TagAttribute : PropertyAttribute : This class inherits from PropertyAttribute , making it a custom attribute that Unity can use to modify the appearance and behavior of fields in the Inspector. Functionality By itself, the attribute acts as a marker, telling the Unity Inspector to invoke a custom property drawer TagAttributePropertyDrawer for fields annotated with TagAttribute . This custom property drawer is responsible for rendering the dropdown list and handling the selection of a tag. Considerations This attribute can improve the workflow by preventing typos in tag names and making it easy to assign tags without referencing them as hardcoded strings. Tags used with the TagAttribute must be defined in the project’s tag manager for them to appear in the dropdown list. See Also Unity Scripting API's PropertyAttribute Unity's Tag Manager where you can define and manage tags. Unity Editor scripting for creating custom drawers using PropertyDrawer . Unity Editor's GUI functions like EditorGUI.TagField or EditorGUILayout.TagField , which are typically used to create the tag selection dropdown in the Inspector."
  },
  "Manual/Attributes/Properties/FolderPathAttribute.html": {
    "href": "Manual/Attributes/Properties/FolderPathAttribute.html",
    "title": "| Core Framework Documentation Folder Path Attribute",
    "keywords": "Folder Path Attribute Overview The FolderPathAttribute is a Unity-specific attribute that can be applied to string fields or properties. It provides a user-friendly way to select folder paths through the Unity Inspector. The attribute enhances the string field with a folder selection button, allowing developers to choose directories from their file system, which can be set as either absolute or relative paths. Usage When you want to expose a folder path in the Inspector without requiring manual path entry, you can use this attribute to provide a button that opens a folder selection dialog. This attribute is beneficial when a script needs to reference a directory for operations like saving/loading files or accessing a collection of assets at runtime. Example: using CoreFramework.Attributes; using UnityEngine; public class FolderPathExample : MonoBehaviour { [FolderPath(false)] public string absolutePath; [FolderPath(true)] public string relativePath; } Here, absolutePathToFolder will hold an absolute path, while relativePathToFolder will show a path relative to the project's root directory. Constructors FolderPathAttribute() public FolderPathAttribute() : this(true) { } This constructor initializes a new instance of FolderPathAttribute with the path set to be relative to the project by default. FolderPathAttribute(bool pathRelativeToProject) public FolderPathAttribute(bool pathRelativeToProject) This constructor allows you to specify whether the selected folder path should be relative to the project's root directory or an absolute path. pathRelativeToProject : A bool indicating whether the path should be relative ( true ) or absolute ( false ). Properties PathRelativeToProject public readonly bool PathRelativeToProject; Indicates whether the folder path is relative to the project's root directory or not. Notes This attribute makes it more convenient to select and store folder paths in Unity without needing to manually enter the path string. The attribute will not affect runtime behavior; it only changes how the field is displayed and interacted with in the Unity Editor. Custom editor script FolderPathAttributeDrawer : PropertyDrawer handles drawing in the Unity Inspector. The use of this attribute is particularly useful during the development phase where folder paths are frequently accessed or modified. See Also Unity Scripting API's PropertyAttribute Creating custom UI elements in the Unity Editor with CustomPropertyDrawer"
  },
  "Manual/Attributes/Properties/Modifiers/ExposedReferenceAttribute.html": {
    "href": "Manual/Attributes/Properties/Modifiers/ExposedReferenceAttribute.html",
    "title": "| Core Framework Documentation Exposed Reference Attribute",
    "keywords": "Exposed Reference Attribute Overview The ExposedReferenceAttribute is designed for use in Unity's Editor to enhance the usability of reference type properties such as ScriptableObjects, allowing for a cleaner and more organized presentation in the Inspector. This custom attribute can be particularly helpful for improving the user interface when dealing with complex data structures or a large number of ScriptableObject references. Usage When you apply the ExposedReferenceAttribute to a reference field or property in a MonoBehaviour or ScriptableObject, Unity will display this field or property with a foldout in the Inspector. This allows you to expand and collapse the details of the referenced object inline without having to navigate to a different asset or Inspector window. Example: public class GameSettings : MonoBehaviour { [ExposedReference] public GameDifficultySettings difficultySettings; } In this example, the difficultySettings field, which is assumed to be a ScriptableObject or a reference type, will be shown in the Inspector as a foldout. Users can click on the foldout to view and edit properties of difficultySettings directly within the GameSettings Inspector view. Attribute Declaration [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class ExposedReferenceAttribute : PropertyAttribute { } Attribute Details [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] : Specifies that the ExposedReferenceAttribute can be used on fields and properties within classes. public class ExposedReferenceAttribute : PropertyAttribute { } : This is the class definition for the attribute. It inherits from PropertyAttribute , which is the base class for property attributes in Unity that influence how properties are drawn in the Inspector. Functionality Just like the IconAttribute , the ExposedReferenceAttribute only tags the property with metadata. It does not itself provide the functionality to render the foldout in the Inspector. You would typically need a custom editor script or property drawer to interpret and draw the property accordingly. Considerations A property drawer ExposedReferencePropertyDrawer script defines how the property is rendered in the Inspector. This attribute is beneficial for nested ScriptableObjects or complex objects, providing a more user-friendly interface to edit properties without navigating away from the current context. See Also Unity Scripting API's CustomEditor and PropertyDrawer , which are essential for customizing how objects and properties are drawn in the Inspector. SerializedProperty documentation for understanding how properties are serialized and handled in custom editors. Examples of editor scripting in Unity to provide advanced functionalities and better user experiences for developers working within the Unity Editor."
  },
  "Manual/Attributes/Properties/Modifiers/Icon.html": {
    "href": "Manual/Attributes/Properties/Modifiers/Icon.html",
    "title": "| Core Framework Documentation Icon",
    "keywords": "Icon Overview The IconAttribute is a custom attribute for Unity that allows developers to associate an icon with a field or property in the Unity Inspector. This visual cue can be particularly useful for improving the clarity and usability of custom scripts in the Inspector. Usage When you apply the IconAttribute to a field or property in a MonoBehaviour or ScriptableObject script, Unity will display the specified icon next to the field's or property's label in the Inspector. Example: using UnityEngine; using Icon = CoreFramework.Attributes.IconAttribute; public class IconExample : MonoBehaviour { [Icon(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health; } public class Player : MonoBehaviour { [Icon(\"Assets/Icons/healthIcon.png\")] public int health; } In this example, the health field will have an icon next to its label in the Unity Inspector. The icon will be loaded from the specified path within the project. Attribute Declaration [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class IconAttribute : Attribute { public string Path { get; } public IconAttribute(string path) => Path = path; } Attribute Details [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] : Indicates that IconAttribute can be used on fields and properties. public string Path { get; } : This property holds the project-relative path to the texture that should be used as the icon. It's a read-only property, meaning it can only be set through the constructor and not modified later. public IconAttribute(string path) => Path = path; : This is the constructor for the attribute. It sets the Path property to the provided path argument, which should be a relative path to the icon texture in the Unity project. Functionality The attribute itself doesn't cause the icon to appear in the Inspector; it simply marks the field or property with the necessary metadata. A custom property drawer is implemented to interpret the attribute and draw the icon in the Inspector. Considerations The icons used should be properly imported into Unity and marked as editor resources. The path provided must be correct and relative to the project's Assets folder. If the path is incorrect, the icon will not be displayed. The rendering of the icon in the Inspector is handled by custom editor scripting, AttributeMonoBehaviourInspector : Editor and AttributeScriptableObjectInspector : AttributeMonoBehaviourInspector . These scripts are automatically used for drawing all classes that derive from MonoBehaviours and ScriptableObjects unless you have created a Custome Editor Script . csharp [CustomEditor(typeof(MonoBehaviour), true, isFallback = true)] [CanEditMultipleObjects] public class AttributeMonoBehaviourInspector : Editor See Also Unity Scripting API's PropertyDrawer for creating custom GUI elements in the Inspector. Unity's handling of Textures and Sprites in the editor. Unity Editor's GUI functions for custom rendering, such as EditorGUIUtility , which can be used to load and display icons."
  },
  "Manual/Attributes/Properties/Modifiers/ReadOnly.html": {
    "href": "Manual/Attributes/Properties/Modifiers/ReadOnly.html",
    "title": "| Core Framework Documentation Read Only",
    "keywords": "Read Only Overview The ReadOnlyAttribute is a Unity-specific attribute designed to make fields or properties appear read-only in the Unity Inspector . This means that while values will be visible in the Unity Editor , they cannot be modified by the user directly through the Inspector . Usage The ReadOnlyAttribute is primarily used to display information in the Inspector for debugging or informational purposes without allowing it to be editable at that point. This can be particularly useful for showing properties that are set by the script at runtime or for exposing private fields for debugging without the risk of them being inadvertently changed by the user. Example: using CoreFramework.Attributes; using UnityEngine; public class ReadOnlyExample : MonoBehaviour { [ReadOnly] public int inspectorReadOnlyInt = 400; } In the example above, inspectorReadOnlyInt will be displayed in the Inspector when the ReadOnlyExample component is selected, but it will be greyed out to indicate that it cannot be edited. Attribute Declaration [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)] public class ReadOnlyAttribute : PropertyAttribute { } Properties There are no properties for ReadOnlyAttribute as it's a marker attribute, meaning it doesn't hold any additional data—it simply marks the field or property with the intended read-only behavior. Notes The attribute affects only the appearance in the Unity Inspector and does not change the actual mutability of the field or property in code. The read-only effect of this attribute is limited to the Unity Editor. During runtime, the field or property can still be changed programmatically as usual. To implement the read-only behavior, a custom editor script is used ReadOnlyPropertyDrawer : PropertyDrawer . See Also Unity Scripting API's PropertyAttribute Unity's CustomPropertyDrawer for creating custom UI elements in the Unity Editor."
  },
  "Manual/Attributes/Properties/RequiredReferenceAttribute.html": {
    "href": "Manual/Attributes/Properties/RequiredReferenceAttribute.html",
    "title": "| Core Framework Documentation Required Reference Attribute",
    "keywords": "Required Reference Attribute Overview The RequiredReferenceAttribute is a custom attribute developed to be used within Unity's engine. This attribute aims to enforce a rule where the marked field should not be null . It serves as a tool for developers to ensure that certain references must be set in the Unity Inspector before gameplay begins. This can help prevent runtime errors due to uninitialized references. Important You should still do null checks in your code as this is only for visualization in the Inspector. Usage Apply the RequiredReferenceAttribute to any serializable field or property in a MonoBehaviour or ScriptableObject to indicate that the reference must be assigned in the Unity Inspector. Example: using CoreFramework.Attributes; using UnityEngine; public class RequiredReferenceExample : MonoBehaviour { [RequiredReference] public GameObject requiredReference; } In this example, requiredReference is marked as required. In the Unity Inspector, this field will typically be highlighted or otherwise indicated to show that it must be assigned a value. Constructor public RequiredReferenceAttribute() This attribute does not take parameters and can be applied without any additional information. Properties There are no public properties exposed by RequiredReferenceAttribute . Notes The attribute is marked with AttributeUsage set to AttributeTargets.Field | AttributeTargets.Property , meaning it can be applied to fields and properties. To enforce the non-null rule in the Unity Editor, custom editor scripting is necessary. By default, Unity does not process attributes to enforce rules; this requires extending the Unity Editor using a custom PropertyDrawer or CustomEditor . A common approach is to display a warning or error in the Unity Editor if a required reference is null when the attribute is present. This attribute can prevent common null reference exceptions, ensuring that all required components are set before the game runs. See Also Unity Scripting API's PropertyAttribute Extending the Unity Editor with PropertyDrawer Customizing the Unity Inspector using CustomEditor"
  },
  "Manual/Attributes/Properties/ShowIfBoolAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfBoolAttribute.html",
    "title": "| Core Framework Documentation Show If Bool Attribute",
    "keywords": "Show If Bool Attribute Overview The ShowIfBoolAttribute is a custom attribute designed for use within the Unity engine to conditionally show or hide serialized fields in the Inspector. This is based on the value of a Boolean field present in the same MonoBehaviour or ScriptableObject. This attribute enhances the usability of the Unity Inspector by only displaying relevant information when certain conditions are met, which can simplify the interface for users and prevent unnecessary clutter. Usage You can apply the ShowIfBoolAttribute to any serializable field or property in a class derived from UnityEngine.Object . The attribute takes the name of the Boolean field and a Boolean indicating whether to show or hide the property when the Boolean field has a specific value. Caution Order of attribute is important. Should be placed before any other attributes. Example: using CoreFramework.Attributes; using UnityEngine; public class ShowIfBoolExample : MonoBehaviour { public bool showHideValue; // Shows this value if showHideValue = true; [ShowIfBool(\"showHideValue\")] public int showIfTrueInt; // Shows this value if showHideValue = false; [ShowIfBool(\"showHideValue\", false)] public int showIfFalseInt; // Shows this value as a Range if showHideValue = true; [ShowIfBool(\"showHideValue\"), Range(5, 20)] public int showIfTrueRangeInt1; // Shows this value as a Range if showHideValue = true; // Since Range is first this value is always shown [Range(5, 20), ShowIfBool(\"showHideValue\")] public int showIfTrueRangeInt2; } In this example: showIfTrueInt will only be visible in the Inspector if showHideValue is true . showIfFalseInt will only be visible in the Inspector if showHideValue is false . showIfTrueRangeInt1 will only be visible in the Inspector with a range if showHideValue is true . showIfTrueRangeInt2 will always be visible in the Inspector because 'ShowIfBool attribute is ordered after Range` attribute. Multiple Show If Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Constructor public ShowIfBoolAttribute(string boolName, bool show = true) boolName : The name of the serialized Boolean property within the same script. show : Optional. A Boolean that determines if the target field should be shown ( true ) or hidden ( false ) when the named Boolean property matches its value. Defaults to true . Properties BoolName public readonly string BoolName; Holds the name of the Boolean property that dictates the visibility of the attribute's target. Show public readonly bool Show; Indicates whether the target property should be shown (if true ) or hidden (if false ) when the named Boolean property matches this value. Notes The attribute is marked with AttributeUsage set to AttributeTargets.Field | AttributeTargets.Property , meaning it can only be applied to fields and properties. Since this is a custom attribute not inherently understood by Unity's default Inspector, custom editor scripting is required to process and display the fields accordingly. Proper use of this attribute can significantly tidy up the Unity Inspector, making scripts easier to navigate and understand at a glance. See Also Unity Scripting API's PropertyAttribute How to extend the Unity Editor with CustomEditor Managing and editing serialized fields with SerializedProperty"
  },
  "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html",
    "title": "| Core Framework Documentation Show If Enum Value Attribute",
    "keywords": "Show If Enum Value Attribute Overview The ShowIfEnumValueAttribute is a custom attribute used in Unity to conditionally show or hide serialized fields in the Inspector based on the value of an enumeration field present in the same MonoBehaviour or ScriptableObject. It is useful for creating dynamic and context-sensitive editor interfaces without writing additional custom editor code. Usage You apply ShowIfEnumValueAttribute to any serializable field or property within a class that inherits from UnityEngine.Object . This attribute requires the name of the enum field and the target enum value index as parameters. If the enum field has the specified value, the property with this attribute will be shown or hidden in the Inspector based on the show parameter. Caution Order of attribute is important. Should be placed before any other attributes. Example: using CoreFramework.Attributes; using UnityEngine; public class ShowIfEnumExample : MonoBehaviour { public enum SomeEnum { One, Two, Three } public SomeEnum someEnum = SomeEnum.One; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.One)] public int showIfSomeEnumOne; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.One, false)] public int showIfSomeEnumNotOne; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Two)] public int showIfSomeEnumTwo; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Two, false)] public int showIfSomeEnumNotTwo; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Three)] public int showIfSomeEnumThree; [ShowIfEnumValue(\"someEnum\", (int)SomeEnum.Three, false)] public int showIfSomeEnumNotThree; } In this example, showIfSomeEnumOne will only be visible in the Inspector when someEnum is set to One , and showIfSomeEnumNotOne will be hidden when someEnum is set to Two or Three . Similarly, all three remaining variables are toggled accordingly depending upon their respective values of 'someEnum' Multiple Attributes Can Stack Multiple Show If Bool's and Show if Enum's to create interesting conditions. using CoreFramework.Attributes; using UnityEngine; public class ShowIfMulti : MonoBehaviour { public bool selectScene; public enum SceneSelectionMode { String, Int } [ShowIfBool(\"selectScene\")] public SceneSelectionMode sceneSelectionMode = SceneSelectionMode.String; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 0), Scene] public string sceneName; [ShowIfBool(\"selectScene\"), ShowIfEnumValue(\"sceneSelectionMode\", 1), Scene] public int sceneIndex; } Constructor public ShowIfEnumValueAttribute(string enumName, int enumIndex, bool show = true) enumName : The name of the serialized enum property within the same script. enumIndex : The index of the enum value at which the attribute's target should be shown or hidden. show : Optional. A boolean value determining if the target should be shown ( true ) or hidden ( false ) when the enum has the specified value. Defaults to true . Properties EnumName public readonly string EnumName; Stores the name of the enum property that will be used to determine the visibility of the attribute's target. EnumIndex public readonly int EnumIndex; Stores the index value of the enum that the attribute uses to decide if the target should be shown or hidden. Show public readonly bool Show; Determines whether to show (if true ) or hide (if false ) the attribute's target when the specified enum value is matched. Notes The AttributeUsage is set to AttributeTargets.Field | AttributeTargets.Property which means it can only be used on fields and properties. It is not a built-in Unity attribute, which means to make it functional, additional editor scripting is needed to interpret and enforce its behavior in the Inspector. The functionality provided by this attribute can significantly improve the user experience for designers and developers working with complex scripts by reducing clutter and making context-sensitive properties more intuitive. See Also Unity Scripting API's PropertyAttribute Custom editor scripting: CustomEditor Unity manual on Serialized Properties: SerializedProperty"
  },
  "Manual/Bootstrapper.html": {
    "href": "Manual/Bootstrapper.html",
    "title": "| Core Framework Documentation Bootstrapper",
    "keywords": "Bootstrapper Overview The Bootstrapper class serves as an initializer for Unity applications, part of the CoreFramework namespace. Its primary function is to configure the application's starting state, making sure the initial scene loads properly and essential services are started. It is designed to work seamlessly in both the Unity Editor and built applications, handling scene management tasks differently based on the environment. Usage To use the Bootstrapper , attach it to a GameObject in your initial \"boot\" scene. Ensure that this boot scene is set in the CoreFrameWorkSettings.BootScene . This class should not be instantiated manually; it's designed to work automatically upon the start of the application. Methods Start private async void Start() Called on the frame when the script instance is being loaded, this coroutine method sets the application to run in the background and loads the start scene asynchronously. Init [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)] static void Init() A static initializer that ensures the designated boot scene is loaded first. It is marked with the RuntimeInitializeOnLoadMethod attribute to ensure it's called before any scene loading takes place. Properties This class does not publicly expose any properties. All its operations are internal and based on settings from Settings.CoreFrameWorkSettings . Initialization Process Sets Application.runInBackground to true to ensure the application continues running when not in focus. Calls an asynchronous method placeholder for service initialization (commented out as // await UnityServices.InitializeAsync(); ). Loads the start scene defined in CoreFrameWorkSettings.StartScene additively if it's the only scene currently loaded. Conditional Compilation & Editor Behavior Within the Unity Editor: It tracks the currently loaded editor scene before loading the boot scene. If in the editor and the initial scene is valid, it reloads the previously active scene additively. In a built game: It ensures the boot scene is loaded if it's not already, then loads the start scene additively. Example There is no explicit example usage for this class since it is meant to be placed on a GameObject as a MonoBehaviour and run automatically. Notes It's crucial that the CoreFrameWorkSettings.BootScene and CoreFrameWorkSettings.StartScene are correctly set for this class to function properly. In a development environment, this class also assists with scene management by reloading editor scenes, facilitating a smoother development process. See Also UnityEngine.Application UnityEngine.SceneManagement.SceneManager CoreFramework.Settings.CoreFrameWorkSettings"
  },
  "Manual/CoreFrameworkMenu.html": {
    "href": "Manual/CoreFrameworkMenu.html",
    "title": "| Core Framework Documentation Core Framework Menu",
    "keywords": "Core Framework Menu Overview The CoreFrameworkMenu static class is a utility within the CoreFramework namespace designed to manage menu paths consistently for Unity Editor custom menu items. By centralizing menu path definitions, it ensures that all Core Framework-related editor extensions and custom options are grouped under a single main menu, enhancing organization and accessibility. Usage The class provides a simple way to reference the main menu path for any custom editor scripts that need to add items to the Unity Editor menu. Developers can append their specific item names to the MainMenu constant to create new menu items. Example Usage [MenuItem(CoreFrameworkMenu.MainMenu + \"Custom Option\")] public static void MyCustomMenuOption() { // Implementation for the custom menu option... } In the example above, a new menu item named \"Custom Option\" would appear under the \"Core Framework\" menu in the Unity Editor. Properties MainMenu public const string MainMenu = \"Core Framework/\"; A constant string representing the base menu path for Core Framework items in the Unity Editor. Notes This class does not contain methods or fields beyond the MainMenu constant. Developers should ensure that custom menu options are named uniquely to avoid conflicts. When adding menu items, it is important to follow the Unity Editor's format for menu paths to ensure proper integration. See Also UnityEditor.MenuItem - Attribute to define menu items in custom editor scripts. Unity Editor's manual on menu items for more information on adding and managing custom menus."
  },
  "Manual/Interactable.html": {
    "href": "Manual/Interactable.html",
    "title": "| Core Framework Documentation Interactable",
    "keywords": "Interactable Overview The Interactable class serves as an abstract base for creating objects within Unity that can interact with other objects (usually the player). This class inherits from DebugMonoBehaviour which implies it may have some enhanced debugging capabilities. Usage To use the Interactable class, create a subclass that implements the abstract method OnInteract() . When another object with the specified tag (usually \"Player\") enters its trigger collider, the Interact() method is called, which in turn calls OnInteract() if the interactable's conditions are met. Example: public class MyInteractableObject : Interactable { public override void OnInteract() { // Custom interaction logic here } } Properties CanInteract public bool CanInteract { get; } Read-only property indicating whether the interactable object can currently be interacted with. This takes into account whether it's a one-shot interactable, whether it has already been activated, and whether the cooldown period has elapsed. IsCoolDownEnded public bool IsCoolDownEnded { get; } Read-only property that indicates whether the cooldown period has ended, allowing the interactable to be used again. Unity Methods OnTriggerEnter2D private void OnTriggerEnter2D(Collider2D other) Unity's method called when a 2D collider enters the trigger collider attached to the interactable. If the colliding object's tag matches the _interactTag , Interact() is called. OnTriggerEnter private void OnTriggerEnter(Collider other) Similar to OnTriggerEnter2D , this method is for 3D physics. It is called when a collider enters the trigger collider attached to the interactable. If the colliding object's tag matches the _interactTag , Interact() is called. Methods Interact public void Interact() Performs the interaction if CanInteract returns true. It updates the usage timestamp and activation status, then calls OnInteract() . OnInteract public virtual void OnInteract() An abstract method that subclasses must implement. This is where the specific interaction logic for the interactable is defined. By default, if there is an _onInteractGameEvent associated, it will be raised. Notes The class makes use of serialized fields to enable customization within Unity's Inspector. The isOneShot field determines if the interactable can only be used once. coolDown specifies the time interval required between interactions. _interactTag defines the tag of objects that can interact with this interactable (commonly set to \"Player\"). _onInteractGameEvent allows for a GameObjectGameEvent to be raised when interaction occurs, enabling event-driven design. The actual interaction handling is abstract, meaning each subclass will have to provide its own implementation. Serialized Fields isOneShot : Defines if the interactable is a one-time use object. coolDown : The cooldown duration before the interactable can be used again. _interactTag : The tag of the GameObject that can interact with this interactable. _onInteractGameEvent : Game event to raise on interaction. isActivated : Tracks if the interactable has been activated. canUse : Indicates if the interactable is currently usable. _lastUse : Timestamp of the last interaction. See Also Unity's Collider documentation: 2D and 3D Unity's Event System for implementing game-wide events and messaging: GameEvents Ryan Hipple's Unite 2017 - Game Architecture with Scriptable Objects: Blog Post Video Get Hub"
  },
  "Manual/Logging/DebugMonoBehaviour.html": {
    "href": "Manual/Logging/DebugMonoBehaviour.html",
    "title": "| Core Framework Documentation Debug Mono Behaviour",
    "keywords": "Debug Mono Behaviour Overview The DebugMonoBehaviour class extends the functionality of UnityEngine.MonoBehaviour by integrating advanced debug logging capabilities. It is tailored for use within the Unity Editor, empowering developers with tools to issue informational messages, warnings, and errors, facilitating easier tracking and troubleshooting during the development process. Usage DebugMonoBehaviour is designed to be a base class for other MonoBehaviour classes that require advanced debug capabilities. It is not intended to be used on its own but should be extended by other classes. Inheriting from DebugMonoBehaviour To utilize DebugMonoBehaviour , you would extend it like so: public class TestDebug : DebugMonoBehaviour { private void Start() { Log.Info(\"This is an info message\", \"Start\"); Log.Warn(\"This is a warning message\", \"Start\"); Log.Error(\"This is an error message\", nameof(Start)) } } In the derived class, the methods Info() , Warning() , and Error() are available for logging different levels of information based on the situation. Properties bool _showDebugInfo : A serialized private field that can be toggled in the Unity Inspector. It allows for the enabling or disabling of debug logs on a per-instance basis. Methods Info protected void Info(string msg, string callingMethod = \"\") Outputs an informational message to the Unity console, contingent on the debug settings. Parameters: msg : The message to log. callingMethod (optional): The name of the method issuing the log for added context. Warning protected void Warning(string msg, string callingMethod = \"\") Displays a warning message in the Unity console if debug logging is active. Parameters: msg : The warning message to log. callingMethod (optional): The name of the method issuing the log for added context. Error protected void Error(string msg, string callingMethod = \"\") Logs an error message regardless of the current debug logging settings. Parameters: msg : The error message to log. callingMethod (optional): The name of the method issuing the log for added context. Conditional Compilation The Info and Warning methods are wrapped with the UNITY_EDITOR preprocessor directive to ensure that debug-related functionality is only compiled and executed within the Unity Editor. This is a safeguard to prevent unnecessary logging overhead in production builds. Example Below is a hypothetical example of a MonoBehaviour subclass that uses DebugMonoBehaviour to log when a player enters a specific zone: public class PlayerZoneTracker : DebugMonoBehaviour { private void OnTriggerEnter(Collider other) { if (other.CompareTag(\"Player\")) { Info(\"Player has entered the zone\", nameof(OnTriggerEnter)); } } } Notes It is recommended to use the logging methods with discretion to avoid performance impacts, particularly in code areas where performance is crucial. Providing the callingMethod parameter can increase the informational value of the log by providing clear context. The debugging tools within this class are purposed for the Unity Editor and will not be included in the final production build. See Also UnityEngine.MonoBehaviour UnityEngine.Debug"
  },
  "Manual/Logging/DebugScriptableObject.html": {
    "href": "Manual/Logging/DebugScriptableObject.html",
    "title": "| Core Framework Documentation Debug Scriptable Object",
    "keywords": "Debug Scriptable Object Overview The DebugScriptableObject is an abstract class that extends UnityEngine.ScriptableObject and provides integrated debug logging functionality. It is designed for use within the Unity Editor to assist developers by offering a convenient way to log informational messages, warnings, and errors. Usage This class is intended to be inherited by other ScriptableObject classes that need debugging capabilities. It should not be instantiated directly. Inheriting the DebugScriptableObject To use DebugScriptableObject , create a new class that inherits from it: public class TestDebugScriptableObject : DebugScriptableObject { public void DebugMessages() { Log.Info(\"This is an info message\", \"DebugMessages\"); Log.Warn(\"This is a warning message\", \"DebugMessages\"); Log.Error(\"This is an error message\", \"DebugMessages\") } } Within this subclass, you can use the provided methods ( Info() , Warning() , Error() ) to log messages to the Unity console. Properties bool _showDebugInfo : Serialized private field that can be toggled in the Unity inspector to enable or disable debug logging for the specific instance of the ScriptableObject . Methods Info protected void Info(string msg, string callingMethod = \"\") Logs an informational message to the Unity console if debugging is enabled. Parameters: msg : The message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Warning protected void Warning(string msg, string callingMethod = \"\") Logs a warning message to the Unity console if debugging is enabled. Parameters: msg : The warning message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Error protected void Error(string msg, string callingMethod = \"\") Logs an error message to the Unity console. Parameters: msg : The error message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Conditional Compilation The Info and Warning methods use the UNITY_EDITOR preprocessor directive to ensure that debug checks and logging are only compiled and performed within the Unity Editor. This avoids the performance overhead of logging in the production build of the game. Example Below is an example of a ScriptableObject subclass that uses DebugScriptableObject to log an error during settings validation: [CreateAssetMenu(fileName = \"GameSettings\", menuName = \"Game/Settings\")] public class GameSettings : DebugScriptableObject { public void ValidateSettings() { if (someInvalidCondition) { Error(\"Invalid game setting detected\", nameof(ValidateSettings)); } } } Notes Use logging methods judiciously to prevent performance degradation, especially in performance-critical code paths. Providing the callingMethod argument can improve the usefulness of logs by adding context. Debugging functionality provided by this class is intended for use within the Unity Editor only and will not be included in production builds. See Also UnityEngine.ScriptableObject UnityEngine.Debug"
  },
  "Manual/Logging/Log.html": {
    "href": "Manual/Logging/Log.html",
    "title": "| Core Framework Documentation Log",
    "keywords": "Log Overview The Log static class is part of the CoreFramework and is designed to enhance Unity's default logging system by adding context and formatting to log messages. It provides static methods to output informational messages, warnings, and errors in a formatted manner that includes the name of the calling method and the context object's name, with configurable text sizes and colors for better visibility and differentiation in the Unity console. Usage The Log class is utilized by calling its static methods Info , Warn , and Error to log messages of different severity levels. This class is not instantiated but used directly with the static method calls. Log Method Examples Log.Info(\"This is an info message\", this, nameof(MyMethod)); Log.Warn(\"This is a warning message\", this, nameof(MyMethod)); Log.Error(\"This is an error message\", this, nameof(MyMethod)); Methods Info public static void Info(string msg, Object context, string callingMethod = \"\") Logs an informational message with enhanced formatting. Parameters: msg : The message to log. context : The Unity object that the log relates to. Provides context in the Unity Editor. callingMethod (optional): The name of the method that is calling the log function, which provides additional context. Warn public static void Warn(string msg, Object context, string callingMethod = \"\") Logs a warning message with enhanced formatting. Parameters: msg : The warning message to log. context : The Unity object that the log relates to. callingMethod (optional): The name of the method that is calling the log function. Error public static void Error(string msg, Object context, string callingMethod = \"\") Logs an error message with enhanced formatting. Parameters: msg : The error message to log. context : The Unity object that the log relates to. callingMethod (optional): The name of the method that is calling the log function. Formatting The log messages are formatted with HTML-like tags to change color and size based on the message type: Informational messages are displayed in blue with the InfoSize setting from CoreFrameWorkSettings . Warning messages are displayed in orange and yellow with the WarningSize setting. Error messages are displayed in red and maroon with the ErrorSize setting. These settings allow for customization of the log appearance in the Unity console. Example Below is an example of how the Log class could be used within a MonoBehaviour: public class PlayerController : MonoBehaviour { private void Start() { Log.Info(\"Player Controller started.\", this, nameof(Start)); } private void Update() { if (CheckForErrors()) { Log.Error(\"Error encountered in player update loop.\", this, nameof(Update)); } } } Notes The Log class is intended for use within the Unity Editor and will format messages in a way that utilizes Unity's rich console output. The HTML-like syntax in the log messages will not work outside of Unity's console and is not suitable for logging in other environments. It is recommended to use these logging methods judiciously to avoid cluttering the console and potentially impacting performance. See Also UnityEngine.Debug CoreFramework.Settings.CoreFrameWorkSettings"
  },
  "Manual/Logging/Logging.html": {
    "href": "Manual/Logging/Logging.html",
    "title": "| Core Framework Documentation Logging",
    "keywords": "Logging Several Classes designed to enhance Unity's default logging system by adding context and formatting to log messages. Log Overview The Log static class is part of the CoreFramework and is designed to enhance Unity's default logging system by adding context and formatting to log messages. It provides static methods to output informational messages, warnings, and errors in a formatted manner that includes the name of the calling method and the context object's name, with configurable text sizes and colors for better visibility and differentiation in the Unity console. Usage The Log class is utilized by calling its static methods Info , Warn , and Error to log messages of different severity levels. This class is not instantiated but used directly with the static method calls. Log Method Examples Log.Info(\"This is an info message\", this, nameof(MyMethod)); Log.Warn(\"This is a warning message\", this, nameof(MyMethod)); Log.Error(\"This is an error message\", this, nameof(MyMethod)); Methods Info public static void Info(string msg, Object context, string callingMethod = \"\") Logs an informational message with enhanced formatting. Parameters: msg : The message to log. context : The Unity object that the log relates to. Provides context in the Unity Editor. callingMethod (optional): The name of the method that is calling the log function, which provides additional context. Warn public static void Warn(string msg, Object context, string callingMethod = \"\") Logs a warning message with enhanced formatting. Parameters: msg : The warning message to log. context : The Unity object that the log relates to. callingMethod (optional): The name of the method that is calling the log function. Error public static void Error(string msg, Object context, string callingMethod = \"\") Logs an error message with enhanced formatting. Parameters: msg : The error message to log. context : The Unity object that the log relates to. callingMethod (optional): The name of the method that is calling the log function. Formatting The log messages are formatted with HTML-like tags to change color and size based on the message type: Informational messages are displayed in blue with the InfoSize setting from CoreFrameWorkSettings . Warning messages are displayed in orange and yellow with the WarningSize setting. Error messages are displayed in red and maroon with the ErrorSize setting. These settings allow for customization of the log appearance in the Unity console. Example Below is an example of how the Log class could be used within a MonoBehaviour: public class PlayerController : MonoBehaviour { private void Start() { Log.Info(\"Player Controller started.\", this, nameof(Start)); } private void Update() { if (CheckForErrors()) { Log.Error(\"Error encountered in player update loop.\", this, nameof(Update)); } } } Notes The Log class is intended for use within the Unity Editor and will format messages in a way that utilizes Unity's rich console output. The HTML-like syntax in the log messages will not work outside of Unity's console and is not suitable for logging in other environments. It is recommended to use these logging methods judiciously to avoid cluttering the console and potentially impacting performance. See Also UnityEngine.Debug CoreFramework.Settings.CoreFrameWorkSettings Debug Mono Behaviour Overview The DebugMonoBehaviour class extends the functionality of UnityEngine.MonoBehaviour by integrating advanced debug logging capabilities. It is tailored for use within the Unity Editor, empowering developers with tools to issue informational messages, warnings, and errors, facilitating easier tracking and troubleshooting during the development process. Usage DebugMonoBehaviour is designed to be a base class for other MonoBehaviour classes that require advanced debug capabilities. It is not intended to be used on its own but should be extended by other classes. Inheriting from DebugMonoBehaviour To utilize DebugMonoBehaviour , you would extend it like so: public class TestDebug : DebugMonoBehaviour { private void Start() { Log.Info(\"This is an info message\", \"Start\"); Log.Warn(\"This is a warning message\", \"Start\"); Log.Error(\"This is an error message\", nameof(Start)) } } In the derived class, the methods Info() , Warning() , and Error() are available for logging different levels of information based on the situation. Properties bool _showDebugInfo : A serialized private field that can be toggled in the Unity Inspector. It allows for the enabling or disabling of debug logs on a per-instance basis. Methods Info protected void Info(string msg, string callingMethod = \"\") Outputs an informational message to the Unity console, contingent on the debug settings. Parameters: msg : The message to log. callingMethod (optional): The name of the method issuing the log for added context. Warning protected void Warning(string msg, string callingMethod = \"\") Displays a warning message in the Unity console if debug logging is active. Parameters: msg : The warning message to log. callingMethod (optional): The name of the method issuing the log for added context. Error protected void Error(string msg, string callingMethod = \"\") Logs an error message regardless of the current debug logging settings. Parameters: msg : The error message to log. callingMethod (optional): The name of the method issuing the log for added context. Conditional Compilation The Info and Warning methods are wrapped with the UNITY_EDITOR preprocessor directive to ensure that debug-related functionality is only compiled and executed within the Unity Editor. This is a safeguard to prevent unnecessary logging overhead in production builds. Example Below is a hypothetical example of a MonoBehaviour subclass that uses DebugMonoBehaviour to log when a player enters a specific zone: public class PlayerZoneTracker : DebugMonoBehaviour { private void OnTriggerEnter(Collider other) { if (other.CompareTag(\"Player\")) { Info(\"Player has entered the zone\", nameof(OnTriggerEnter)); } } } Notes It is recommended to use the logging methods with discretion to avoid performance impacts, particularly in code areas where performance is crucial. Providing the callingMethod parameter can increase the informational value of the log by providing clear context. The debugging tools within this class are purposed for the Unity Editor and will not be included in the final production build. See Also UnityEngine.MonoBehaviour UnityEngine.Debug Debug Scriptable Object Overview The DebugScriptableObject is an abstract class that extends UnityEngine.ScriptableObject and provides integrated debug logging functionality. It is designed for use within the Unity Editor to assist developers by offering a convenient way to log informational messages, warnings, and errors. Usage This class is intended to be inherited by other ScriptableObject classes that need debugging capabilities. It should not be instantiated directly. Inheriting the DebugScriptableObject To use DebugScriptableObject , create a new class that inherits from it: public class TestDebugScriptableObject : DebugScriptableObject { public void DebugMessages() { Log.Info(\"This is an info message\", \"DebugMessages\"); Log.Warn(\"This is a warning message\", \"DebugMessages\"); Log.Error(\"This is an error message\", \"DebugMessages\") } } Within this subclass, you can use the provided methods ( Info() , Warning() , Error() ) to log messages to the Unity console. Properties bool _showDebugInfo : Serialized private field that can be toggled in the Unity inspector to enable or disable debug logging for the specific instance of the ScriptableObject . Methods Info protected void Info(string msg, string callingMethod = \"\") Logs an informational message to the Unity console if debugging is enabled. Parameters: msg : The message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Warning protected void Warning(string msg, string callingMethod = \"\") Logs a warning message to the Unity console if debugging is enabled. Parameters: msg : The warning message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Error protected void Error(string msg, string callingMethod = \"\") Logs an error message to the Unity console. Parameters: msg : The error message to log. callingMethod (optional): The name of the method that is calling the log function, for additional context. Conditional Compilation The Info and Warning methods use the UNITY_EDITOR preprocessor directive to ensure that debug checks and logging are only compiled and performed within the Unity Editor. This avoids the performance overhead of logging in the production build of the game. Example Below is an example of a ScriptableObject subclass that uses DebugScriptableObject to log an error during settings validation: [CreateAssetMenu(fileName = \"GameSettings\", menuName = \"Game/Settings\")] public class GameSettings : DebugScriptableObject { public void ValidateSettings() { if (someInvalidCondition) { Error(\"Invalid game setting detected\", nameof(ValidateSettings)); } } } Notes Use logging methods judiciously to prevent performance degradation, especially in performance-critical code paths. Providing the callingMethod argument can improve the usefulness of logs by adding context. Debugging functionality provided by this class is intended for use within the Unity Editor only and will not be included in production builds. See Also UnityEngine.ScriptableObject UnityEngine.Debug"
  },
  "Manual/Singleton.html": {
    "href": "Manual/Singleton.html",
    "title": "| Core Framework Documentation Singleton",
    "keywords": "Singleton Overview The Singleton<T> class is a generic MonoBehaviour singleton implementation within the CoreFramework namespace. It guarantees that only one instance of the specified MonoBehaviour type exists within the application. The class provides easy access to the singleton instance and ensures that if an instance does not exist upon request, one will be automatically created. Usage To use the Singleton<T> class, inherit from it by specifying the MonoBehaviour type that should exist as a singleton. Example: public class GameManager : Singleton<GameManager> { // Your GameManager code here } Accessing the Singleton The instance of the singleton can be accessed through the Instance property. If the instance doesn't exist, it will be created. GameManager myGameManager = GameManager.Instance; Properties HasInstance public static bool HasInstance { get; } A property to check if the singleton instance already exists. TryGetInstance public static T TryGetInstance() Returns the singleton instance if it exists; otherwise, returns null. Current public static T Current { get; } Provides direct access to the singleton instance. Should be used for all instance calls instead of the static Instance property when no null-checking is needed. Instance public static T Instance { get; } Provides access to the singleton instance, creating it if necessary. If no instance exists, a new GameObject is created with the singleton component attached. Methods Awake protected virtual void Awake() Called by Unity when the script instance is being loaded. Initializes the singleton instance. InitializeSingleton protected virtual void InitializeSingleton() Sets the static instance to the current object if it's the first to be created. If an instance already exists, the GameObject to which this script is attached will be destroyed. Notes The singleton pattern is used here to ensure that there's only one instance of a component throughout the application. If you need to enforce a stricter singleton (i.e., you want to persist across scenes), you may need to add logic to handle DontDestroyOnLoad. Caution is advised when using singletons, as they can cause issues with scene management and unit testing. See Also UnityEngine.MonoBehaviour UnityEngine.GameObject Unity's execution order for event functions like Awake"
  }
}