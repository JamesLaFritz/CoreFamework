{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Change Log | Core Framework Documentation",
    "keywords": "Change Log Initial commit Hash: 8c10ff2 Date: 2022-07-18]( https://github.com/JamesLaFritz/CoreFamework/commit/8c10ff2ca30ae6cbe591bafa3c6d35fcea718017 ) Initial Commit Hash: 4b9d941 Date: 2022-07-18]( https://github.com/JamesLaFritz/CoreFamework/commit/4b9d94168e1fc4aef365031d84ac9f72da21c13c ) Documentation Configuration. Hash: 5354d7b Date: 2022-07-19]( https://github.com/JamesLaFritz/CoreFamework/commit/5354d7b3cd70afd6be27ba4fa4d63ad0ea9d72e4 ) Merge branch 'dev' Hash: 5768fd2 Date: 2022-07-19]( https://github.com/JamesLaFritz/CoreFamework/commit/5768fd27568c75d58744fd6613cde8975cd0156e )"
  },
  "index.html": {
    "href": "index.html",
    "title": "About The Project | Core Framework Documentation",
    "keywords": "<!-- Header --> <!--<h3 align=\"center\">Project Title</h3>--> <!--<h2 align=\"center\">Project Description</h2>--> ' Report Bug or Request Feature <!-- PROJECT SHIELDS --> <!-- Links --> <!-- PROJECT LOGO --> <!-- ABOUT THE PROJECT --> About The Project Documentation Framework that contains useful Modules to be Used in Unity Project. Built With V2021.3.5f1 <!-- Installation --> Installation To install this into your project for modifications Clone or Download the code from Git Hub into your project. Check Out Third Party Notices for additional assets that where used in this project that you can get from the asset store. <!-- ROADMAP --> Roadmap See the open issues for a list of proposed features (and known issues). <!-- LICENSE --> License Distributed under the MIT License. See for more information. <!-- Ac --> License Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 Ryan Hipple's Game Architecture with Scriptable Objects from Unite Austin 2017 @roboryantron The slides are on slideshare. [!Video https://www.youtube.com/embed/raQ3iHhE_Kk] The video for the talk is posted on Unity's YouTube page. Add API documentation Add this to the doc.json file { \"metadata\": [ { \"src\": [ { \"src\":\"../\", \"files\": [\"**.cs\"], \"exclude\": [ \"docs/**\", \"**/bin/**\", \"**/obj/**\", \"Documentation~/**\", \".git/**\" ] } ], \"dest\": \"api\", \"disableGitFeatures\": false, \"disableDefaultFilter\": false, \"force\": true } ], \"build\": { \"content\": [ { \"files\": [\"api/**\"] }, } }"
  },
  "License/Asset Licenses.html": {
    "href": "License/Asset Licenses.html",
    "title": "Asset Licenses | Core Framework Documentation",
    "keywords": "Asset Licenses Restricted Asset The publisher has designated this as a Restricted Asset under Section 2.2.2 of the Asset Store EULA. Specifically, the publisher added the following restrictions: END USER may not monetize this Asset in an application whose primary purpose is to create user-generated content. ( Metaverse) END USER may not incorporate the Asset into a product whose primary purpose is to enable the minting and exchange of non-fungible tokens. Extension Asset One license required for each individual user. Single Entity License applies to a single entity. Contractors are required to have their own, separate license. Multi Entity License applies to an entity as well as parent, child, and sister entities. Contractors working on a project do not need a separate license. For more information, check the EULA and FAQ ."
  },
  "License/LICENSE.html": {
    "href": "License/LICENSE.html",
    "title": "MIT License | Core Framework Documentation",
    "keywords": "MIT License Copyright (c) 2022 James LaFritz Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "License/Third Party Notices.html": {
    "href": "License/Third Party Notices.html",
    "title": "Third Party Notices | Core Framework Documentation",
    "keywords": "Third Party Notices This package contains third-party software components governed by the license(s) indicated below: Unity Property Attribute License Assets: \"Runtime/Extensions/ArrayExtensions.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: Unity Cs Reference License BitCake BitStrap License Assets: \"Runtime/Attributes/Functional/Option.cs\" \"Runtime/Animation/AnimationParameter.cs\" \"Runtime/Animation/AnimatorFieldAttribute.cs\" \"Runtime/Animation/BoolAnimationParameter.cs\" \"Runtime/Animation/FloatAnimationParameter.cs\" \"Runtime/Animation/IntAnimationParameter.cs\" \"Runtime/Animation/TriggerAnimationParameter.cs\" \"Editor/Animation/AnimationParameterDrawer.cs\" \"Editor/Attributes/Properties/PropertyDrawerHelper.cs\" Licenses: BitCake BitStrap License Adobe Assets: \"Mixamo/**\" All Animations and Models can be obtained for free from Mixamo Licenses: Adobe General Terms of Use Mixamo Additional Terms The following assets are from the asset store. Used in the making of this product and my appear in the screens shots, but are not included, If you would like to utilize them you can obtain them from the Asset Store. Extension Asset Assets: \"Asset Store/Synty/PolygonStarter/**\" POLYGON Starter Pack - Low Poly 3D Art by Synty Cost: Free Licenses: Asset Store End User License Agreement Sections 2.3 and 2.4 Asset Licenses: Extension Asset Single Entity Assets: Licenses: Asset Store End User License Agreement (Single Entity - Section 1.1) Asset Licenses: Single Entity Restricted Single Entity Assets: \"Asset Store/Synty/PolygonPrototype/**\" POLYGON Prototype - Low Poly 3D Art by Synty Cost: $4.99 Licenses: Asset Store End User License Agreement (Restricted - Section 2.2.2)(Single Entity - Section 1.1) Asset Licenses: Restricted Single Entity Restricted Single Entity Synty Custom Licenses Assets: Licenses: Asset Store End User License Agreement (Restricted - Section 2.2.2)(Single Entity - Section 1.1) Asset Licenses: Restricted Single Entity Synty Custom Licenses"
  },
  "Manual/Attributes/attributes.html": {
    "href": "Manual/Attributes/attributes.html",
    "title": "Attributes | Core Framework Documentation",
    "keywords": "Attributes Alerts Note some info Tip This is some Tip Warning This is a warning Caution This is a Catuion Important This is something Important Images Put Images in the Images Directory To use them here Code Normal private void Update() { } Block Quote private void Update() { }"
  },
  "Manual/Attributes/ButtonAttribute.html": {
    "href": "Manual/Attributes/ButtonAttribute.html",
    "title": "Button | Core Framework Documentation",
    "keywords": "Button A method can be marked as a button. A button appears in the inspector and executes the method if clicked. Warning The method must not have any paramaters and can not be static. Tip Use ButtonAttribute.Mode.Play if you want the Button to only work in Play mode. Tip Use ButtonAttribute.Mode.Editor if you want the Button to only work in Edit mode. using CoreFramework.Attributes; using UnityEngine; public class AttributesExample : MonoBehaviour { [Button(ButtonAttribute.Mode.Play)] public void PlayModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode Only\"); } [Button(ButtonAttribute.Mode.Editor)] public void EditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Edit Mode Only\"); } [Button] public void PlayAndEditModeButton() { Debug.Log($\"{name}: {GetType().Name} : Play Mode and Edit Mode\"); } }"
  },
  "Manual/Attributes/Decorators/HeaderAttribute.html": {
    "href": "Manual/Attributes/Decorators/HeaderAttribute.html",
    "title": "Header | Core Framework Documentation",
    "keywords": "Header Draws a Header in the Inspector that allows using custom text, an icon, a color and a textheight increase. Tip To Draw a header that is just a seperator use empty strings \"\" for the Text and Icon Header(string text, string iconPath, float[] colorElement, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, a color and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the seperator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.Decorators.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", new[] {1f, 1f, 1f})] public float health = 100; [Header(\"Health\", \"\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health1 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {1f, 1f, 1f})] public float health2 = 100; [Header(\"\", \"\", new[] {0f, 0f, 0f, 1f})] public float health3 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", new[] {0.5f, 0.5f, 0.5f}, 2f)] public float health4 = 100; } Header(string text, string iconPath, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon and a textheight increase. The text Height increase defaults to 1.5f . Will use Grey for the seperator and White for the text. using UnityEngine; using Header = CoreFramework.Attributes.Decorators.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\")] public float health5 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", 2f)] public float health6 = 100; } Header(string s, bool textOnly = true) Draws a Header in the Inspector that allows using custom text, or an icon with a textheight increase. The text Height increase defaults to 1.5f . Will use Grey for the seperator and White for the text. Tip To Draw a seperator use an empty string \"\" Tip To Draw a header that is just an Icon pass false using UnityEngine; using Header = CoreFramework.Attributes.Decorators.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Assets/PathToYourIcon/NameOfYourIconWithExtension\", false)] public float health7 = 100; [Header(\"Health\")] public float health8 = 100; } Header(string text, string iconPath, PresetColor presetColor, float textHeightIncrease = 1.5f) Draws a Header in the Inspector that allows using custom text, an icon, one of the preset colors and a textheight increase. The text Height increase defaults to 1.5f . Tip A Null Color will use Grey for the seperator and White for the text. The Colors avaliable are Black Blue Cyan Gray Green Grey Magenta Red Yellow using UnityEngine; using Header = CoreFramework.Attributes.Decorators.HeaderAttribute; public class AttributesExample : MonoBehaviour { [Header(\"Health\", \"\", HeaderAttribute.PresetColor.Green)] public float health9 = 100; [Header(\"\", \"\", HeaderAttribute.PresetColor.Magenta, 0.5f)] public float health10 = 100; [Header(\"Health\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Cyan)] public float health11 = 100; [Header(\"\", \"Assets/PathToYourIcon/NameOfYourIconWithExtension\", HeaderAttribute.PresetColor.Blue)] public float health12 = 100; }"
  },
  "Manual/Attributes/Decorators/InfoBoxAttribute.html": {
    "href": "Manual/Attributes/Decorators/InfoBoxAttribute.html",
    "title": "Button | Core Framework Documentation",
    "keywords": "Button Draws an Information Box in the Inspector. The Types of Boxes avaliable are None - A Message Box Info - A Message Box with an Info Icon Warning - A Warning Message Box Error - An Error Message Box. using CoreFramework.Attributes.Decorators; using UnityEngine; public class AttributesExample : MonoBehaviour { [InfoBox(\"Info String To Display\")] public float someFloat; [InfoBox(\"Some Float with no icon in box\", InfoBoxType.None)] public float someOtherFloat; [InfoBox(\"Some Bool with a warning.\", InfoBoxType.Warning)] public bool someBool; [InfoBox(\"Some String with an error message.\", InfoBoxType.Error)] public string someString; }"
  },
  "Manual/Attributes/Properties/FolderPathAttribute.html": {
    "href": "Manual/Attributes/Properties/FolderPathAttribute.html",
    "title": "| Core Framework Documentation",
    "keywords": ""
  },
  "Manual/Attributes/Properties/RequiredReferenceAttribute.html": {
    "href": "Manual/Attributes/Properties/RequiredReferenceAttribute.html",
    "title": "| Core Framework Documentation",
    "keywords": ""
  },
  "Manual/Attributes/Properties/ShowIfBoolAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfBoolAttribute.html",
    "title": "| Core Framework Documentation",
    "keywords": ""
  },
  "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html": {
    "href": "Manual/Attributes/Properties/ShowIfEnumValueAttribute.html",
    "title": "| Core Framework Documentation",
    "keywords": ""
  }
}